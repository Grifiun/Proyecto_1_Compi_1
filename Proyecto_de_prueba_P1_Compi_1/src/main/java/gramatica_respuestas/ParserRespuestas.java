
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package gramatica_respuestas;

import java_cup.runtime.*;
import gramatica_respuestas.ParserRespuestasSym;
import gramatica_respuestas.LexerIndigoRespuestas;
import java_cup.runtime.XMLElement;
import clasesDAO.BloqueParametros;
import clasesDAO.Token;
import clasesDAO.TokenError;
import clasesDAO.TokenParametro;
import tablas.InformacionTabla;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserRespuestas extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserRespuestasSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserRespuestas() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserRespuestas(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserRespuestas(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\013\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\025\000" +
    "\002\010\005\000\002\010\003\000\002\007\025\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\015" +
    "\006\000\002\015\005\000\002\016\006\000\002\016\005" +
    "\000\002\011\010\000\002\011\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\006\003\006\010\010\001\002\000\010\002" +
    "\ufffc\003\ufffc\010\ufffc\001\002\000\010\002\ufffb\003\ufffb" +
    "\010\ufffb\001\002\000\010\002\ufffa\003\ufffa\010\ufffa\001" +
    "\002\000\004\002\162\001\002\000\004\012\012\001\002" +
    "\000\004\002\uffff\001\002\000\006\015\014\016\013\001" +
    "\002\000\004\013\027\001\002\000\004\011\015\001\002" +
    "\000\006\003\006\010\017\001\002\000\006\003\006\010" +
    "\022\001\002\000\004\012\021\001\002\000\006\003\ufffd" +
    "\010\ufffd\001\002\000\004\016\013\001\002\000\004\012" +
    "\024\001\002\000\006\003\ufffe\010\ufffe\001\002\000\006" +
    "\016\013\020\025\001\002\000\004\011\026\001\002\000" +
    "\004\002\000\001\002\000\032\021\042\022\031\023\030" +
    "\024\044\026\033\027\034\030\035\032\043\033\041\034" +
    "\032\036\036\037\040\001\002\000\004\011\uffd9\001\002" +
    "\000\004\011\uffda\001\002\000\004\011\uffd2\001\002\000" +
    "\004\011\uffd7\001\002\000\004\011\uffd6\001\002\000\004" +
    "\011\uffd5\001\002\000\004\011\uffd1\001\002\000\004\011" +
    "\124\001\002\000\004\011\045\001\002\000\004\011\uffd3" +
    "\001\002\000\004\011\uffdb\001\002\000\004\011\uffd4\001" +
    "\002\000\004\011\uffd8\001\002\000\004\004\046\001\002" +
    "\000\004\040\047\001\002\000\004\013\050\001\002\000" +
    "\004\006\051\001\002\000\004\004\052\001\002\000\006" +
    "\042\054\043\055\001\002\000\010\005\ufff3\014\ufff3\042" +
    "\115\001\002\000\004\013\122\001\002\000\004\013\120" +
    "\001\002\000\006\005\105\014\104\001\002\000\010\005" +
    "\ufff4\014\ufff4\043\060\001\002\000\004\013\061\001\002" +
    "\000\044\021\074\022\103\023\072\024\076\025\066\026" +
    "\065\027\064\030\102\031\073\032\075\033\067\034\063" +
    "\035\071\036\100\037\101\040\070\041\077\001\002\000" +
    "\010\005\ufff2\014\ufff2\043\ufff2\001\002\000\012\005\uffe0" +
    "\014\uffe0\042\uffe0\043\uffe0\001\002\000\012\005\uffe5\014" +
    "\uffe5\042\uffe5\043\uffe5\001\002\000\012\005\uffe6\014\uffe6" +
    "\042\uffe6\043\uffe6\001\002\000\012\005\uffe7\014\uffe7\042" +
    "\uffe7\043\uffe7\001\002\000\012\005\uffe1\014\uffe1\042\uffe1" +
    "\043\uffe1\001\002\000\012\005\uffdd\014\uffdd\042\uffdd\043" +
    "\uffdd\001\002\000\012\005\uffdf\014\uffdf\042\uffdf\043\uffdf" +
    "\001\002\000\012\005\uffe9\014\uffe9\042\uffe9\043\uffe9\001" +
    "\002\000\012\005\uffe3\014\uffe3\042\uffe3\043\uffe3\001\002" +
    "\000\012\005\uffeb\014\uffeb\042\uffeb\043\uffeb\001\002\000" +
    "\012\005\uffe2\014\uffe2\042\uffe2\043\uffe2\001\002\000\012" +
    "\005\uffe8\014\uffe8\042\uffe8\043\uffe8\001\002\000\012\005" +
    "\uffec\014\uffec\042\uffec\043\uffec\001\002\000\012\005\uffde" +
    "\014\uffde\042\uffde\043\uffde\001\002\000\012\005\uffdc\014" +
    "\uffdc\042\uffdc\043\uffdc\001\002\000\012\005\uffe4\014\uffe4" +
    "\042\uffe4\043\uffe4\001\002\000\012\005\uffea\014\uffea\042" +
    "\uffea\043\uffea\001\002\000\004\042\054\001\002\000\004" +
    "\007\106\001\002\000\004\005\107\001\002\000\004\010" +
    "\110\001\002\000\004\012\111\001\002\000\004\017\112" +
    "\001\002\000\004\011\113\001\002\000\010\002\ufff6\003" +
    "\ufff6\010\ufff6\001\002\000\010\005\ufff5\014\ufff5\042\115" +
    "\001\002\000\004\013\116\001\002\000\044\021\074\022" +
    "\103\023\072\024\076\025\066\026\065\027\064\030\102" +
    "\031\073\032\075\033\067\034\063\035\071\036\100\037" +
    "\101\040\070\041\077\001\002\000\010\005\ufff0\014\ufff0" +
    "\042\ufff0\001\002\000\044\021\074\022\103\023\072\024" +
    "\076\025\066\026\065\027\064\030\102\031\073\032\075" +
    "\033\067\034\063\035\071\036\100\037\101\040\070\041" +
    "\077\001\002\000\010\005\ufff1\014\ufff1\043\ufff1\001\002" +
    "\000\044\021\074\022\103\023\072\024\076\025\066\026" +
    "\065\027\064\030\102\031\073\032\075\033\067\034\063" +
    "\035\071\036\100\037\101\040\070\041\077\001\002\000" +
    "\010\005\uffef\014\uffef\042\uffef\001\002\000\004\004\125" +
    "\001\002\000\012\025\126\031\132\035\131\040\127\001" +
    "\002\000\004\013\uffd0\001\002\000\004\013\uffcd\001\002" +
    "\000\004\013\133\001\002\000\004\013\uffce\001\002\000" +
    "\004\013\uffcf\001\002\000\004\006\134\001\002\000\004" +
    "\004\135\001\002\000\006\043\141\044\140\001\002\000" +
    "\006\005\ufff7\014\ufff7\001\002\000\006\005\152\014\151" +
    "\001\002\000\004\013\147\001\002\000\004\013\142\001" +
    "\002\000\044\021\074\022\103\023\072\024\076\025\066" +
    "\026\065\027\064\030\102\031\073\032\075\033\067\034" +
    "\063\035\071\036\100\037\101\040\070\041\077\001\002" +
    "\000\004\042\144\001\002\000\004\013\145\001\002\000" +
    "\044\021\074\022\103\023\072\024\076\025\066\026\065" +
    "\027\064\030\102\031\073\032\075\033\067\034\063\035" +
    "\071\036\100\037\101\040\070\041\077\001\002\000\006" +
    "\005\uffee\014\uffee\001\002\000\044\021\074\022\103\023" +
    "\072\024\076\025\066\026\065\027\064\030\102\031\073" +
    "\032\075\033\067\034\063\035\071\036\100\037\101\040" +
    "\070\041\077\001\002\000\006\005\uffed\014\uffed\001\002" +
    "\000\006\043\141\044\140\001\002\000\004\007\153\001" +
    "\002\000\004\005\154\001\002\000\004\010\155\001\002" +
    "\000\004\012\156\001\002\000\004\017\157\001\002\000" +
    "\004\011\160\001\002\000\010\002\ufff9\003\ufff9\010\ufff9" +
    "\001\002\000\006\005\ufff8\014\ufff8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\012\002\006\005\010\006\003\007\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\015\005\017\006\003\007\004\001\001\000\010\005" +
    "\022\006\003\007\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\055\015\056\016\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\116\001\001\000\002\001\001\000\004\012\120\001" +
    "\001\000\002\001\001\000\004\012\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\136\011\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\145\001\001\000\002\001\001\000\004\012" +
    "\147\001\001\000\002\001\001\000\004\011\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserRespuestas$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserRespuestas$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserRespuestas$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Listado de errores	
	//private ArrayList<BloqueParametros> listadoSolicitudes = new ArrayList();
	private ArrayList<TokenError> listadoErroresRespuesta = new ArrayList();
	private ArrayList<InformacionTabla> listadoInformacionTablas = new ArrayList();
	//Controlador de error sintactico
	
	@Override
	public void syntax_error(Symbol a){
		Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna		
		String msgError = "Se esperaba: ";	
		System.out.println("error de sintaxis: linea: "+tokenError.getLexema()+" "+tokenError.getLinea()+" columna: "+tokenError.getColumna());
		
		int linea = tokenError.getLinea();
		int columna = tokenError.getColumna();

		for(int i = 0; i < expected_token_ids().size(); i++){
			//msgError = msgError + mensajes[expected_token_ids().get(i)];
			msgError = msgError + symbl_name_from_id(expected_token_ids().get(i)) + " ";

			if(i < expected_token_ids().size() - 1)
				msgError = msgError + ", ";			
		}
		tokenError = null;

		//listadoErroresRespuesta.add("ERROR SINTACTICO", "Faltan tokens", msgError, linea, columna);
		//System.out.println(msgError);
		//recibe tipo error, lexema error, mensaje, linea, columna
		TokenError tokenErrorAux = new TokenError("SINTACTICO", tokenError.getLexema(), msgError, tokenError.getLinea(), tokenError.getColumna());
		listadoErroresRespuesta.add(tokenErrorAux);
	}

	public ArrayList<TokenError> getListadoErroresRespuestas(){
		return listadoErroresRespuesta;
	}

	public ArrayList<InformacionTabla> obtenerListadoInformacionTablas(){
		return listadoInformacionTablas;
	}

    public ParserRespuestas(LexerIndigoRespuestas lex){
        super(lex);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserRespuestas$actions {
  private final ParserRespuestas parser;

  /** Constructor */
  CUP$ParserRespuestas$actions(ParserRespuestas parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserRespuestas$do_action_part00000000(
    int                        CUP$ParserRespuestas$act_num,
    java_cup.runtime.lr_parser CUP$ParserRespuestas$parser,
    java.util.Stack            CUP$ParserRespuestas$stack,
    int                        CUP$ParserRespuestas$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserRespuestas$result;

      /* select the action based on the action number */
      switch (CUP$ParserRespuestas$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-1)).value;
		RESULT = start_val;
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserRespuestas$parser.done_parsing();
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= MENOR EXCLAMACION INICIO_RESPUESTAS MAYOR bloque_respuestas MENOR EXCLAMACION FIN_RESPUESTAS MAYOR 
            {
              Object RESULT =null;
		 	
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-8)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= respuesta 
            {
              Object RESULT =null;
		 	
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_respuestas ::= bloque_respuestas respuesta 
            {
              Object RESULT =null;

              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("bloque_respuestas",1, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-1)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_respuestas ::= respuesta 
            {
              Object RESULT =null;

              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("bloque_respuestas",1, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // respuesta ::= respuesta_solicitud 
            {
              Object RESULT =null;
		int informacionTablaleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int informacionTablaright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		InformacionTabla informacionTabla = (InformacionTabla)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
				
			System.out.println("Se detecto una respuesta para solicitud"); 
			if(informacionTabla != null){
				listadoInformacionTablas.add(informacionTabla);
			}
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("respuesta",3, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // respuesta ::= respuesta_tabla_consulta 
            {
              Object RESULT =null;
		int informacionTablaleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int informacionTablaright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		InformacionTabla informacionTabla = (InformacionTabla)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 
			System.out.println("Se detecto una entrada para tablas");
			if(informacionTabla != null){
				listadoInformacionTablas.add(informacionTabla);
			} 
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("respuesta",3, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // respuesta ::= error 
            {
              Object RESULT =null;

              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("respuesta",3, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // respuesta_solicitud ::= MENOR EXCLAMACION INICIO_RESPUESTA DOS_PUNTOS parametro_tipo_respuesta MAYOR LLAVES_INICIO parametro_tipo_bloque_respuesta DOS_PUNTOS CORCHETES_INICIO LLAVES_INICIO bloque_parametros LLAVES_FIN CORCHETES_FIN LLAVES_FIN MENOR EXCLAMACION FIN_RESPUESTA MAYOR 
            {
              InformacionTabla RESULT =null;
		int tituloTablaleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-14)).left;
		int tituloTablaright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-14)).right;
		String tituloTabla = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-14)).value;
		int valoresTablaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-7)).left;
		int valoresTablaAuxright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-7)).right;
		List<ArrayList<String>> valoresTablaAux = (List<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-7)).value;
		
		InformacionTabla informacionTabla = new InformacionTabla();
		informacionTabla.setInformacionTabla(valoresTablaAux);
		informacionTabla.setTituloGeneral(tituloTabla);
		RESULT = informacionTabla;
	
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("respuesta_solicitud",4, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-18)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_parametros ::= bloque_parametros COMA parametro_general 
            {
              List<ArrayList<String>> RESULT =null;
		int valoresTablaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)).left;
		int valoresTablaAuxright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)).right;
		List<ArrayList<String>> valoresTablaAux = (List<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)).value;
		int filaDatosleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int filaDatosright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		ArrayList<String> filaDatos = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			if(valoresTablaAux == null){
				valoresTablaAux = new ArrayList();
				ArrayList<String> titulos = new ArrayList();
				titulos.add("PARAMETRO");
				titulos.add("VALOR");
				valoresTablaAux.add(titulos);
			}
			valoresTablaAux.add(filaDatos);
			RESULT = valoresTablaAux;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("bloque_parametros",6, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_parametros ::= parametro_general 
            {
              List<ArrayList<String>> RESULT =null;
		int filaDatosleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int filaDatosright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		ArrayList<String> filaDatos = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			ArrayList<String> titulos = new ArrayList();
			titulos.add("PARAMETRO");
			titulos.add("VALOR");

			List<ArrayList<String>> valoresTablaAux = new ArrayList();
			valoresTablaAux.add(titulos);
			valoresTablaAux.add(filaDatos);
			RESULT = valoresTablaAux;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("bloque_parametros",6, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // respuesta_tabla_consulta ::= MENOR EXCLAMACION INICIO_RESPUESTA DOS_PUNTOS TABLA_CONSULTA MAYOR LLAVES_INICIO CONSULTAS DOS_PUNTOS CORCHETES_INICIO LLAVES_INICIO bloque_parametros_consultas LLAVES_FIN CORCHETES_FIN LLAVES_FIN MENOR EXCLAMACION FIN_RESPUESTA MAYOR 
            {
              InformacionTabla RESULT =null;
		int valoresTablaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-7)).left;
		int valoresTablaAuxright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-7)).right;
		List<ArrayList<String>> valoresTablaAux = (List<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-7)).value;
		
			//Creamos el objeto que contendra toda la informacion
			InformacionTabla informacionTabla = new InformacionTabla();
			informacionTabla.setInformacionTabla(valoresTablaAux);
			informacionTabla.setTituloGeneral("RESULTADO DE CONSULTA DE DATOS");
			RESULT = informacionTabla;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("respuesta_tabla_consulta",5, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-18)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloque_parametros_consultas ::= bloque_parametros_consultas COMA parametros_fila 
            {
              List<ArrayList<String>> RESULT =null;
		int valoresTablaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)).left;
		int valoresTablaAuxright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)).right;
		List<ArrayList<String>> valoresTablaAux = (List<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)).value;
		int filasleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int filasright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		ArrayList<String> filas = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			if(valoresTablaAux == null){
				valoresTablaAux = new ArrayList();
			}
			valoresTablaAux.add(filas);
			RESULT = valoresTablaAux;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("bloque_parametros_consultas",2, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_parametros_consultas ::= parametros_titulos 
            {
              List<ArrayList<String>> RESULT =null;
		int titulosleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int titulosright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		ArrayList<String> titulos = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			List<ArrayList<String>> valoresTablaAux = new ArrayList();
		    valoresTablaAux.add(titulos);
			RESULT = valoresTablaAux;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("bloque_parametros_consultas",2, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_parametros_consultas ::= parametros_fila 
            {
              List<ArrayList<String>> RESULT =null;
		int filasleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int filasright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		ArrayList<String> filas = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			List<ArrayList<String>> valoresTablaAux = new ArrayList();
		    valoresTablaAux.add(filas);
			RESULT = valoresTablaAux;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("bloque_parametros_consultas",2, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_titulos ::= parametros_titulos PARAMETRO DOS_PUNTOS valor_parametro_general 
            {
              ArrayList<String> RESULT =null;
		int listadoTitulosleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).left;
		int listadoTitulosright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).right;
		ArrayList<String> listadoTitulos = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).value;
		int tituloAuxleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int tituloAuxright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		String tituloAux = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			if(listadoTitulos == null){
				listadoTitulos = new ArrayList();
			}

			listadoTitulos.add(tituloAux);	
			RESULT = listadoTitulos;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametros_titulos",11, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_titulos ::= PARAMETRO DOS_PUNTOS valor_parametro_general 
            {
              ArrayList<String> RESULT =null;
		int tituloAuxleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int tituloAuxright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		String tituloAux = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			ArrayList<String> listadoTitulos = new ArrayList();
			listadoTitulos.add(tituloAux);
			RESULT = listadoTitulos;		
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametros_titulos",11, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros_fila ::= parametros_fila VALOR DOS_PUNTOS valor_parametro_general 
            {
              ArrayList<String> RESULT =null;
		int listadoFilaleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).left;
		int listadoFilaright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).right;
		ArrayList<String> listadoFila = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).value;
		int datoFilaleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int datoFilaright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		String datoFila = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			if(listadoFila == null){
				listadoFila = new ArrayList();
			}

			listadoFila.add(datoFila);	
			RESULT = listadoFila;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametros_fila",12, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros_fila ::= VALOR DOS_PUNTOS valor_parametro_general 
            {
              ArrayList<String> RESULT =null;
		int datoFilaleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int datoFilaright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		String datoFila = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			ArrayList<String> listadoFila = new ArrayList();
			listadoFila.add(datoFila);
			RESULT = listadoFila;		
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametros_fila",12, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro_general ::= PARAMETRO DOS_PUNTOS valor_parametro_general VALOR DOS_PUNTOS valor_parametro_general 
            {
              ArrayList<String> RESULT =null;
		int valorParametroleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).left;
		int valorParametroright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).right;
		String valorParametro = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-3)).value;
		int valorVerdaderoleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int valorVerdaderoright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		String valorVerdadero = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			ArrayList<String> fila = new ArrayList();
			fila.add(valorParametro);
			fila.add(valorVerdadero);
			RESULT = fila;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_general",7, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-5)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro_general ::= RESPUESTA DOS_PUNTOS valor_parametro_general 
            {
              ArrayList<String> RESULT =null;
		int descripcionleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int descripcionright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		String descripcion = (String)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		
			ArrayList<String> filaError = new ArrayList();
			filaError.add("ERROR:");
			filaError.add(descripcion);
			RESULT = filaError;
		
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_general",7, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.elementAt(CUP$ParserRespuestas$top-2)), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor_parametro_general ::= VALOR_TEXTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_parametro_general ::= CREAR_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor_parametro_general ::= MODIFICAR_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor_parametro_general ::= ELIMINAR_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor_parametro_general ::= LOGIN_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor_parametro_general ::= CREDENCIALES_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor_parametro_general ::= NUEVO_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor_parametro_general ::= ELIMINAR_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor_parametro_general ::= MODIFICAR_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor_parametro_general ::= PARAMETROS_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor_parametro_general ::= AGREGAR_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor_parametro_general ::= MODIFICAR_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor_parametro_general ::= ELIMINAR_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor_parametro_general ::= PARAMETROS_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor_parametro_general ::= CONSULTAR_DATOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor_parametro_general ::= CONSULTAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor_parametro_general ::= TABLA_CONSULTA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("valor_parametro_general",8, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametro_tipo_respuesta ::= CREAR_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametro_tipo_respuesta ::= MODIFICAR_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro_tipo_respuesta ::= ELIMINAR_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro_tipo_respuesta ::= LOGIN_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametro_tipo_respuesta ::= NUEVO_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametro_tipo_respuesta ::= ELIMINAR_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro_tipo_respuesta ::= MODIFICAR_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro_tipo_respuesta ::= AGREGAR_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_tipo_respuesta ::= MODIFICAR_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_tipo_respuesta ::= ELIMINAR_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_tipo_respuesta ::= CONSULTAR_DATOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_respuesta",9, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro_tipo_bloque_respuesta ::= CREDENCIALES_USUARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_bloque_respuesta",10, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_tipo_bloque_respuesta ::= PARAMETROS_FORMULARIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_bloque_respuesta",10, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_tipo_bloque_respuesta ::= PARAMETROS_COMPONENTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_bloque_respuesta",10, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro_tipo_bloque_respuesta ::= CONSULTAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserRespuestas$stack.peek()).value;
		 RESULT = a.getLexema().replaceAll("\"","").trim(); 
              CUP$ParserRespuestas$result = parser.getSymbolFactory().newSymbol("parametro_tipo_bloque_respuesta",10, ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserRespuestas$stack.peek()), RESULT);
            }
          return CUP$ParserRespuestas$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserRespuestas$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserRespuestas$do_action(
    int                        CUP$ParserRespuestas$act_num,
    java_cup.runtime.lr_parser CUP$ParserRespuestas$parser,
    java.util.Stack            CUP$ParserRespuestas$stack,
    int                        CUP$ParserRespuestas$top)
    throws java.lang.Exception
    {
              return CUP$ParserRespuestas$do_action_part00000000(
                               CUP$ParserRespuestas$act_num,
                               CUP$ParserRespuestas$parser,
                               CUP$ParserRespuestas$stack,
                               CUP$ParserRespuestas$top);
    }
}

}