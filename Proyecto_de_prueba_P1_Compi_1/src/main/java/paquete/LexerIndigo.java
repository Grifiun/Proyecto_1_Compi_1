/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package paquete;
import java_cup.runtime.*;
import static paquete.sym.*;

/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>indigoJflex.jflex</tt>
 */
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\3\1\1\0\2\1\22\0\1\43\1\10\1\42\1\77\1\74"+
    "\2\77\1\102\4\77\1\12\1\14\1\101\1\77\1\100\11\76\1\11"+
    "\1\77\1\6\1\13\1\7\2\77\1\15\1\61\1\44\1\17\1\45"+
    "\1\52\1\54\1\60\1\50\1\72\1\62\1\53\1\51\1\16\1\20"+
    "\1\55\1\70\1\21\1\47\1\22\1\46\1\57\1\56\1\67\1\75"+
    "\1\71\1\4\1\77\1\5\1\77\1\25\1\77\1\41\1\64\1\31"+
    "\1\34\1\35\1\36\1\75\1\66\1\23\1\75\1\63\1\30\1\75"+
    "\1\24\1\27\1\40\1\75\1\37\1\26\1\32\1\33\1\75\1\65"+
    "\3\75\1\2\1\77\1\3\1\77\u05e1\0\12\73\206\0\12\73\306\0"+
    "\12\73\u019c\0\12\73\166\0\12\73\166\0\12\73\166\0\12\73\166\0"+
    "\12\73\166\0\12\73\166\0\12\73\166\0\12\73\166\0\12\73\166\0"+
    "\12\73\140\0\12\73\166\0\12\73\106\0\12\73\u0116\0\12\73\106\0"+
    "\12\73\u0746\0\12\73\46\0\12\73\u012c\0\12\73\200\0\12\73\246\0"+
    "\12\73\6\0\12\73\266\0\12\73\126\0\12\73\206\0\12\73\6\0"+
    "\12\73\u89c6\0\12\73\u02a6\0\12\73\46\0\12\73\306\0\12\73\26\0"+
    "\12\73\126\0\12\73\u0196\0\12\73\u5316\0\12\73\u0586\0\12\73\u0bbc\0"+
    "\12\73\200\0\12\73\74\0\12\73\220\0\12\73\u0116\0\12\73\u0156\0"+
    "\12\73\166\0\12\73\u0176\0\12\73\146\0\12\73\146\0\12\73\u01a6\0"+
    "\12\73\u0366\0\12\73\u4e06\0\12\73\346\0\12\73\u6c74\0\62\73\u1150\0"+
    "\12\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\7\16\1\1"+
    "\3\16\2\17\1\1\2\16\1\20\1\21\2\16\32\0"+
    "\4\16\2\0\1\22\1\23\2\16\1\24\51\0\1\25"+
    "\4\0\3\16\1\17\1\16\1\26\2\16\1\0\1\27"+
    "\4\0\1\30\26\0\1\31\2\0\1\32\23\0\1\16"+
    "\1\33\5\16\1\34\26\0\1\35\24\0\1\16\1\36"+
    "\4\16\5\0\1\37\5\0\1\40\32\0\1\41\6\0"+
    "\1\42\4\16\7\0\1\43\5\0\1\44\5\0\1\45"+
    "\13\0\1\46\4\0\1\47\1\0\1\50\4\0\4\16"+
    "\4\0\1\51\7\0\1\52\5\0\1\53\4\0\1\54"+
    "\1\0\1\55\15\0\4\16\6\0\1\56\13\0\1\57"+
    "\6\0\1\60\7\0\4\16\6\0\1\61\4\0\1\62"+
    "\3\0\1\63\14\0\1\64\4\0\4\16\6\0\1\65"+
    "\13\0\1\66\12\0\4\16\1\67\1\0\1\70\22\0"+
    "\1\71\5\0\1\72\1\0\1\73\1\0\1\74\1\75"+
    "\1\76\1\77\5\0\1\100\21\0\1\16\1\101\1\16"+
    "\1\102\1\0\1\103\24\0\1\104\1\105\3\0\1\106"+
    "\1\0\1\107\6\0\1\110\7\0\1\111\5\0\1\112"+
    "\12\0\1\113\12\0\1\114\11\0\1\115\3\0\1\116"+
    "\2\0\1\117\14\0\1\120\5\0\1\121\6\0\1\122"+
    "\4\0\1\123\1\0\1\124\5\0\1\125\1\0\1\126"+
    "\1\0\1\127\3\0\1\130\1\0\1\131\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\103\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\206\0\103\0\206\0\206\0\311\0\u010c"+
    "\0\206\0\u014f\0\u0192\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1"+
    "\0\u0324\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\206\0\206"+
    "\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u025b\0\u0797\0\u07da\0\u081d\0\u0860"+
    "\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90"+
    "\0\u0cd3\0\u03ed\0\206\0\206\0\u0d16\0\u0d59\0\103\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814"+
    "\0\103\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u0c90\0\u1a2c\0\103\0\u1a6f\0\u1ab2\0\u1af5\0\103\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\103\0\u1c44\0\u1c87\0\u1cca\0\u1d0d"+
    "\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u21c3\0\103\0\u2206\0\u2249\0\103\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff"+
    "\0\u2742\0\u2785\0\206\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\103\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\103"+
    "\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae"+
    "\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6"+
    "\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\206\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\103"+
    "\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\103\0\u3802\0\u3845"+
    "\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d"+
    "\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75"+
    "\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d"+
    "\0\103\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\206"+
    "\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237"+
    "\0\u427a\0\u42bd\0\u4300\0\103\0\u4343\0\u4386\0\u43c9\0\u440c"+
    "\0\u444f\0\103\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\103"+
    "\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6"+
    "\0\u47f9\0\u483c\0\u487f\0\103\0\u48c2\0\u4905\0\u4948\0\u498b"+
    "\0\103\0\u49ce\0\103\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d"+
    "\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\103"+
    "\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\103"+
    "\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\103\0\u5059\0\u509c"+
    "\0\u50df\0\u5122\0\103\0\u5165\0\103\0\u51a8\0\u51eb\0\u522e"+
    "\0\u5271\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446"+
    "\0\u5489\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e"+
    "\0\u56a1\0\u56e4\0\u5727\0\u576a\0\103\0\u57ad\0\u57f0\0\u5833"+
    "\0\u5876\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u5a4b"+
    "\0\103\0\u5a8e\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd\0\103"+
    "\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2\0\u5df5"+
    "\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87\0\u5fca\0\u600d"+
    "\0\u6050\0\103\0\u6093\0\u60d6\0\u6119\0\u615c\0\103\0\u619f"+
    "\0\u61e2\0\u6225\0\103\0\u6268\0\u62ab\0\u62ee\0\u6331\0\u6374"+
    "\0\u63b7\0\u63fa\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549\0\103"+
    "\0\u658c\0\u65cf\0\u6612\0\u6655\0\u6698\0\u66db\0\u671e\0\u6761"+
    "\0\u67a4\0\u67e7\0\u682a\0\u686d\0\u68b0\0\u68f3\0\103\0\u6936"+
    "\0\u6979\0\u69bc\0\u69ff\0\u6a42\0\u6a85\0\u6ac8\0\u6b0b\0\u6b4e"+
    "\0\u6b91\0\u6bd4\0\103\0\u6c17\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23"+
    "\0\u6d66\0\u6da9\0\u6dec\0\u6e2f\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b"+
    "\0\u6f7e\0\103\0\u6fc1\0\103\0\u7004\0\u7047\0\u708a\0\u70cd"+
    "\0\u7110\0\u7153\0\u7196\0\u71d9\0\u721c\0\u725f\0\u72a2\0\u72e5"+
    "\0\u7328\0\u736b\0\u73ae\0\u73f1\0\u7434\0\u7477\0\103\0\u74ba"+
    "\0\u74fd\0\u7540\0\u7583\0\u75c6\0\103\0\u7609\0\103\0\u764c"+
    "\0\u768f\0\u76d2\0\u7715\0\u7758\0\u779b\0\u77de\0\u7821\0\u7864"+
    "\0\u78a7\0\103\0\u78ea\0\u792d\0\u7970\0\u79b3\0\u79f6\0\u7a39"+
    "\0\u7a7c\0\u7abf\0\u7b02\0\u7b45\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51"+
    "\0\u7c94\0\u7cd7\0\u7d1a\0\u7d5d\0\206\0\u7da0\0\206\0\u7de3"+
    "\0\103\0\u7e26\0\u7e69\0\u7eac\0\u7eef\0\u7f32\0\u7f75\0\u7fb8"+
    "\0\u7ffb\0\u803e\0\u8081\0\u80c4\0\u8107\0\u814a\0\u818d\0\u81d0"+
    "\0\u8213\0\u8256\0\u8299\0\u82dc\0\u831f\0\206\0\206\0\u8362"+
    "\0\u83a5\0\u83e8\0\103\0\u842b\0\103\0\u846e\0\u84b1\0\u84f4"+
    "\0\u8537\0\u857a\0\u85bd\0\103\0\u8600\0\u8643\0\u8686\0\u86c9"+
    "\0\u870c\0\u874f\0\u8792\0\103\0\u87d5\0\u8818\0\u885b\0\u889e"+
    "\0\u88e1\0\103\0\u8924\0\u8967\0\u89aa\0\u89ed\0\u8a30\0\u8a73"+
    "\0\u8ab6\0\u8af9\0\u8b3c\0\u8b7f\0\103\0\u8bc2\0\u8c05\0\u8c48"+
    "\0\u8c8b\0\u8cce\0\u8d11\0\u8d54\0\u8d97\0\u8dda\0\u8e1d\0\103"+
    "\0\u8e60\0\u8ea3\0\u8ee6\0\u8f29\0\u8f6c\0\u8faf\0\u8ff2\0\u9035"+
    "\0\u9078\0\103\0\u90bb\0\u90fe\0\u9141\0\103\0\u9184\0\u91c7"+
    "\0\103\0\u920a\0\u924d\0\u9290\0\u92d3\0\u9316\0\u9359\0\u939c"+
    "\0\u93df\0\u9422\0\u9465\0\u94a8\0\u94eb\0\103\0\u952e\0\u9571"+
    "\0\u95b4\0\u95f7\0\u963a\0\103\0\u967d\0\u96c0\0\u9703\0\u9746"+
    "\0\u9789\0\u97cc\0\103\0\u980f\0\u9852\0\u9895\0\u98d8\0\103"+
    "\0\u991b\0\103\0\u995e\0\u99a1\0\u99e4\0\u9a27\0\u9a6a\0\103"+
    "\0\u9aad\0\103\0\u9af0\0\103\0\u9b33\0\u9b76\0\u9bb9\0\103"+
    "\0\u9bfc\0\103\0\u9c3f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\21\1\23\1\24\12\21\1\25\3\21\1\26"+
    "\1\3\3\21\1\27\2\21\1\30\3\21\1\31\14\21"+
    "\1\2\2\21\1\32\1\21\1\33\1\21\1\34\105\0"+
    "\10\21\1\0\27\21\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\3\21\1\35\23\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\5\21\1\36\21\21\2\0"+
    "\27\21\1\0\6\21\3\0\10\21\1\0\6\21\1\37"+
    "\20\21\2\0\27\21\1\0\6\21\3\0\10\21\1\0"+
    "\5\21\1\40\21\21\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\11\21\1\41\15\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\10\21\1\42\16\21\2\0"+
    "\27\21\1\0\6\21\3\0\12\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\2\43\1\44\6\43\1\53"+
    "\5\43\1\0\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\43\1\65\1\66\2\43\1\67"+
    "\2\43\1\70\1\71\4\43\1\72\1\73\1\44\1\43"+
    "\1\74\1\43\1\74\2\43\2\0\10\21\1\0\27\21"+
    "\2\0\1\21\1\75\25\21\1\0\6\21\3\0\10\21"+
    "\1\0\5\21\1\76\21\21\2\0\27\21\1\0\6\21"+
    "\3\0\10\21\1\0\27\21\2\0\14\21\1\77\12\21"+
    "\1\0\6\21\3\0\10\21\1\0\27\21\2\0\27\21"+
    "\1\0\2\21\1\32\1\21\1\32\1\100\3\0\10\21"+
    "\1\0\27\21\2\0\27\21\1\0\5\21\1\100\3\0"+
    "\40\101\1\0\1\102\27\101\1\0\6\101\3\0\10\21"+
    "\1\0\4\21\1\103\22\21\2\0\27\21\1\0\6\21"+
    "\3\0\10\21\1\0\7\21\1\104\17\21\2\0\27\21"+
    "\1\0\6\21\3\0\10\21\1\0\10\21\1\105\16\21"+
    "\2\0\27\21\1\0\6\21\3\0\10\21\1\0\11\21"+
    "\1\106\15\21\2\0\27\21\1\0\6\21\3\0\40\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\12\43\26\111"+
    "\1\107\1\110\27\111\1\0\3\111\1\43\1\111\2\43"+
    "\2\0\17\43\1\112\20\43\1\107\1\110\7\43\1\113"+
    "\1\114\16\43\1\0\7\43\2\0\16\43\1\115\21\43"+
    "\1\107\1\110\2\43\1\116\24\43\1\0\7\43\2\0"+
    "\13\43\1\117\23\43\1\120\1\107\1\110\1\43\1\121"+
    "\25\43\1\0\7\43\2\0\40\43\1\107\1\110\11\43"+
    "\1\122\15\43\1\0\7\43\2\0\13\43\1\123\24\43"+
    "\1\107\1\110\1\43\1\124\25\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\43\1\125\2\43\1\126\22\43"+
    "\1\0\7\43\2\0\37\43\1\120\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\13\43\1\127\2\43\1\130\1\131"+
    "\20\43\1\107\1\110\1\43\1\132\5\43\1\133\4\43"+
    "\1\134\12\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\7\43\1\135\17\43\1\0\7\43\2\0\17\43\1\136"+
    "\20\43\1\107\1\110\3\43\1\137\23\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\4\43\1\140\22\43\1\0"+
    "\7\43\2\0\14\43\1\141\1\142\22\43\1\107\1\110"+
    "\5\43\1\143\17\43\1\144\1\43\1\0\7\43\2\0"+
    "\16\43\1\145\21\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\16\43\1\146\21\43\1\107\1\110\1\43\1\147"+
    "\2\43\1\150\22\43\1\0\7\43\2\0\16\43\1\151"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\13\43"+
    "\1\152\24\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\14\43\1\153\5\43\1\154\4\43"+
    "\1\0\7\43\2\0\16\43\1\155\7\43\1\156\11\43"+
    "\1\107\1\110\7\43\1\157\17\43\1\0\7\43\2\0"+
    "\26\43\1\156\11\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\22\43\1\154\4\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\2\43\1\160\24\43"+
    "\1\0\7\43\42\0\1\161\1\162\27\0\1\163\2\0"+
    "\1\163\1\0\1\163\4\0\40\43\1\161\1\164\27\43"+
    "\1\163\2\43\1\165\1\43\1\165\2\43\2\0\10\21"+
    "\1\0\27\21\2\0\7\21\1\166\17\21\1\0\6\21"+
    "\3\0\10\21\1\0\6\21\1\167\20\21\2\0\27\21"+
    "\1\0\6\21\3\0\10\21\1\0\27\21\2\0\1\21"+
    "\1\170\25\21\1\0\6\21\3\0\10\21\1\0\27\21"+
    "\2\0\27\21\1\0\2\21\1\171\1\21\1\172\1\21"+
    "\3\0\40\101\1\0\30\101\1\0\6\101\1\173\2\0"+
    "\10\21\1\0\12\21\1\174\14\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\12\21\1\175\14\21\2\0"+
    "\27\21\1\0\6\21\3\0\40\176\1\107\1\110\27\176"+
    "\1\0\7\176\2\0\12\43\26\111\1\177\1\200\27\111"+
    "\1\0\3\111\1\43\1\111\2\43\2\0\40\43\1\107"+
    "\1\110\1\43\1\201\25\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\4\43\1\202\22\43\1\0\7\43\2\0"+
    "\17\43\1\203\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\204\1\205\5\43\1\206\21\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\1\43\1\207\25\43"+
    "\1\0\7\43\2\0\17\43\1\210\20\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\35\43\1\211\2\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\17\43\1\212\20\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\1\213\26\43\1\0\7\43\2\0\15\43\1\214"+
    "\22\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\24\43\1\215\2\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\5\43\1\216\15\43\1\217\3\43"+
    "\1\0\7\43\2\0\20\43\1\220\17\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\5\43"+
    "\1\221\21\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\5\43\1\222\1\43\1\223\17\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\43\1\224\25\43\1\0\7\43"+
    "\2\0\14\43\1\225\23\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\13\43\1\226\24\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\43\1\227"+
    "\25\43\1\0\7\43\2\0\40\43\1\107\1\110\4\43"+
    "\1\230\22\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\7\43\1\231\17\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\2\43\1\232\24\43\1\0\7\43\2\0\40\43"+
    "\1\233\1\234\27\43\1\0\7\43\2\0\15\43\1\235"+
    "\22\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\236\1\237\27\43\1\0\7\43\2\0\13\43\1\240"+
    "\24\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\24\43\1\241\2\43\1\0\7\43\2\0"+
    "\15\43\1\242\22\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\17\43\1\243\20\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\1\244\26\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\1\245\6\43\1\246"+
    "\17\43\1\0\7\43\2\0\40\43\1\107\1\110\10\43"+
    "\1\247\16\43\1\0\7\43\2\0\17\43\1\250\20\43"+
    "\1\107\1\110\3\43\1\251\23\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\4\43\1\252\22\43\1\0\7\43"+
    "\2\0\21\43\1\253\16\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\20\43\1\254\17\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\31\43\1\255\6\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\2\43"+
    "\1\256\24\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\3\43\1\257\23\43\1\0\7\43\42\0\1\161\1\162"+
    "\101\0\1\161\1\162\27\0\1\260\2\0\1\260\1\0"+
    "\1\260\4\0\40\176\1\161\1\164\27\176\1\0\7\176"+
    "\2\0\40\43\1\161\1\164\27\43\1\260\2\43\1\261"+
    "\1\43\1\261\2\43\2\0\10\21\1\0\27\21\2\0"+
    "\1\21\1\262\25\21\1\0\6\21\3\0\10\21\1\0"+
    "\27\21\2\0\5\21\1\263\21\21\1\0\6\21\3\0"+
    "\10\21\1\0\6\21\1\264\20\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\27\21\2\0\27\21\1\0"+
    "\2\21\1\171\3\21\3\0\10\21\1\0\13\21\1\265"+
    "\10\21\1\266\2\21\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\13\21\1\267\10\21\1\270\2\21\2\0"+
    "\27\21\1\0\6\21\3\0\40\176\1\271\30\176\1\0"+
    "\7\176\2\0\40\176\1\177\1\200\27\176\1\0\7\176"+
    "\2\0\13\43\1\272\24\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\14\43\1\273\23\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\43\1\274"+
    "\25\43\1\0\7\43\2\0\40\176\1\204\1\205\27\176"+
    "\1\0\7\176\2\0\40\43\1\107\1\110\15\43\1\275"+
    "\11\43\1\0\7\43\2\0\40\43\1\107\1\110\13\43"+
    "\1\276\13\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\16\43\1\277\10\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\17\43\1\277\7\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\1\43\1\300\25\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\4\43\1\301\22\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\4\43\1\302\22\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\2\43\1\303\24\43"+
    "\1\0\7\43\2\0\13\43\1\304\24\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\20\43\1\305\17\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\2\43\1\306\24\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\11\43\1\307\15\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\15\43\1\310\11\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\2\43\1\311\24\43\1\0\7\43"+
    "\2\0\13\43\1\312\1\43\1\313\22\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\20\43\1\314\17\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\3\43\1\315\23\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\1\316\26\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\5\43\1\317\21\43\1\0\7\43\2\0\40\43"+
    "\1\320\1\321\27\43\1\0\7\43\2\0\13\43\1\322"+
    "\24\43\1\107\1\110\27\43\1\0\7\43\2\0\40\176"+
    "\1\233\1\234\27\176\1\0\7\176\2\0\40\43\1\107"+
    "\1\110\4\43\1\323\22\43\1\0\7\43\2\0\40\176"+
    "\1\236\1\237\27\176\1\0\7\176\2\0\40\43\1\107"+
    "\1\110\10\43\1\324\16\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\2\43\1\325\24\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\4\43\1\326\22\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\5\43\1\327\21\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\14\43\1\330\12\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\14\43\1\331"+
    "\12\43\1\0\7\43\2\0\13\43\1\332\24\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\4\43\1\333\22\43\1\0\7\43\2\0\13\43\1\334"+
    "\24\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\3\43\1\335\23\43\1\0\7\43\2\0"+
    "\20\43\1\336\17\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\30\43\1\337\7\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\16\43\1\340\21\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\33\43\1\341\4\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\1\43"+
    "\1\341\25\43\1\0\7\43\2\0\20\43\1\342\17\43"+
    "\1\107\1\110\27\43\1\0\7\43\42\0\1\161\1\162"+
    "\27\0\1\343\2\0\1\343\1\0\1\343\4\0\40\43"+
    "\1\161\1\164\27\43\1\343\2\43\1\344\1\43\1\344"+
    "\2\43\2\0\10\21\1\0\27\21\2\0\1\345\26\21"+
    "\1\0\6\21\3\0\10\21\1\0\27\21\2\0\1\21"+
    "\1\346\25\21\1\0\6\21\3\0\10\21\1\0\14\21"+
    "\1\347\12\21\2\0\27\21\1\0\6\21\3\0\10\21"+
    "\1\0\22\21\1\350\4\21\2\0\27\21\1\0\6\21"+
    "\3\0\10\21\1\0\14\21\1\351\12\21\2\0\27\21"+
    "\1\0\6\21\3\0\10\21\1\0\22\21\1\352\4\21"+
    "\2\0\27\21\1\0\6\21\3\0\23\43\1\353\14\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\1\43\1\354\25\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\10\43\1\355\16\43\1\0\7\43\2\0"+
    "\17\43\1\356\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\16\43\1\357\21\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\360\1\361\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\1\362\26\43\1\0\7\43"+
    "\2\0\16\43\1\363\21\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\16\43\1\364\21\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\43\1\365"+
    "\25\43\1\0\7\43\2\0\40\43\1\366\1\367\27\43"+
    "\1\0\7\43\2\0\16\43\1\370\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\7\43"+
    "\1\371\17\43\1\0\7\43\2\0\16\43\1\372\21\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\16\43\1\373"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\5\43\1\374\21\43\1\0\7\43\2\0"+
    "\17\43\1\375\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\1\43\1\376\25\43\1\0"+
    "\7\43\2\0\17\43\1\377\20\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\43\1\u0100"+
    "\25\43\1\0\7\43\2\0\40\43\1\107\1\110\16\43"+
    "\1\u0101\10\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\4\43\1\u0102\22\43\1\0\7\43\2\0\40\176\1\320"+
    "\1\321\27\176\1\0\7\176\2\0\17\43\1\u0103\20\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\1\u0104\26\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\1\43\1\u0105\25\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\4\43\1\u0106\22\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\6\43\1\u0107\20\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\2\43\1\u0108\24\43\1\0"+
    "\7\43\2\0\13\43\1\u0109\24\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\43\1\u010a"+
    "\25\43\1\0\7\43\2\0\40\43\1\107\1\110\3\43"+
    "\1\u010b\23\43\1\0\7\43\2\0\14\43\1\u010c\23\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\5\43\1\u010d\21\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\12\43\1\u010e\14\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\43\1\u010f\25\43\1\0\7\43"+
    "\2\0\33\43\1\u010f\4\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\14\43\1\u0110\23\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\u0111\1\u0112\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\4\43\1\u0113\22\43"+
    "\1\0\7\43\14\0\1\u0114\25\0\1\161\1\162\27\0"+
    "\1\u0115\2\0\1\u0115\1\0\1\u0115\4\0\12\43\1\u0116"+
    "\25\43\1\161\1\164\27\43\1\u0115\2\43\1\u0117\1\43"+
    "\1\u0117\2\43\2\0\10\21\1\0\7\21\1\u0118\17\21"+
    "\2\0\27\21\1\0\6\21\3\0\10\21\1\0\15\21"+
    "\1\u0119\11\21\2\0\27\21\1\0\6\21\3\0\10\21"+
    "\1\0\13\21\1\u011a\13\21\2\0\27\21\1\0\6\21"+
    "\3\0\10\21\1\0\15\21\1\u011b\11\21\2\0\27\21"+
    "\1\0\6\21\3\0\10\21\1\0\13\21\1\u011c\13\21"+
    "\2\0\27\21\1\0\6\21\3\0\20\43\1\u011d\17\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\13\43\1\u011e"+
    "\24\43\1\107\1\110\27\43\1\0\7\43\2\0\13\43"+
    "\1\u011f\24\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\43\1\u0120\25\43\1\0\7\43"+
    "\2\0\23\43\1\u0121\14\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\176\1\360\1\361\27\176\1\0\7\176"+
    "\2\0\40\43\1\107\1\110\14\43\1\u0122\12\43\1\0"+
    "\7\43\2\0\14\43\1\u0123\23\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\u0124\1\u0125\27\43\1\0"+
    "\7\43\2\0\17\43\1\u0126\20\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\176\1\366\1\367\27\176\1\0"+
    "\7\176\2\0\23\43\1\u0127\14\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\16\43\1\u0128\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\23\43\1\u0129\14\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\u012a\1\u012b"+
    "\27\43\1\0\7\43\2\0\14\43\1\u012c\23\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\23\43\1\u012d\14\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\14\43\1\u012e"+
    "\23\43\1\107\1\110\27\43\1\0\7\43\2\0\16\43"+
    "\1\u012f\21\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\u0130\1\u0131\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\15\43\1\u0132\11\43\1\0\7\43\2\0"+
    "\14\43\1\u0133\23\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\4\43\1\u0134\22\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\1\43\1\u0135\25\43"+
    "\1\0\7\43\2\0\14\43\1\u0136\23\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\1\43"+
    "\1\u0137\25\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\4\43\1\u0138\22\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\7\43\1\u0139\17\43\1\0\7\43\2\0\23\43"+
    "\1\u013a\14\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\17\43\1\u013b\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\u013c\1\u013d\27\43\1\0\7\43\2\0"+
    "\23\43\1\u013e\14\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\1\43\1\u013f\25\43\1\0"+
    "\7\43\2\0\16\43\1\u0140\21\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\u0141\1\u0142\27\43\1\0"+
    "\7\43\2\0\40\43\1\u0143\1\u0144\27\43\1\0\7\43"+
    "\2\0\40\176\1\u0111\1\u0112\27\176\1\0\7\176\2\0"+
    "\40\43\1\107\1\110\6\43\1\u0145\20\43\1\0\7\43"+
    "\73\0\1\u0146\2\0\1\u0146\1\0\1\u0146\44\0\1\161"+
    "\1\162\27\0\1\u0115\2\0\1\u0115\1\0\1\u0115\4\0"+
    "\40\43\1\107\1\110\27\43\1\u0146\2\43\1\u0147\1\43"+
    "\1\u0147\2\43\2\0\40\43\1\161\1\164\27\43\1\u0115"+
    "\2\43\1\u0117\1\43\1\u0117\2\43\2\0\10\21\1\0"+
    "\10\21\1\u0148\16\21\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\25\21\1\u0149\1\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\10\21\1\u014a\16\21\2\0"+
    "\27\21\1\0\6\21\3\0\10\21\1\0\25\21\1\u014b"+
    "\1\21\2\0\27\21\1\0\6\21\3\0\40\43\1\107"+
    "\1\110\1\43\1\u014c\25\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\1\u014d\26\43\1\0\7\43\2\0\17\43"+
    "\1\u014e\20\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\23\43\1\u014f\14\43\1\u0150\1\u0151\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\6\43\1\u0152\2\43\1\u0153"+
    "\15\43\1\0\7\43\2\0\13\43\1\u0154\24\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\1\43\1\u0155\25\43\1\0\7\43\2\0\40\176\1\u0124"+
    "\1\u0125\27\176\1\0\7\176\2\0\40\43\1\107\1\110"+
    "\4\43\1\u0156\22\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\13\43\1\u0157\13\43\1\0\7\43\2\0\40\43"+
    "\1\u0158\1\u0159\27\43\1\0\7\43\2\0\20\43\1\u015a"+
    "\17\43\1\107\1\110\27\43\1\0\7\43\2\0\40\176"+
    "\1\u012a\1\u012b\27\176\1\0\7\176\2\0\13\43\1\u015b"+
    "\24\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\2\43\1\u015c\24\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\u015d\26\43\1\0\7\43\2\0"+
    "\40\43\1\u015e\1\u015f\27\43\1\0\7\43\2\0\40\176"+
    "\1\u0130\1\u0131\27\176\1\0\7\176\2\0\16\43\1\u0160"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\13\43"+
    "\1\u0161\24\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\16\43\1\u0162\21\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\u0163\1\u0164\27\43\1\0\7\43\2\0"+
    "\40\43\1\u0165\1\u0166\27\43\1\0\7\43\2\0\17\43"+
    "\1\u0167\20\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\u0168\26\43\1\0\7\43\2\0"+
    "\13\43\1\u0169\24\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\1\u016a\4\43\1\u016b\21\43"+
    "\1\0\7\43\2\0\16\43\1\u016c\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\176\1\u013c\1\u013d\27\176"+
    "\1\0\7\176\2\0\40\43\1\107\1\110\2\43\1\u016d"+
    "\24\43\1\0\7\43\2\0\20\43\1\u016e\17\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\17\43\1\u016f\20\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\176\1\u0141"+
    "\1\u0142\27\176\1\0\7\176\2\0\40\176\1\u0143\1\u0144"+
    "\27\176\1\0\7\176\2\0\40\43\1\107\1\110\4\43"+
    "\1\u0170\22\43\1\0\7\43\73\0\1\u0171\2\0\1\u0171"+
    "\1\0\1\u0171\4\0\40\43\1\107\1\110\27\43\1\u0171"+
    "\2\43\1\u0172\1\43\1\u0172\2\43\2\0\10\21\1\0"+
    "\16\21\1\u0173\10\21\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\20\21\1\u0174\6\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\16\21\1\u0175\10\21\2\0"+
    "\27\21\1\0\6\21\3\0\10\21\1\0\20\21\1\u0176"+
    "\6\21\2\0\27\21\1\0\6\21\3\0\40\43\1\107"+
    "\1\110\23\43\1\u0177\3\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\4\43\1\u0178\22\43\1\0\7\43\2\0"+
    "\23\43\1\u0179\14\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\1\u017a\26\43\1\0\7\43"+
    "\2\0\40\176\1\u0150\1\u0151\27\176\1\0\7\176\2\0"+
    "\16\43\1\u017b\21\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\13\43\1\u017c\24\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\u017d\1\u017e\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\3\43\1\u017f\23\43\1\0"+
    "\7\43\2\0\15\43\1\u0180\22\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\4\43\1\u0181"+
    "\22\43\1\0\7\43\2\0\40\176\1\u0158\1\u0159\27\176"+
    "\1\0\7\176\2\0\40\43\1\107\1\110\1\43\1\u0182"+
    "\25\43\1\0\7\43\2\0\40\43\1\107\1\110\3\43"+
    "\1\u0183\23\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\3\43\1\u0184\23\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\4\43\1\u0185\22\43\1\0\7\43\2\0\40\176"+
    "\1\u015e\1\u015f\27\176\1\0\7\176\2\0\40\43\1\107"+
    "\1\110\23\43\1\u0186\3\43\1\0\7\43\2\0\17\43"+
    "\1\u0187\20\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\23\43\1\u0188\14\43\1\u0189\1\u018a\27\43\1\0\7\43"+
    "\2\0\40\176\1\u0163\1\u0164\27\176\1\0\7\176\2\0"+
    "\40\176\1\u0165\1\u0166\27\176\1\0\7\176\2\0\15\43"+
    "\1\u018b\22\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\13\43\1\u018c\24\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\17\43\1\u018d\20\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\17\43\1\u018e\20\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\16\43\1\u018f\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\u0190\1\u0191\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\3\43\1\u0192"+
    "\23\43\1\0\7\43\2\0\17\43\1\u0193\20\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\15\43\1\u0194\22\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\1\u0195\26\43\1\0\7\43\14\0\1\u0196\70\0"+
    "\12\43\1\u0197\25\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\10\21\1\0\10\21\1\u0198\16\21\2\0\27\21"+
    "\1\0\6\21\3\0\10\21\1\0\22\21\1\u0199\4\21"+
    "\2\0\27\21\1\0\6\21\3\0\10\21\1\0\10\21"+
    "\1\u019a\16\21\2\0\27\21\1\0\6\21\3\0\10\21"+
    "\1\0\22\21\1\u019b\4\21\2\0\27\21\1\0\6\21"+
    "\3\0\20\43\1\u019c\17\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\16\43\1\u019d\21\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\u019e\26\43"+
    "\1\0\7\43\2\0\13\43\1\u019f\24\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\17\43\1\u01a0\20\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\3\43\1\u01a1\23\43\1\0\7\43\2\0\40\176\1\u017d"+
    "\1\u017e\27\176\1\0\7\176\2\0\40\43\1\u01a2\1\u01a3"+
    "\27\43\1\0\7\43\2\0\16\43\1\u01a4\21\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\3\43\1\u01a5\23\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\23\43\1\u01a6\3\43\1\0\7\43\2\0\40\43"+
    "\1\u01a7\1\u01a8\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\2\43\1\u01a9\24\43\1\0\7\43\2\0\13\43"+
    "\1\u01aa\24\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\u01ab\1\u01ac\27\43\1\0\7\43\2\0\23\43"+
    "\1\u01ad\14\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\13\43\1\u01ae\1\u01af\23\43\1\107\1\110\1\u01b0\26\43"+
    "\1\0\7\43\2\0\40\176\1\u0189\1\u018a\27\176\1\0"+
    "\7\176\2\0\13\43\1\u01b1\24\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\17\43\1\u01b2\20\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\4\43"+
    "\1\u01b3\22\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\1\43\1\u01b4\25\43\1\0\7\43\2\0\15\43\1\u01b5"+
    "\22\43\1\107\1\110\27\43\1\0\7\43\2\0\40\176"+
    "\1\u0190\1\u0191\27\176\1\0\7\176\2\0\40\43\1\107"+
    "\1\110\2\43\1\u01b6\24\43\1\0\7\43\2\0\16\43"+
    "\1\u01b7\21\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\u01b8\1\u01b9\27\43\1\0\7\43\2\0\13\43"+
    "\1\u01ba\24\43\1\107\1\110\27\43\1\0\7\43\73\0"+
    "\1\u01bb\2\0\1\u01bb\1\0\1\u01bb\4\0\40\43\1\107"+
    "\1\110\27\43\1\u01bb\2\43\1\u01bc\1\43\1\u01bc\2\43"+
    "\2\0\10\21\1\0\17\21\1\u01bd\7\21\2\0\27\21"+
    "\1\0\6\21\3\0\10\21\1\0\13\21\1\u01be\13\21"+
    "\2\0\27\21\1\0\6\21\3\0\10\21\1\0\17\21"+
    "\1\u01bf\7\21\2\0\27\21\1\0\6\21\3\0\10\21"+
    "\1\0\13\21\1\u01c0\13\21\2\0\27\21\1\0\6\21"+
    "\3\0\16\43\1\u01c1\21\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\14\43\1\u01c2\23\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\16\43\1\u01c3\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\5\43"+
    "\1\u01c4\21\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\5\43\1\u01c5\21\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\3\43\1\u01c6\23\43\1\0\7\43\2\0\40\176"+
    "\1\u01a2\1\u01a3\27\176\1\0\7\176\2\0\40\43\1\u01c7"+
    "\1\u01c8\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\4\43\1\u01c9\22\43\1\0\7\43\2\0\20\43\1\u01ca"+
    "\17\43\1\107\1\110\27\43\1\0\7\43\2\0\40\176"+
    "\1\u01a7\1\u01a8\27\176\1\0\7\176\2\0\13\43\1\u01cb"+
    "\24\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\7\43\1\u01cc\17\43\1\0\7\43\2\0"+
    "\40\176\1\u01ab\1\u01ac\27\176\1\0\7\176\2\0\40\43"+
    "\1\107\1\110\1\u01cd\1\43\1\u01ce\3\43\1\u01cf\20\43"+
    "\1\0\7\43\2\0\14\43\1\u01d0\23\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\2\43"+
    "\1\u01d1\24\43\1\0\7\43\2\0\17\43\1\u01d2\20\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\u01d3"+
    "\1\u01d4\27\43\1\0\7\43\2\0\23\43\1\u01d5\14\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\16\43\1\u01d6"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\13\43"+
    "\1\u01d7\24\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\4\43\1\u01d8\22\43\1\0\7\43"+
    "\2\0\13\43\1\u01d9\24\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\3\43\1\u01da\23\43"+
    "\1\0\7\43\2\0\40\176\1\u01b8\1\u01b9\27\176\1\0"+
    "\7\176\2\0\17\43\1\u01db\20\43\1\107\1\110\27\43"+
    "\1\0\7\43\73\0\1\u01dc\2\0\1\u01dc\1\0\1\u01dc"+
    "\4\0\40\43\1\107\1\110\27\43\1\u01dc\2\43\1\u01dd"+
    "\1\43\1\u01dd\2\43\2\0\10\21\1\0\20\21\1\u01de"+
    "\6\21\2\0\27\21\1\0\6\21\3\0\10\21\1\0"+
    "\17\21\1\u01df\7\21\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\20\21\1\u01e0\6\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\17\21\1\u01e1\7\21\2\0"+
    "\27\21\1\0\6\21\3\0\40\43\1\u01e2\1\u01e3\27\43"+
    "\1\0\7\43\2\0\40\43\1\u01e4\1\u01e5\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\5\43\1\u01e6\21\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\11\43\1\u01e7"+
    "\15\43\1\0\7\43\2\0\40\43\1\107\1\110\2\43"+
    "\1\u01e8\24\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\12\43\1\u01e9\14\43\1\0\7\43\2\0\40\176\1\u01c7"+
    "\1\u01c8\27\176\1\0\7\176\2\0\40\43\1\107\1\110"+
    "\15\43\1\u01ea\11\43\1\0\7\43\2\0\16\43\1\u01eb"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\17\43"+
    "\1\u01ec\20\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\43\1\u01ed\25\43\1\0\7\43"+
    "\2\0\16\43\1\u01ee\21\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\3\43\1\u01ef\23\43"+
    "\1\0\7\43\2\0\16\43\1\u01f0\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\20\43\1\u01f1\17\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\1\43\1\u01f2\25\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\1\43\1\u01f3\25\43\1\0\7\43\2\0\40\176"+
    "\1\u01d3\1\u01d4\27\176\1\0\7\176\2\0\40\43\1\107"+
    "\1\110\1\u01f4\1\43\1\u01f5\3\43\1\u01f6\20\43\1\0"+
    "\7\43\2\0\40\43\1\u01f7\1\u01f8\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\1\u01f9\26\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\6\43\1\u01fa\20\43\1\0"+
    "\7\43\2\0\17\43\1\u01fb\20\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\23\43\1\u01fc\14\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\u01fd\1\u01fe\27\43"+
    "\1\0\7\43\42\0\1\u01ff\1\u01dc\41\0\40\43\1\u01ff"+
    "\1\u0200\27\43\1\0\7\43\2\0\10\21\1\0\21\21"+
    "\1\u0201\5\21\2\0\27\21\1\0\6\21\3\0\10\21"+
    "\1\0\26\21\1\u0202\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\21\21\1\u0203\5\21\2\0\27\21\1\0"+
    "\6\21\3\0\10\21\1\0\26\21\1\u0204\2\0\27\21"+
    "\1\0\6\21\3\0\40\176\1\u01e2\1\u01e3\27\176\1\0"+
    "\7\176\2\0\40\176\1\u01e4\1\u01e5\27\176\1\0\7\176"+
    "\2\0\40\43\1\107\1\110\11\43\1\u0205\15\43\1\0"+
    "\7\43\2\0\16\43\1\u0206\21\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\7\43\1\u0207"+
    "\17\43\1\0\7\43\2\0\16\43\1\u0208\21\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\7\43\1\u0209\17\43\1\0\7\43\2\0\40\43\1\u020a"+
    "\1\u020b\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\4\43\1\u020c\22\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\3\43\1\u020d\23\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\5\43\1\u020e\21\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\2\43\1\u020f\24\43\1\0\7\43"+
    "\2\0\17\43\1\u0210\20\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\4\43\1\u0211\22\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\13\43\1\u0212"+
    "\13\43\1\0\7\43\2\0\13\43\1\u0213\24\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\16\43\1\u0214\21\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\3\43\1\u0215\23\43\1\0\7\43\2\0\16\43"+
    "\1\u0216\21\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\176\1\u01f7\1\u01f8\27\176\1\0\7\176\2\0\40\43"+
    "\1\107\1\110\4\43\1\u0217\22\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\4\43\1\u0218\22\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\4\43\1\u0219\22\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\1\u021a\5\43\1\u021b"+
    "\20\43\1\0\7\43\2\0\40\176\1\u01fd\1\u01fe\27\176"+
    "\1\0\7\176\2\0\40\176\1\u01ff\1\u0200\27\176\1\0"+
    "\7\176\2\0\10\21\1\0\22\21\1\u021c\4\21\2\0"+
    "\27\21\1\0\6\21\3\0\10\21\1\0\13\21\1\u021d"+
    "\13\21\2\0\27\21\1\0\6\21\3\0\10\21\1\0"+
    "\22\21\1\u021e\4\21\2\0\27\21\1\0\6\21\3\0"+
    "\10\21\1\0\13\21\1\u021f\13\21\2\0\27\21\1\0"+
    "\6\21\3\0\16\43\1\u0220\21\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\u0221\1\u0222\27\43\1\0"+
    "\7\43\2\0\13\43\1\u0223\24\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\17\43\1\u0224\20\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\1\43"+
    "\1\u0225\25\43\1\0\7\43\2\0\40\176\1\u020a\1\u020b"+
    "\27\176\1\0\7\176\2\0\16\43\1\u0226\21\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\23\43\1\u0227\14\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\11\43\1\u0228\15\43\1\0\7\43\2\0\13\43"+
    "\1\u0229\24\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\5\43\1\u022a\21\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\10\43\1\u022b\16\43\1\0"+
    "\7\43\2\0\16\43\1\u022c\21\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\u022d\26\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\5\43\1\u022e"+
    "\21\43\1\0\7\43\2\0\40\43\1\107\1\110\2\43"+
    "\1\u022f\24\43\1\0\7\43\2\0\17\43\1\u0230\20\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\16\43\1\u0231"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\1\u0232\26\43\1\0\7\43\2\0\16\43"+
    "\1\u0233\21\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\16\43\1\u0234\21\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\16\43\1\u0235\21\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\10\21\1\0\13\21\1\u0236\13\21\2\0"+
    "\27\21\1\0\6\21\3\0\10\21\1\0\13\21\1\u0237"+
    "\13\21\2\0\27\21\1\0\6\21\3\0\14\43\1\u0238"+
    "\23\43\1\107\1\110\27\43\1\0\7\43\2\0\40\176"+
    "\1\u0221\1\u0222\27\176\1\0\7\176\2\0\17\43\1\u0239"+
    "\20\43\1\107\1\110\27\43\1\0\7\43\2\0\15\43"+
    "\1\u023a\22\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\u023b\1\u023c\27\43\1\0\7\43\2\0\40\43"+
    "\1\u023d\1\u023e\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\2\43\1\u023f\24\43\1\0\7\43\2\0\16\43"+
    "\1\u0240\21\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\17\43\1\u0241\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\2\43\1\u0242\24\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\2\43\1\u0243\24\43"+
    "\1\0\7\43\2\0\40\43\1\u0244\1\u0245\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\4\43\1\u0246\22\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\11\43\1\u0247"+
    "\15\43\1\0\7\43\2\0\13\43\1\u0248\24\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\5\43\1\u0249\21\43\1\0\7\43\2\0\14\43\1\u024a"+
    "\23\43\1\107\1\110\27\43\1\0\7\43\2\0\13\43"+
    "\1\u024b\24\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\43\1\u024c\1\u024d\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\5\43\1\u024e\21\43\1\0\7\43\2\0"+
    "\17\43\1\u024f\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\1\43\1\u0250\25\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\4\43\1\u0251\22\43"+
    "\1\0\7\43\2\0\40\43\1\u0252\1\u0253\27\43\1\0"+
    "\7\43\2\0\40\176\1\u023b\1\u023c\27\176\1\0\7\176"+
    "\2\0\40\176\1\u023d\1\u023e\27\176\1\0\7\176\2\0"+
    "\40\43\1\107\1\110\3\43\1\u0254\23\43\1\0\7\43"+
    "\2\0\14\43\1\u0255\23\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\4\43\1\u0256\22\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\7\43\1\u0257"+
    "\17\43\1\0\7\43\2\0\16\43\1\u0258\21\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\176\1\u0244\1\u0245"+
    "\27\176\1\0\7\176\2\0\16\43\1\u0259\21\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\16\43\1\u025a\21\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\17\43\1\u025b"+
    "\20\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\2\43\1\u025c\24\43\1\0\7\43\2\0"+
    "\40\43\1\u025d\1\u025e\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\1\u025f\26\43\1\0\7\43\2\0\40\176"+
    "\1\u024c\1\u024d\27\176\1\0\7\176\2\0\40\43\1\107"+
    "\1\110\11\43\1\u0260\15\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\5\43\1\u0261\21\43\1\0\7\43\2\0"+
    "\14\43\1\u0262\23\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\16\43\1\u0263\21\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\176\1\u0252\1\u0253\27\176\1\0\7\176"+
    "\2\0\40\43\1\107\1\110\2\43\1\u0264\24\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\1\43\1\u0265\25\43"+
    "\1\0\7\43\2\0\16\43\1\u0266\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\13\43\1\u0267\24\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\u0268\1\u0269"+
    "\27\43\1\0\7\43\2\0\14\43\1\u026a\23\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\14\43\1\u026b\23\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\40\43\1\107"+
    "\1\110\4\43\1\u026c\22\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\7\43\1\u026d\17\43\1\0\7\43\2\0"+
    "\40\176\1\u025d\1\u025e\27\176\1\0\7\176\2\0\40\43"+
    "\1\107\1\110\4\43\1\u026e\22\43\1\0\7\43\2\0"+
    "\16\43\1\u026f\21\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\2\43\1\u0270\24\43\1\0"+
    "\7\43\2\0\20\43\1\u0271\17\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\u0272\1\u0273\27\43\1\0"+
    "\7\43\2\0\13\43\1\u0274\24\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\14\43\1\u0275\23\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\43\1\u0276\1\u0277\27\43"+
    "\1\0\7\43\2\0\17\43\1\u0278\20\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\40\176\1\u0268\1\u0269\27\176"+
    "\1\0\7\176\2\0\40\43\1\u0279\1\u027a\27\43\1\0"+
    "\7\43\2\0\40\43\1\107\1\110\1\43\1\u027b\25\43"+
    "\1\0\7\43\2\0\16\43\1\u027c\21\43\1\107\1\110"+
    "\27\43\1\0\7\43\2\0\13\43\1\u027d\24\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\16\43\1\u027e\21\43"+
    "\1\107\1\110\27\43\1\0\7\43\2\0\14\43\1\u027f"+
    "\23\43\1\107\1\110\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\7\43\1\u0280\17\43\1\0\7\43\2\0"+
    "\40\43\1\107\1\110\1\43\1\u0281\25\43\1\0\7\43"+
    "\2\0\40\176\1\u0272\1\u0273\27\176\1\0\7\176\2\0"+
    "\17\43\1\u0282\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\20\43\1\u0283\17\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\176\1\u0276\1\u0277\27\176\1\0\7\176"+
    "\2\0\40\43\1\107\1\110\4\43\1\u0284\22\43\1\0"+
    "\7\43\2\0\40\176\1\u0279\1\u027a\27\176\1\0\7\176"+
    "\2\0\14\43\1\u0285\23\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\40\43\1\u0286\1\u0287\27\43\1\0\7\43"+
    "\2\0\17\43\1\u0288\20\43\1\107\1\110\27\43\1\0"+
    "\7\43\2\0\14\43\1\u0289\23\43\1\107\1\110\27\43"+
    "\1\0\7\43\2\0\40\43\1\107\1\110\1\43\1\u028a"+
    "\25\43\1\0\7\43\2\0\13\43\1\u028b\24\43\1\107"+
    "\1\110\27\43\1\0\7\43\2\0\40\43\1\u028c\1\u028d"+
    "\27\43\1\0\7\43\2\0\40\43\1\107\1\110\4\43"+
    "\1\u028e\22\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\1\43\1\u028f\25\43\1\0\7\43\2\0\16\43\1\u0290"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\20\43"+
    "\1\u0291\17\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\40\176\1\u0286\1\u0287\27\176\1\0\7\176\2\0\40\43"+
    "\1\107\1\110\4\43\1\u0292\22\43\1\0\7\43\2\0"+
    "\40\43\1\u0293\1\u0294\27\43\1\0\7\43\2\0\14\43"+
    "\1\u0295\23\43\1\107\1\110\27\43\1\0\7\43\2\0"+
    "\17\43\1\u0296\20\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\176\1\u028c\1\u028d\27\176\1\0\7\176\2\0"+
    "\16\43\1\u0297\21\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\u0298\1\u0299\27\43\1\0\7\43\2\0"+
    "\40\43\1\u029a\1\u029b\27\43\1\0\7\43\2\0\40\43"+
    "\1\107\1\110\1\43\1\u029c\25\43\1\0\7\43\2\0"+
    "\16\43\1\u029d\21\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\176\1\u0293\1\u0294\27\176\1\0\7\176\2\0"+
    "\20\43\1\u029e\17\43\1\107\1\110\27\43\1\0\7\43"+
    "\2\0\40\43\1\107\1\110\4\43\1\u029f\22\43\1\0"+
    "\7\43\2\0\40\43\1\u02a0\1\u02a1\27\43\1\0\7\43"+
    "\2\0\40\176\1\u0298\1\u0299\27\176\1\0\7\176\2\0"+
    "\40\176\1\u029a\1\u029b\27\176\1\0\7\176\2\0\40\43"+
    "\1\u02a2\1\u02a3\27\43\1\0\7\43\2\0\40\43\1\u02a4"+
    "\1\u02a5\27\43\1\0\7\43\2\0\40\43\1\107\1\110"+
    "\1\43\1\u02a6\25\43\1\0\7\43\2\0\16\43\1\u02a7"+
    "\21\43\1\107\1\110\27\43\1\0\7\43\2\0\40\176"+
    "\1\u02a0\1\u02a1\27\176\1\0\7\176\2\0\40\176\1\u02a2"+
    "\1\u02a3\27\176\1\0\7\176\2\0\40\176\1\u02a4\1\u02a5"+
    "\27\176\1\0\7\176\2\0\40\43\1\u02a8\1\u02a9\27\43"+
    "\1\0\7\43\2\0\40\43\1\u02aa\1\u02ab\27\43\1\0"+
    "\7\43\2\0\40\176\1\u02a8\1\u02a9\27\176\1\0\7\176"+
    "\2\0\40\176\1\u02aa\1\u02ab\27\176\1\0\7\176";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40066];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\1\11\26\1\32\0\4\1\2\0"+
    "\4\1\1\11\51\0\1\11\4\0\5\1\1\11\2\1"+
    "\1\0\1\11\4\0\1\11\26\0\1\11\2\0\1\11"+
    "\23\0\7\1\1\11\26\0\1\11\24\0\6\1\5\0"+
    "\1\11\5\0\1\11\32\0\1\11\6\0\5\1\7\0"+
    "\1\11\5\0\1\11\5\0\1\11\13\0\1\11\4\0"+
    "\1\11\1\0\1\11\4\0\4\1\4\0\1\11\7\0"+
    "\1\11\5\0\1\11\4\0\1\11\1\0\1\11\15\0"+
    "\4\1\6\0\1\11\13\0\1\11\6\0\1\11\7\0"+
    "\4\1\6\0\1\11\4\0\1\11\3\0\1\11\14\0"+
    "\1\11\4\0\4\1\6\0\1\11\13\0\1\11\12\0"+
    "\4\1\1\11\1\0\1\11\22\0\1\11\5\0\1\11"+
    "\1\0\1\11\1\0\4\1\5\0\1\11\21\0\4\1"+
    "\1\0\1\11\24\0\2\1\3\0\1\11\1\0\1\11"+
    "\6\0\1\11\7\0\1\11\5\0\1\11\12\0\1\11"+
    "\12\0\1\11\11\0\1\11\3\0\1\11\2\0\1\11"+
    "\14\0\1\11\5\0\1\11\6\0\1\11\4\0\1\11"+
    "\1\0\1\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de los operadores invocados
    //ArrayList<Token> listadoOperadoresInvocados = new ArrayList();
    //ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

     //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
     private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
          //creamos un  token auxiliar
          Token tokenAux = new Token(tipoToken, lexema, fila, columna);
          System.out.println("\nFila : "+fila+" Columna: "+columna+" Token de tipo: "+tipoToken+" Lexema: "+lexema);
          //Agregamos al listado
          //listadoOperadoresInvocados.add(tokenAux);
          //retornamos el token aux como simbolo
          return new Symbol(tipo, tokenAux);
     }

     //Agregamos un token al array list de errores lexicos
     /*
     private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
          //creamos un  token auxiliar
          TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
          //Agregamos al listado
          listadoErroresLexicos.add(tokenErrorAux);
     }

     //Obtenemos el arrLust de los errores lexicos
     public ArrayList<TokenError> obtenerListadoErroresLexicos(){
          return listadoErroresLexicos;
     }

     //Obtenemos el lstado de los tokens
     public ArrayList<Token> obtenerListadoTokens(){
          return listadoOperadoresInvocados;
     }*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 414) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext());
            } 
            // fall through
          case 90: break;
          case 2: 
            { 
            } 
            // fall through
          case 91: break;
          case 3: 
            { return retornarSimbolo(LLAVES_INICIO, "LLAVES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 92: break;
          case 4: 
            { return retornarSimbolo(LLAVES_FIN, "LLAVES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 93: break;
          case 5: 
            { return retornarSimbolo(CORCHETES_INICIO, "CORCHETES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 94: break;
          case 6: 
            { return retornarSimbolo(CORCHETES_FIN, "CORCHETES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 95: break;
          case 7: 
            { return retornarSimbolo(MENOR, "MENOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 96: break;
          case 8: 
            { return retornarSimbolo(MAYOR, "MAYOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 97: break;
          case 9: 
            { return retornarSimbolo(EXCLAMACION, "EXCLAMACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 98: break;
          case 10: 
            { return retornarSimbolo(DOS_PUNTOS, "DOS_PUNTOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 99: break;
          case 11: 
            { return retornarSimbolo(COMA, "COMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 100: break;
          case 12: 
            { return retornarSimbolo(IGUAL, "IGUAL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 101: break;
          case 13: 
            { return retornarSimbolo(MENOS, "MENOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 102: break;
          case 14: 
            { return retornarSimbolo(SQFORM_VALOR_NOMRE_CAMPOS, "SQFORM_VALOR_NOMRE_CAMPOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 103: break;
          case 15: 
            { return retornarSimbolo(SQFORM_VALOR_NUMERO, "SQFORM_VALOR_NUMERO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 104: break;
          case 16: 
            { return retornarSimbolo(OR, "OR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 105: break;
          case 17: 
            { return retornarSimbolo(TO, "TO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 106: break;
          case 18: 
            { return retornarSimbolo(AND, "AND", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 107: break;
          case 19: 
            { return retornarSimbolo(NOT, "NOT", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 108: break;
          case 20: 
            { if(yytext().replaceAll("\"", "").trim().startsWith("|") || yytext().replaceAll("\"", "").trim().endsWith("|") ){
                    return retornarSimbolo(VALOR_PASSWORD, "VALOR_PASSWORD", yytext(), yyline + 1, yycolumn + 1); 
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 109: break;
          case 21: 
            { return retornarSimbolo(DIGITO, "DIGITO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 110: break;
          case 22: 
            { return retornarSimbolo(SQFORM_VALOR_TEXTO, "SQFORM_VALOR_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 111: break;
          case 23: 
            { return retornarSimbolo(VALOR_ID, "VALOR_ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 112: break;
          case 24: 
            { return retornarSimbolo(NO, "NO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 113: break;
          case 25: 
            { return retornarSimbolo(SI, "SI", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 114: break;
          case 26: 
            { return retornarSimbolo(ID, "ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 115: break;
          case 27: 
            { return retornarSimbolo(FORM, "FORM", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 116: break;
          case 28: 
            { if(yytext().replaceAll("\"", "").trim().endsWith("|") || yytext().replaceAll("\"", "").trim().startsWith("|") ){
                    return retornarSimbolo(VALOR_TEXTO_VISIBLE_CON_ESPACIO, "VALOR_TEXTO_VISIBLE_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1); 
               }else if(yytext().trim().contains(" ")){//si tiene espacios
                    return retornarSimbolo(VALOR_ITEMS_CON_ESPACIO, "VALOR_ITEMS_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 117: break;
          case 29: 
            { return retornarSimbolo(URL, "URL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 118: break;
          case 30: 
            { return retornarSimbolo(WHERE, "WHERE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 119: break;
          case 31: 
            { return retornarSimbolo(DARK, "DARK", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 120: break;
          case 32: 
            { return retornarSimbolo(TEMA, "TEMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 121: break;
          case 33: 
            { return retornarSimbolo(BLUE, "BLUE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 122: break;
          case 34: 
            { return retornarSimbolo(SELECT, "SELECT", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 123: break;
          case 35: 
            { return retornarSimbolo(RADIO, "RADIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 124: break;
          case 36: 
            { return retornarSimbolo(COMBO, "COMBO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 125: break;
          case 37: 
            { return retornarSimbolo(CLASE, "CLASE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 126: break;
          case 38: 
            { return retornarSimbolo(FILAS, "FILAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 127: break;
          case 39: 
            { return retornarSimbolo(WHITE, "WHITE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 128: break;
          case 40: 
            { return retornarSimbolo(BOTON, "BOTON", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 129: break;
          case 41: 
            { return retornarSimbolo(NOMBRE, "NOMBRE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 130: break;
          case 42: 
            { return retornarSimbolo(TITULO, "TITULO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 131: break;
          case 43: 
            { return retornarSimbolo(CENTRO, "CENTRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 132: break;
          case 44: 
            { return retornarSimbolo(INDICE, "INDICE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 133: break;
          case 45: 
            { return retornarSimbolo(IMAGEN, "IMAGEN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 134: break;
          case 46: 
            { return retornarSimbolo(DERECHA, "DERECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 135: break;
          case 47: 
            { return retornarSimbolo(USUARIO, "USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 136: break;
          case 48: 
            { return retornarSimbolo(FICHERO, "FICHERO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 137: break;
          case 49: 
            { return retornarSimbolo(OPCIONES, "OPCIONES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 138: break;
          case 50: 
            { return retornarSimbolo(COLUMNAS, "COLUMNAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 139: break;
          case 51: 
            { return retornarSimbolo(CHECKBOX, "CHECKBOX", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 140: break;
          case 52: 
            { return retornarSimbolo(PASSWORD, "PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 141: break;
          case 53: 
            { return retornarSimbolo(REQUERIDO, "REQUERIDO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 142: break;
          case 54: 
            { return retornarSimbolo(IZQUIERDA, "IZQUIERDA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 143: break;
          case 55: 
            { return retornarSimbolo(AREA_TEXTO, "AREA_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 144: break;
          case 56: 
            { return retornarSimbolo(ALINEACION, "ALINEACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 145: break;
          case 57: 
            { return retornarSimbolo(FORMULARIO, "FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 146: break;
          case 58: 
            { return retornarSimbolo(JUSTIFICAR, "JUSTIFICAR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 147: break;
          case 59: 
            { return retornarSimbolo(VALOR_FECHA, "VALOR_FECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 148: break;
          case 60: 
            { return retornarSimbolo(INICIO_SOLICITUD, "INICIO_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 149: break;
          case 61: 
            { return retornarSimbolo(INICIO_RESPUESTA, "INICIO_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 150: break;
          case 62: 
            { return retornarSimbolo(FIN_SOLICITUD, "FIN_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 151: break;
          case 63: 
            { return retornarSimbolo(FIN_RESPUESTA, "FIN_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 152: break;
          case 64: 
            { return retornarSimbolo(CAMPO_TEXTO, "CAMPO_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 153: break;
          case 65: 
            { return retornarSimbolo(INICIO_RESPUESTAS, "INICIO_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 154: break;
          case 66: 
            { return retornarSimbolo(FIN_RESPUESTAS, "FIN_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 155: break;
          case 67: 
            { return retornarSimbolo(NOMBRE_CAMPO, "NOMBRE_CAMPO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 156: break;
          case 68: 
            { return retornarSimbolo(INICIO_SOLICITUDES, "INICIO_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 157: break;
          case 69: 
            { return retornarSimbolo(FIN_SOLICITUDES, "FIN_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 158: break;
          case 70: 
            { return retornarSimbolo(TEXTO_VISIBLE, "TEXTO_VISIBLE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 159: break;
          case 71: 
            { return retornarSimbolo(CREAR_USUARIO, "CREAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 160: break;
          case 72: 
            { return retornarSimbolo(USUARIO_NUEVO, "USUARIO_NUEVO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 161: break;
          case 73: 
            { return retornarSimbolo(LOGIN_USUARIO, "LOGIN_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 162: break;
          case 74: 
            { return retornarSimbolo(NUEVO_PASSWORD, "NUEVO_PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 163: break;
          case 75: 
            { return retornarSimbolo(FECHA_CREACION, "FECHA_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 164: break;
          case 76: 
            { return retornarSimbolo(USUARIO_ANTIGUO, "USUARIO_ANTIGUO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 165: break;
          case 77: 
            { return retornarSimbolo(NUEVO_FORMULARIO, "NUEVO_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 166: break;
          case 78: 
            { return retornarSimbolo(ELIMINAR_USUARIO, "ELIMINAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 167: break;
          case 79: 
            { return retornarSimbolo(USUARIO_CREACION, "USUARIO_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 168: break;
          case 80: 
            { return retornarSimbolo(MODIFICAR_USUARIO, "MODIFICAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 169: break;
          case 81: 
            { return retornarSimbolo(AGREGAR_COMPONENTE, "AGREGAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 170: break;
          case 82: 
            { return retornarSimbolo(FECHA_MODIFICACION, "FECHA_MODIFICACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 171: break;
          case 83: 
            { return retornarSimbolo(ELIMINAR_COMPONENTE, "ELIMINAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 172: break;
          case 84: 
            { return retornarSimbolo(ELIMINAR_FORMULARIO, "ELIMINAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 173: break;
          case 85: 
            { return retornarSimbolo(CREDENCIALES_USUARIO, "CREDENCIALES_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 174: break;
          case 86: 
            { return retornarSimbolo(MODIFICAR_COMPONENTE, "MODIFICAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 175: break;
          case 87: 
            { return retornarSimbolo(MODIFICAR_FORMULARIO, "MODIFICAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 176: break;
          case 88: 
            { return retornarSimbolo(PARAMETROS_COMPONENTE, "PARAMETROS_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 177: break;
          case 89: 
            { return retornarSimbolo(PARAMETROS_FORMULARIO, "PARAMETROS_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerIndigo [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerIndigo scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerIndigo(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}