/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package paquete;
import java_cup.runtime.*;
import static paquete.sym.*;

/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>indigoJflex.jflex</tt>
 */
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\3\1\1\0\2\1\22\0\1\33\1\10\1\32\1\76\1\73"+
    "\7\76\1\12\1\72\2\76\12\75\1\11\1\76\1\6\1\76\1\7"+
    "\2\76\1\37\1\57\1\34\1\45\1\36\1\46\1\51\1\56\1\42"+
    "\1\70\1\60\1\47\1\44\1\50\1\43\1\52\1\66\1\35\1\41"+
    "\1\54\1\40\1\55\1\53\1\65\1\74\1\67\1\4\1\76\1\5"+
    "\1\76\1\15\1\76\1\31\1\62\1\21\1\24\1\25\1\26\1\74"+
    "\1\64\1\13\1\74\1\61\1\20\1\74\1\14\1\17\1\30\1\74"+
    "\1\27\1\16\1\22\1\23\1\74\1\63\3\74\1\2\1\76\1\3"+
    "\1\76\u05e1\0\12\71\206\0\12\71\306\0\12\71\u019c\0\12\71\166\0"+
    "\12\71\166\0\12\71\166\0\12\71\166\0\12\71\166\0\12\71\166\0"+
    "\12\71\166\0\12\71\166\0\12\71\166\0\12\71\140\0\12\71\166\0"+
    "\12\71\106\0\12\71\u0116\0\12\71\106\0\12\71\u0746\0\12\71\46\0"+
    "\12\71\u012c\0\12\71\200\0\12\71\246\0\12\71\6\0\12\71\266\0"+
    "\12\71\126\0\12\71\206\0\12\71\6\0\12\71\u89c6\0\12\71\u02a6\0"+
    "\12\71\46\0\12\71\306\0\12\71\26\0\12\71\126\0\12\71\u0196\0"+
    "\12\71\u5316\0\12\71\u0586\0\12\71\u0bbc\0\12\71\200\0\12\71\74\0"+
    "\12\71\220\0\12\71\u0116\0\12\71\u0156\0\12\71\166\0\12\71\u0176\0"+
    "\12\71\146\0\12\71\146\0\12\71\u01a6\0\12\71\u0366\0\12\71\u4e06\0"+
    "\12\71\346\0\12\71\u6c74\0\62\71\u1150\0\12\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\3\1\36\0\1\14\51\0"+
    "\1\15\7\0\1\16\21\0\1\17\2\0\1\20\15\0"+
    "\1\21\23\0\1\22\17\0\1\23\37\0\1\24\40\0"+
    "\1\25\3\0\1\26\17\0\1\27\2\0\1\30\3\0"+
    "\1\31\16\0\1\32\7\0\1\33\3\0\1\34\12\0"+
    "\1\35\12\0\1\36\1\0\1\37\15\0\1\40\4\0"+
    "\1\41\23\0\1\42\4\0\1\43\3\0\1\44\23\0"+
    "\1\45\1\0\1\46\12\0\1\47\12\0\1\50\14\0"+
    "\1\51\12\0\1\52\30\0\1\53\1\0\1\54\12\0"+
    "\1\55\7\0\1\56\1\0\1\57\1\0\1\60\1\61"+
    "\1\62\1\63\2\0\1\64\25\0\1\65\1\0\1\66"+
    "\21\0\1\67\4\0\1\70\1\71\1\72\10\0\1\73"+
    "\6\0\1\74\5\0\1\75\13\0\1\76\3\0\1\77"+
    "\11\0\1\100\12\0\1\101\3\0\1\102\5\0\1\103"+
    "\10\0\1\104\10\0\1\105\3\0\1\106\4\0\1\107"+
    "\1\0\1\110\5\0\1\111\1\0\1\112\1\0\1\113"+
    "\3\0\1\114\1\0\1\115\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[646];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\176\0\275\0\374\0\u013b"+
    "\0\u017a\0\u01b9\0\u01f8\0\u0237\0\374\0\u0276\0\u02b5\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\77\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\77"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\77"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\77\0\u185d\0\u189c\0\77\0\u18db\0\u191a\0\u1959"+
    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u1b90\0\u1bcf\0\77\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\77\0\u20bb"+
    "\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3"+
    "\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\77\0\u246c"+
    "\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\77\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd"+
    "\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5"+
    "\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\77"+
    "\0\u33ed\0\u342c\0\u346b\0\77\0\u34aa\0\u34e9\0\u3528\0\u3567"+
    "\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f"+
    "\0\u379e\0\u37dd\0\u381c\0\77\0\u385b\0\u389a\0\77\0\u38d9"+
    "\0\u3918\0\u3957\0\77\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92"+
    "\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a"+
    "\0\u3cc9\0\77\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43"+
    "\0\u3e82\0\77\0\u3ec1\0\u3f00\0\u3f3f\0\77\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5"+
    "\0\77\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e"+
    "\0\u43ad\0\u43ec\0\u442b\0\77\0\u446a\0\77\0\u44a9\0\u44e8"+
    "\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0"+
    "\0\u471f\0\u475e\0\u479d\0\77\0\u47dc\0\u481b\0\u485a\0\u4899"+
    "\0\77\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52"+
    "\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a"+
    "\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\77\0\u4d85\0\u4dc4\0\u4e03"+
    "\0\u4e42\0\77\0\u4e81\0\u4ec0\0\u4eff\0\77\0\u4f3e\0\u4f7d"+
    "\0\u4fbc\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175"+
    "\0\u51b4\0\u51f3\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d"+
    "\0\u53ac\0\77\0\u53eb\0\77\0\u542a\0\u5469\0\u54a8\0\u54e7"+
    "\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622\0\u5661\0\77\0\u56a0"+
    "\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898"+
    "\0\u58d7\0\77\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\77\0\u5c0a"+
    "\0\u5c49\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02"+
    "\0\u5e41\0\77\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb"+
    "\0\u5ffa\0\u6039\0\u6078\0\u60b7\0\u60f6\0\u6135\0\u6174\0\u61b3"+
    "\0\u61f2\0\u6231\0\u6270\0\u62af\0\u62ee\0\u632d\0\u636c\0\u63ab"+
    "\0\u63ea\0\u6429\0\77\0\u6468\0\77\0\u64a7\0\u64e6\0\u6525"+
    "\0\u6564\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de\0\77"+
    "\0\u671d\0\u675c\0\u679b\0\u67da\0\u6819\0\u6858\0\u6897\0\77"+
    "\0\u68d6\0\77\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u6a50"+
    "\0\u6a8f\0\77\0\u6ace\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca\0\u6c09"+
    "\0\u6c48\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2\0\u6e01"+
    "\0\u6e40\0\u6e7f\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba\0\77"+
    "\0\u6ff9\0\77\0\u7038\0\u7077\0\u70b6\0\u70f5\0\u7134\0\u7173"+
    "\0\u71b2\0\u71f1\0\u7230\0\u726f\0\u72ae\0\u72ed\0\u732c\0\u736b"+
    "\0\u73aa\0\u73e9\0\u7428\0\77\0\u7467\0\u74a6\0\u74e5\0\u7524"+
    "\0\77\0\77\0\77\0\u7563\0\u75a2\0\u75e1\0\u7620\0\u765f"+
    "\0\u769e\0\u76dd\0\u771c\0\77\0\u775b\0\u779a\0\u77d9\0\u7818"+
    "\0\u7857\0\u7896\0\77\0\u78d5\0\u7914\0\u7953\0\u7992\0\u79d1"+
    "\0\77\0\u7a10\0\u7a4f\0\u7a8e\0\u7acd\0\u7b0c\0\u7b4b\0\u7b8a"+
    "\0\u7bc9\0\u7c08\0\u7c47\0\u7c86\0\77\0\u7cc5\0\u7d04\0\u7d43"+
    "\0\77\0\u7d82\0\u7dc1\0\u7e00\0\u7e3f\0\u7e7e\0\u7ebd\0\u7efc"+
    "\0\u7f3b\0\u7f7a\0\77\0\u7fb9\0\u7ff8\0\u8037\0\u8076\0\u80b5"+
    "\0\u80f4\0\u8133\0\u8172\0\u81b1\0\u81f0\0\77\0\u822f\0\u826e"+
    "\0\u82ad\0\77\0\u82ec\0\u832b\0\u836a\0\u83a9\0\u83e8\0\77"+
    "\0\u8427\0\u8466\0\u84a5\0\u84e4\0\u8523\0\u8562\0\u85a1\0\u85e0"+
    "\0\77\0\u861f\0\u865e\0\u869d\0\u86dc\0\u871b\0\u875a\0\u8799"+
    "\0\u87d8\0\77\0\u8817\0\u8856\0\u8895\0\77\0\u88d4\0\u8913"+
    "\0\u8952\0\u8991\0\77\0\u89d0\0\77\0\u8a0f\0\u8a4e\0\u8a8d"+
    "\0\u8acc\0\u8b0b\0\77\0\u8b4a\0\77\0\u8b89\0\77\0\u8bc8"+
    "\0\u8c07\0\u8c46\0\77\0\u8c85\0\77\0\u8cc4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[646];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\12\2\1\16\3\2\1\17"+
    "\1\3\43\2\113\0\1\20\75\0\1\21\65\0\13\22"+
    "\1\23\6\22\1\24\5\22\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\22\1\43\1\44\1\45\2\22"+
    "\1\46\2\22\1\47\1\50\4\22\1\51\1\52\2\23"+
    "\1\22\1\53\1\22\13\0\1\54\77\0\1\55\64\0"+
    "\30\22\1\56\1\57\35\22\1\0\5\22\2\0\11\22"+
    "\17\60\1\56\1\57\35\60\1\0\4\60\1\22\2\0"+
    "\27\22\1\61\1\56\1\57\35\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\22\1\62\1\63\1\64\3\22"+
    "\1\65\3\22\1\66\6\22\1\67\12\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\2\22\1\70\1\71\31\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\13\22\1\72"+
    "\21\22\1\0\5\22\2\0\30\22\1\56\1\57\1\22"+
    "\1\73\11\22\1\74\1\22\1\75\17\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\1\22\1\76\3\22\1\77"+
    "\27\22\1\0\5\22\2\0\30\22\1\56\1\57\6\22"+
    "\1\100\26\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\10\22\1\101\1\102\2\22\1\103\16\22\1\104\1\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\16\22\1\105"+
    "\16\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\106\25\22\1\0\5\22\2\0\27\22\1\61\1\56"+
    "\1\57\2\22\1\107\1\110\31\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\2\22\1\111\3\22\1\112\1\113"+
    "\25\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\114\25\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\4\22\1\115\2\22\1\116\25\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\3\22\1\117\31\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\22\22\1\120\5\22\1\121"+
    "\4\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\122\3\22\1\123\26\22\1\0\5\22\2\0\16\22"+
    "\1\124\11\22\1\56\1\57\7\22\1\125\3\22\1\126"+
    "\21\22\1\0\5\22\2\0\16\22\1\124\11\22\1\56"+
    "\1\57\35\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\30\22\1\121\4\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\4\22\1\127\30\22\1\0\5\22\32\0\1\130"+
    "\1\131\35\0\1\132\3\0\1\132\3\0\30\22\1\130"+
    "\1\133\35\22\1\132\3\22\1\134\1\22\15\0\1\135"+
    "\76\0\1\136\63\0\30\137\1\56\1\57\35\137\1\0"+
    "\5\137\2\0\11\22\17\60\1\140\1\141\35\60\1\0"+
    "\4\60\1\22\2\0\25\22\1\142\2\22\1\56\1\57"+
    "\35\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\143\32\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\14\22\1\144\20\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\10\22\1\145\24\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\10\22\1\146\2\22\1\147\21\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\3\22\1\150\31\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\2\22\1\151"+
    "\32\22\1\0\5\22\2\0\30\22\1\56\1\57\32\22"+
    "\1\152\2\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\11\22\1\153\23\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\6\22\1\154\26\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\2\22\1\155\32\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\6\22\1\156\26\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\1\22\1\157\33\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\13\22\1\160\21\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\4\22\1\161"+
    "\30\22\1\0\5\22\2\0\30\22\1\162\1\163\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\3\22\1\164"+
    "\31\22\1\0\5\22\2\0\30\22\1\165\1\166\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\11\22\1\167"+
    "\23\22\1\0\5\22\2\0\30\22\1\56\1\57\32\22"+
    "\1\170\2\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\1\171\34\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\11\22\1\172\23\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\173\33\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\22\1\174\33\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\175\34\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\176\12\22\1\177\21\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\1\22\1\200\33\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\15\22\1\201"+
    "\17\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\202\32\22\1\0\5\22\2\0\30\22\1\203\1\204"+
    "\10\22\1\205\24\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\206\3\22\1\207\27\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\6\22\1\210\26\22\1\0"+
    "\5\22\2\0\11\22\1\211\16\22\1\56\1\57\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\10\22\1\212"+
    "\20\22\1\213\3\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\20\22\1\214\14\22\1\0\5\22\2\0\21\22"+
    "\1\215\6\22\1\56\1\57\35\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\20\22\1\216\14\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\4\22\1\217\30\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\5\22\1\220\27\22"+
    "\1\0\5\22\32\0\1\130\1\131\75\0\1\130\1\131"+
    "\35\0\1\221\3\0\1\221\3\0\30\137\1\130\1\133"+
    "\35\137\1\0\5\137\2\0\30\22\1\130\1\133\35\22"+
    "\1\221\3\22\1\222\1\22\16\0\1\223\10\0\1\224"+
    "\65\0\1\225\10\0\1\226\51\0\30\137\1\227\36\137"+
    "\1\0\5\137\2\0\30\137\1\140\1\141\35\137\1\0"+
    "\5\137\2\0\30\22\1\56\1\57\25\22\1\230\7\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\3\22\1\231"+
    "\5\22\1\232\23\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\20\22\1\233\14\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\16\22\1\234\16\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\23\22\1\235\11\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\4\22\1\236\30\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\5\22\1\237\27\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\240\34\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\4\22\1\241"+
    "\30\22\1\0\5\22\2\0\30\22\1\56\1\57\6\22"+
    "\1\242\26\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\10\22\1\243\24\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\3\22\1\244\31\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\14\22\1\245\20\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\2\22\1\246\32\22\1\0\5\22"+
    "\2\0\30\22\1\247\1\250\35\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\3\22\1\251\31\22\1\0\5\22"+
    "\2\0\30\137\1\162\1\163\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\15\22\1\252\17\22\1\0\5\22"+
    "\2\0\30\137\1\165\1\166\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\6\22\1\253\26\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\4\22\1\254\30\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\6\22\1\255\26\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\6\22\1\256"+
    "\26\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\257\32\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\24\22\1\230\10\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\22\22\1\260\12\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\22\22\1\261\12\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\3\22\1\262\31\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\10\22\1\263\24\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\6\22\1\264\26\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\21\22\1\265"+
    "\13\22\1\0\5\22\2\0\30\137\1\203\1\204\35\137"+
    "\1\0\5\137\2\0\30\22\1\56\1\57\23\22\1\266"+
    "\11\22\1\0\5\22\2\0\30\22\1\56\1\57\3\22"+
    "\1\267\31\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\5\22\1\270\27\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\20\22\1\271\14\22\1\0\5\22\2\0\20\22"+
    "\1\272\7\22\1\56\1\57\35\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\3\22\1\273\31\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\20\22\1\274\14\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\4\22\1\275\30\22"+
    "\1\0\5\22\2\0\23\22\1\276\4\22\1\56\1\57"+
    "\35\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\277\25\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\2\22\1\276\32\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\20\22\1\300\14\22\1\0\5\22\32\0\1\130"+
    "\1\131\35\0\1\301\3\0\1\301\3\0\30\22\1\130"+
    "\1\133\35\22\1\301\3\22\1\302\1\22\17\0\1\303"+
    "\104\0\1\304\70\0\1\305\104\0\1\306\53\0\30\22"+
    "\1\307\1\310\35\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\311\33\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\2\22\1\312\32\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\22\1\313\33\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\7\22\1\314\25\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\7\22\1\315\25\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\10\22\1\316"+
    "\24\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\317\32\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\24\22\1\320\10\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\2\22\1\321\32\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\7\22\1\322\25\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\6\22\1\323\26\22\1\0\5\22"+
    "\2\0\13\22\1\324\14\22\1\56\1\57\35\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\2\22\1\325\32\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\15\22\1\326"+
    "\17\22\1\0\5\22\2\0\30\137\1\247\1\250\35\137"+
    "\1\0\5\137\2\0\30\22\1\56\1\57\1\22\1\327"+
    "\33\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\330\32\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\1\331\34\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\6\22\1\332\26\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\333\25\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\12\22\1\334\22\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\335\34\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\3\22\1\336\31\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\2\22\1\337\32\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\5\22\1\340\27\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\4\22\1\341"+
    "\30\22\1\0\5\22\2\0\30\22\1\56\1\57\14\22"+
    "\1\342\20\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\7\22\1\343\25\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\344\33\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\10\22\1\345\24\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\17\22\1\346\15\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\2\22\1\347\32\22\1\0"+
    "\5\22\2\0\23\22\1\347\4\22\1\56\1\57\35\22"+
    "\1\0\5\22\2\0\30\22\1\350\1\351\35\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\7\22\1\352\25\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\13\22\1\353"+
    "\21\22\1\0\5\22\2\0\30\22\1\354\1\355\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\14\22\1\356"+
    "\20\22\1\0\5\22\2\0\30\22\1\56\1\57\6\22"+
    "\1\357\26\22\1\0\5\22\32\0\1\130\1\131\35\0"+
    "\1\360\1\361\2\0\1\360\3\0\30\22\1\130\1\133"+
    "\35\22\1\360\1\362\2\22\1\363\1\22\20\0\1\364"+
    "\74\0\1\365\100\0\1\366\74\0\1\367\62\0\30\137"+
    "\1\307\1\310\35\137\1\0\5\137\2\0\13\22\1\370"+
    "\14\22\1\56\1\57\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\14\22\1\371\20\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\7\22\1\372\25\22\1\0\5\22"+
    "\2\0\13\22\1\373\14\22\1\56\1\57\35\22\1\0"+
    "\5\22\2\0\30\22\1\374\1\375\35\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\14\22\1\376\20\22\1\0"+
    "\5\22\2\0\30\22\1\377\1\u0100\35\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\23\22\1\u0101\11\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\1\22\1\u0102\33\22"+
    "\1\0\5\22\2\0\30\22\1\u0103\1\u0104\35\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\14\22\1\u0105\20\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\20\22\1\u0106"+
    "\14\22\1\0\5\22\2\0\30\22\1\56\1\57\3\22"+
    "\1\u0107\31\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\3\22\1\u0108\31\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\6\22\1\u0109\26\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\14\22\1\u010a\20\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\2\22\1\u010b\32\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\2\22\1\u010c\32\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\14\22\1\u010d\20\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\6\22\1\u010e"+
    "\26\22\1\0\5\22\2\0\30\22\1\56\1\57\22\22"+
    "\1\u010f\12\22\1\0\5\22\2\0\13\22\1\u0110\14\22"+
    "\1\56\1\57\35\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\u0111\33\22\1\0\5\22\2\0\30\22"+
    "\1\u0112\1\u0113\35\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\13\22\1\u0114\21\22\1\0\5\22\2\0\13\22"+
    "\1\u0115\14\22\1\56\1\57\35\22\1\0\5\22\2\0"+
    "\13\22\1\u0116\14\22\1\56\1\57\35\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\2\22\1\u0117\32\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\2\22\1\u0118\32\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\7\22\1\u0119"+
    "\25\22\1\0\5\22\2\0\30\22\1\u011a\1\u011b\35\22"+
    "\1\0\5\22\2\0\30\137\1\350\1\351\35\137\1\0"+
    "\5\137\2\0\13\22\1\u011c\14\22\1\56\1\57\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\7\22\1\u011d"+
    "\25\22\1\0\5\22\2\0\30\137\1\354\1\355\35\137"+
    "\1\0\5\137\2\0\30\22\1\u011e\1\u011f\35\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\12\22\1\u0120\22\22"+
    "\1\0\5\22\32\0\1\130\1\131\35\0\1\360\3\0"+
    "\1\360\72\0\1\u0121\3\0\1\u0121\3\0\30\22\1\56"+
    "\1\57\35\22\1\u0121\3\22\1\u0122\1\22\2\0\30\22"+
    "\1\130\1\133\35\22\1\360\3\22\1\363\1\22\13\0"+
    "\1\u0123\113\0\1\u0124\61\0\1\u0125\113\0\1\u0126\50\0"+
    "\30\22\1\56\1\57\4\22\1\u0127\30\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\1\u0128\34\22\1\0\5\22"+
    "\2\0\30\22\1\u0129\1\u012a\35\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\20\22\1\u012b\14\22\1\0\5\22"+
    "\2\0\30\137\1\374\1\375\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\3\22\1\u012c\31\22\1\0\5\22"+
    "\2\0\30\137\1\377\1\u0100\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\7\22\1\u012d\25\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\6\22\1\u012e\26\22\1\0"+
    "\5\22\2\0\30\137\1\u0103\1\u0104\35\137\1\0\5\137"+
    "\2\0\30\22\1\56\1\57\3\22\1\u012f\31\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\2\22\1\u0130\32\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\u0131\34\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\22\1\u0132"+
    "\33\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\u0133\25\22\1\0\5\22\2\0\30\22\1\u0134\1\u0135"+
    "\35\22\1\0\5\22\2\0\30\22\1\u0136\1\u0137\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\22\1\u0138"+
    "\33\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\u0139\32\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\1\u013a\34\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\3\22\1\u013b\31\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\u013c\7\22\1\u013d\24\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\7\22\1\u013e\25\22\1\0\5\22"+
    "\2\0\30\137\1\u0112\1\u0113\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\3\22\1\u013f\31\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\4\22\1\u0140\30\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\12\22\1\u0141\3\22"+
    "\1\u0142\16\22\1\0\5\22\2\0\13\22\1\u0143\14\22"+
    "\1\u0144\1\u0145\35\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\20\22\1\u0146\14\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\22\1\u0147\33\22\1\0\5\22\2\0"+
    "\30\137\1\u011a\1\u011b\35\137\1\0\5\137\2\0\30\22"+
    "\1\56\1\57\21\22\1\u0148\13\22\1\0\5\22\2\0"+
    "\30\22\1\u0149\1\u014a\35\22\1\0\5\22\2\0\30\137"+
    "\1\u011e\1\u011f\35\137\1\0\5\137\2\0\30\22\1\56"+
    "\1\57\6\22\1\u014b\26\22\1\0\5\22\71\0\1\u014c"+
    "\3\0\1\u014c\3\0\30\22\1\56\1\57\35\22\1\u014c"+
    "\3\22\1\u014d\1\22\21\0\1\u014e\100\0\1\u014f\74\0"+
    "\1\u0150\100\0\1\u0151\55\0\30\22\1\56\1\57\5\22"+
    "\1\u0152\27\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\6\22\1\u0153\26\22\1\0\5\22\2\0\30\137\1\u0129"+
    "\1\u012a\35\137\1\0\5\137\2\0\30\22\1\56\1\57"+
    "\2\22\1\u0154\32\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\5\22\1\u0155\27\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\31\22\1\u0156\3\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\11\22\1\u0157\23\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\1\22\1\u0158\33\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\31\22\1\u0159\3\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\6\22\1\u015a"+
    "\26\22\1\0\5\22\2\0\13\22\1\u015b\14\22\1\56"+
    "\1\57\35\22\1\0\5\22\2\0\13\22\1\u015c\14\22"+
    "\1\u015d\1\u015e\35\22\1\0\5\22\2\0\30\137\1\u0134"+
    "\1\u0135\35\137\1\0\5\137\2\0\30\137\1\u0136\1\u0137"+
    "\35\137\1\0\5\137\2\0\30\22\1\56\1\57\11\22"+
    "\1\u015f\23\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\5\22\1\u0160\27\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\3\22\1\u0161\31\22\1\0\5\22\2\0\30\22"+
    "\1\u0162\1\u0163\35\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\u0164\33\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\7\22\1\u0165\25\22\1\0\5\22\2\0"+
    "\30\22\1\u0166\1\u0167\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\22\1\u0168\33\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\5\22\1\u0169\27\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\7\22\1\u016a\25\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\3\22\1\u016b\31\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\u016c\34\22"+
    "\1\0\5\22\2\0\30\137\1\u0144\1\u0145\35\137\1\0"+
    "\5\137\2\0\30\22\1\56\1\57\1\22\1\u016d\33\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\11\22\1\u016e"+
    "\23\22\1\0\5\22\2\0\30\22\1\56\1\57\6\22"+
    "\1\u016f\26\22\1\0\5\22\2\0\30\137\1\u0149\1\u014a"+
    "\35\137\1\0\5\137\2\0\30\22\1\56\1\57\1\u0170"+
    "\34\22\1\0\5\22\72\0\1\u0171\6\0\30\22\1\56"+
    "\1\57\35\22\1\0\1\u0172\4\22\13\0\1\u0173\110\0"+
    "\1\u0174\64\0\1\u0175\110\0\1\u0176\53\0\30\22\1\56"+
    "\1\57\4\22\1\u0177\30\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\3\22\1\u0178\31\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\31\22\1\u0179\3\22\1\0\5\22"+
    "\2\0\30\22\1\u017a\1\u017b\35\22\1\0\5\22\2\0"+
    "\30\22\1\u017c\1\u017d\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\7\22\1\u017e\25\22\1\0\5\22\2\0"+
    "\13\22\1\u017f\14\22\1\56\1\57\35\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\20\22\1\u0180\14\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\7\22\1\u0181\25\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\u0182\34\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\u0183\2\22"+
    "\1\u0184\10\22\1\u0185\20\22\1\0\5\22\2\0\30\137"+
    "\1\u015d\1\u015e\35\137\1\0\5\137\2\0\30\22\1\56"+
    "\1\57\3\22\1\u0186\31\22\1\0\5\22\2\0\30\22"+
    "\1\u0187\1\u0188\35\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\u0189\33\22\1\0\5\22\2\0\30\137"+
    "\1\u0162\1\u0163\35\137\1\0\5\137\2\0\30\22\1\56"+
    "\1\57\2\22\1\u018a\32\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\11\22\1\u018b\23\22\1\0\5\22\2\0"+
    "\30\137\1\u0166\1\u0167\35\137\1\0\5\137\2\0\30\22"+
    "\1\56\1\57\6\22\1\u018c\26\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\4\22\1\u018d\30\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\1\22\1\u018e\33\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\5\22\1\u018f\27\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\3\22\1\u0190"+
    "\31\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\u0191\25\22\1\0\5\22\2\0\30\22\1\u0192\1\u0193"+
    "\35\22\1\0\5\22\2\0\30\22\1\56\1\57\5\22"+
    "\1\u0194\27\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\3\22\1\u0195\31\22\1\0\5\22\71\0\1\u0196\3\0"+
    "\1\u0196\3\0\30\22\1\56\1\57\35\22\1\u0196\3\22"+
    "\1\u0197\1\22\22\0\1\u0198\72\0\1\u0199\102\0\1\u019a"+
    "\72\0\1\u019b\62\0\30\22\1\56\1\57\3\22\1\u019c"+
    "\31\22\1\0\5\22\2\0\30\22\1\56\1\57\13\22"+
    "\1\u019d\21\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\20\22\1\u019e\14\22\1\0\5\22\2\0\30\137\1\u017a"+
    "\1\u017b\35\137\1\0\5\137\2\0\30\137\1\u017c\1\u017d"+
    "\35\137\1\0\5\137\2\0\30\22\1\u019f\1\u01a0\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\u01a1\3\22"+
    "\1\u01a2\5\22\1\u01a3\22\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\7\22\1\u01a4\25\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\14\22\1\u01a5\20\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\7\22\1\u01a6\25\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\1\22\1\u01a7\33\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\14\22\1\u01a8"+
    "\20\22\1\0\5\22\2\0\30\22\1\56\1\57\4\22"+
    "\1\u01a9\30\22\1\0\5\22\2\0\30\22\1\u01aa\1\u01ab"+
    "\35\22\1\0\5\22\2\0\30\137\1\u0187\1\u0188\35\137"+
    "\1\0\5\137\2\0\13\22\1\u01ac\14\22\1\56\1\57"+
    "\35\22\1\0\5\22\2\0\30\22\1\56\1\57\3\22"+
    "\1\u01ad\31\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\6\22\1\u01ae\26\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\u01af\25\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\3\22\1\u01b0\31\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\10\22\1\u01b1\24\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\5\22\1\u01b2\27\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\10\22\1\u01b3\24\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\5\22\1\u01b4"+
    "\27\22\1\0\5\22\2\0\30\137\1\u0192\1\u0193\35\137"+
    "\1\0\5\137\2\0\30\22\1\56\1\57\6\22\1\u01b5"+
    "\26\22\1\0\5\22\2\0\30\22\1\56\1\57\1\22"+
    "\1\u01b6\33\22\1\0\5\22\71\0\1\u01b7\3\0\1\u01b7"+
    "\3\0\30\22\1\56\1\57\35\22\1\u01b7\3\22\1\u01b8"+
    "\1\22\23\0\1\u01b9\75\0\1\u01ba\77\0\1\u01bb\75\0"+
    "\1\u01bc\56\0\30\22\1\56\1\57\1\22\1\u01bd\33\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\2\22\1\u01be"+
    "\32\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\u01bf\25\22\1\0\5\22\2\0\30\137\1\u019f\1\u01a0"+
    "\35\137\1\0\5\137\2\0\30\22\1\56\1\57\7\22"+
    "\1\u01c0\25\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\5\22\1\u01c1\27\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\u01c2\25\22\1\0\5\22\2\0\30\22"+
    "\1\u01c3\1\u01c4\35\22\1\0\5\22\2\0\30\22\1\u01c5"+
    "\1\u01c6\35\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\10\22\1\u01c7\24\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\2\22\1\u01c8\32\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\20\22\1\u01c9\14\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\2\22\1\u01ca\32\22\1\0\5\22"+
    "\2\0\30\137\1\u01aa\1\u01ab\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\1\u01cb\3\22\1\u01cc\5\22\1\u01cd"+
    "\22\22\1\0\5\22\2\0\30\22\1\56\1\57\1\u01ce"+
    "\34\22\1\0\5\22\2\0\30\22\1\56\1\57\12\22"+
    "\1\u01cf\22\22\1\0\5\22\2\0\30\22\1\u01d0\1\u01d1"+
    "\35\22\1\0\5\22\2\0\30\22\1\56\1\57\1\22"+
    "\1\u01d2\33\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\4\22\1\u01d3\30\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\17\22\1\u01d4\15\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\16\22\1\u01d5\16\22\1\0\5\22\2\0"+
    "\13\22\1\u01d6\14\22\1\56\1\57\35\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\23\22\1\u01d7\11\22\1\0"+
    "\5\22\2\0\30\22\1\u01d8\1\u01d9\35\22\1\0\5\22"+
    "\32\0\1\u01da\1\u01b7\45\0\30\22\1\u01da\1\u01db\35\22"+
    "\1\0\5\22\24\0\1\u01dc\103\0\1\u01dd\71\0\1\u01de"+
    "\103\0\1\u01df\47\0\30\22\1\56\1\57\6\22\1\u01e0"+
    "\26\22\1\0\5\22\2\0\30\22\1\56\1\57\5\22"+
    "\1\u01e1\27\22\1\0\5\22\2\0\30\22\1\u01e2\1\u01e3"+
    "\35\22\1\0\5\22\2\0\30\22\1\56\1\57\10\22"+
    "\1\u01e4\24\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\4\22\1\u01e5\30\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\1\22\1\u01e6\33\22\1\0\5\22\2\0\30\137"+
    "\1\u01c3\1\u01c4\35\137\1\0\5\137\2\0\30\137\1\u01c5"+
    "\1\u01c6\35\137\1\0\5\137\2\0\30\22\1\56\1\57"+
    "\16\22\1\u01e7\16\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\3\22\1\u01e8\31\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\6\22\1\u01e9\26\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\21\22\1\u01ea\13\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\7\22\1\u01eb\25\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\5\22\1\u01ec\27\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\7\22\1\u01ed"+
    "\25\22\1\0\5\22\2\0\30\22\1\56\1\57\6\22"+
    "\1\u01ee\26\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\6\22\1\u01ef\26\22\1\0\5\22\2\0\30\137\1\u01d0"+
    "\1\u01d1\35\137\1\0\5\137\2\0\30\22\1\56\1\57"+
    "\6\22\1\u01f0\26\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\13\22\1\u01f1\21\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\7\22\1\u01f2\25\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\7\22\1\u01f3\25\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\1\u01f4\11\22\1\u01f5\22\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\13\22\1\u01f6"+
    "\21\22\1\0\5\22\2\0\30\137\1\u01d8\1\u01d9\35\137"+
    "\1\0\5\137\2\0\30\137\1\u01da\1\u01db\35\137\1\0"+
    "\5\137\25\0\1\u01f7\67\0\1\u01f8\105\0\1\u01f9\67\0"+
    "\1\u01fa\62\0\30\22\1\56\1\57\7\22\1\u01fb\25\22"+
    "\1\0\5\22\2\0\13\22\1\u01fc\14\22\1\56\1\57"+
    "\35\22\1\0\5\22\2\0\30\137\1\u01e2\1\u01e3\35\137"+
    "\1\0\5\137\2\0\30\22\1\56\1\57\16\22\1\u01fd"+
    "\16\22\1\0\5\22\2\0\30\22\1\56\1\57\3\22"+
    "\1\u01fe\31\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\10\22\1\u01ff\24\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\u0200\25\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\u0201\34\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\15\22\1\u0202\17\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\7\22\1\u0203\25\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\10\22\1\u0204\24\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\4\22\1\u0205\30\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\22\1\u0206"+
    "\33\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\u0207\25\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\1\u0208\34\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\7\22\1\u0209\25\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\3\22\1\u020a\31\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\22\1\u020b\33\22\1\0\5\22\2\0"+
    "\30\22\1\u020c\1\u020d\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\7\22\1\u020e\25\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\7\22\1\u020f\25\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\2\22\1\u0210\32\22\1\0"+
    "\5\22\16\0\1\u0211\76\0\1\u0212\62\0\30\22\1\u0213"+
    "\1\u0214\35\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\4\22\1\u0215\30\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\u0216\25\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\22\1\u0217\33\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\4\22\1\u0218\30\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\14\22\1\u0219\20\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\6\22\1\u021a\26\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\4\22\1\u021b"+
    "\30\22\1\0\5\22\2\0\30\22\1\u021c\1\u021d\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\16\22\1\u021e"+
    "\16\22\1\0\5\22\2\0\30\22\1\56\1\57\3\22"+
    "\1\u021f\31\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\10\22\1\u0220\24\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\14\22\1\u0221\20\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\3\22\1\u0222\31\22\1\0\5\22\2\0"+
    "\30\22\1\u0223\1\u0224\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\22\1\u0225\33\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\11\22\1\u0226\23\22\1\0\5\22"+
    "\2\0\30\137\1\u020c\1\u020d\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\10\22\1\u0227\24\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\1\22\1\u0228\33\22\1\0"+
    "\5\22\2\0\30\22\1\u0229\1\u022a\35\22\1\0\5\22"+
    "\2\0\30\137\1\u0213\1\u0214\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\5\22\1\u022b\27\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\14\22\1\u022c\20\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\6\22\1\u022d\26\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\13\22\1\u022e"+
    "\21\22\1\0\5\22\2\0\30\22\1\56\1\57\2\22"+
    "\1\u022f\32\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\7\22\1\u0230\25\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\u0231\25\22\1\0\5\22\2\0\30\137"+
    "\1\u021c\1\u021d\35\137\1\0\5\137\2\0\30\22\1\56"+
    "\1\57\7\22\1\u0232\25\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\1\22\1\u0233\33\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\4\22\1\u0234\30\22\1\0\5\22"+
    "\2\0\30\22\1\u0235\1\u0236\35\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\u0237\34\22\1\0\5\22\2\0"+
    "\30\137\1\u0223\1\u0224\35\137\1\0\5\137\2\0\30\22"+
    "\1\56\1\57\6\22\1\u0238\26\22\1\0\5\22\2\0"+
    "\30\22\1\u0239\1\u023a\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\16\22\1\u023b\16\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\10\22\1\u023c\24\22\1\0\5\22"+
    "\2\0\30\137\1\u0229\1\u022a\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\4\22\1\u023d\30\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\2\22\1\u023e\32\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\7\22\1\u023f\25\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\3\22\1\u0240"+
    "\31\22\1\0\5\22\2\0\30\22\1\56\1\57\14\22"+
    "\1\u0241\20\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\14\22\1\u0242\20\22\1\0\5\22\2\0\30\22\1\u0243"+
    "\1\u0244\35\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\14\22\1\u0245\20\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\6\22\1\u0246\26\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\13\22\1\u0247\21\22\1\0\5\22\2\0"+
    "\30\137\1\u0235\1\u0236\35\137\1\0\5\137\2\0\30\22"+
    "\1\56\1\57\6\22\1\u0248\26\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\7\22\1\u0249\25\22\1\0\5\22"+
    "\2\0\30\137\1\u0239\1\u023a\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\7\22\1\u024a\25\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\4\22\1\u024b\30\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\3\22\1\u024c\31\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\14\22\1\u024d"+
    "\20\22\1\0\5\22\2\0\30\22\1\u024e\1\u024f\35\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\1\22\1\u0250"+
    "\33\22\1\0\5\22\2\0\30\22\1\56\1\57\20\22"+
    "\1\u0251\14\22\1\0\5\22\2\0\30\22\1\u0252\1\u0253"+
    "\35\22\1\0\5\22\2\0\30\137\1\u0243\1\u0244\35\137"+
    "\1\0\5\137\2\0\30\22\1\56\1\57\2\22\1\u0254"+
    "\32\22\1\0\5\22\2\0\30\22\1\56\1\57\7\22"+
    "\1\u0255\25\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\3\22\1\u0256\31\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\u0257\25\22\1\0\5\22\2\0\30\22"+
    "\1\u0258\1\u0259\35\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\14\22\1\u025a\20\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\13\22\1\u025b\21\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\22\1\u025c\33\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\20\22\1\u025d\14\22\1\0"+
    "\5\22\2\0\30\137\1\u024e\1\u024f\35\137\1\0\5\137"+
    "\2\0\30\22\1\56\1\57\6\22\1\u025e\26\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\2\22\1\u025f\32\22"+
    "\1\0\5\22\2\0\30\137\1\u0252\1\u0253\35\137\1\0"+
    "\5\137\2\0\30\22\1\56\1\57\14\22\1\u0260\20\22"+
    "\1\0\5\22\2\0\30\22\1\u0261\1\u0262\35\22\1\0"+
    "\5\22\2\0\30\22\1\56\1\57\1\22\1\u0263\33\22"+
    "\1\0\5\22\2\0\30\22\1\56\1\57\14\22\1\u0264"+
    "\20\22\1\0\5\22\2\0\30\137\1\u0258\1\u0259\35\137"+
    "\1\0\5\137\2\0\30\22\1\56\1\57\2\22\1\u0265"+
    "\32\22\1\0\5\22\2\0\30\22\1\56\1\57\3\22"+
    "\1\u0266\31\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\6\22\1\u0267\26\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\2\22\1\u0268\32\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\7\22\1\u0269\25\22\1\0\5\22\2\0"+
    "\30\22\1\u026a\1\u026b\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\20\22\1\u026c\14\22\1\0\5\22\2\0"+
    "\30\137\1\u0261\1\u0262\35\137\1\0\5\137\2\0\30\22"+
    "\1\56\1\57\6\22\1\u026d\26\22\1\0\5\22\2\0"+
    "\30\22\1\u026e\1\u026f\35\22\1\0\5\22\2\0\30\22"+
    "\1\56\1\57\14\22\1\u0270\20\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\1\22\1\u0271\33\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\7\22\1\u0272\25\22\1\0"+
    "\5\22\2\0\30\22\1\u0273\1\u0274\35\22\1\0\5\22"+
    "\2\0\30\22\1\u0275\1\u0276\35\22\1\0\5\22\2\0"+
    "\30\137\1\u026a\1\u026b\35\137\1\0\5\137\2\0\30\22"+
    "\1\56\1\57\2\22\1\u0277\32\22\1\0\5\22\2\0"+
    "\30\22\1\56\1\57\7\22\1\u0278\25\22\1\0\5\22"+
    "\2\0\30\137\1\u026e\1\u026f\35\137\1\0\5\137\2\0"+
    "\30\22\1\56\1\57\20\22\1\u0279\14\22\1\0\5\22"+
    "\2\0\30\22\1\56\1\57\6\22\1\u027a\26\22\1\0"+
    "\5\22\2\0\30\22\1\u027b\1\u027c\35\22\1\0\5\22"+
    "\2\0\30\137\1\u0273\1\u0274\35\137\1\0\5\137\2\0"+
    "\30\137\1\u0275\1\u0276\35\137\1\0\5\137\2\0\30\22"+
    "\1\u027d\1\u027e\35\22\1\0\5\22\2\0\30\22\1\u027f"+
    "\1\u0280\35\22\1\0\5\22\2\0\30\22\1\56\1\57"+
    "\2\22\1\u0281\32\22\1\0\5\22\2\0\30\22\1\56"+
    "\1\57\7\22\1\u0282\25\22\1\0\5\22\2\0\30\137"+
    "\1\u027b\1\u027c\35\137\1\0\5\137\2\0\30\137\1\u027d"+
    "\1\u027e\35\137\1\0\5\137\2\0\30\137\1\u027f\1\u0280"+
    "\35\137\1\0\5\137\2\0\30\22\1\u0283\1\u0284\35\22"+
    "\1\0\5\22\2\0\30\22\1\u0285\1\u0286\35\22\1\0"+
    "\5\22\2\0\30\137\1\u0283\1\u0284\35\137\1\0\5\137"+
    "\2\0\30\137\1\u0285\1\u0286\35\137\1\0\5\137";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36099];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\13\11\3\1\36\0\1\11\51\0\1\11\7\0"+
    "\1\11\21\0\1\11\2\0\1\11\15\0\1\11\23\0"+
    "\1\11\17\0\1\11\37\0\1\11\40\0\1\11\3\0"+
    "\1\11\17\0\1\11\2\0\1\11\3\0\1\11\16\0"+
    "\1\11\7\0\1\11\3\0\1\11\12\0\1\11\12\0"+
    "\1\11\1\0\1\11\15\0\1\11\4\0\1\11\23\0"+
    "\1\11\4\0\1\11\3\0\1\11\23\0\1\11\1\0"+
    "\1\11\12\0\1\11\12\0\1\11\14\0\1\11\12\0"+
    "\1\11\30\0\1\11\1\0\1\11\12\0\1\11\7\0"+
    "\1\11\1\0\1\11\1\0\4\1\2\0\1\11\25\0"+
    "\1\11\1\0\1\11\21\0\1\11\4\0\3\11\10\0"+
    "\1\11\6\0\1\11\5\0\1\11\13\0\1\11\3\0"+
    "\1\11\11\0\1\11\12\0\1\11\3\0\1\11\5\0"+
    "\1\11\10\0\1\11\10\0\1\11\3\0\1\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\3\0\1\11\1\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[646];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de los operadores invocados
    //ArrayList<Token> listadoOperadoresInvocados = new ArrayList();
    //ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

     //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
     private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
          //creamos un  token auxiliar
          Token tokenAux = new Token(tipoToken, lexema, fila, columna);
          System.out.println("\nFila : "+fila+" Columna: "+columna+" Token de tipo: "+tipoToken+" Lexema: "+lexema);
          //Agregamos al listado
          //listadoOperadoresInvocados.add(tokenAux);
          //retornamos el token aux como simbolo
          return new Symbol(tipo, tokenAux);
     }

     //Agregamos un token al array list de errores lexicos
     /*
     private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
          //creamos un  token auxiliar
          TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
          //Agregamos al listado
          listadoErroresLexicos.add(tokenErrorAux);
     }

     //Obtenemos el arrLust de los errores lexicos
     public ArrayList<TokenError> obtenerListadoErroresLexicos(){
          return listadoErroresLexicos;
     }

     //Obtenemos el lstado de los tokens
     public ArrayList<Token> obtenerListadoTokens(){
          return listadoOperadoresInvocados;
     }*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 406) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext());
            } 
            // fall through
          case 78: break;
          case 2: 
            { 
            } 
            // fall through
          case 79: break;
          case 3: 
            { return retornarSimbolo(LLAVES_INICIO, "LLAVES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 80: break;
          case 4: 
            { return retornarSimbolo(LLAVES_FIN, "LLAVES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 81: break;
          case 5: 
            { return retornarSimbolo(CORCHETES_INICIO, "CORCHETES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 82: break;
          case 6: 
            { return retornarSimbolo(CORCHETES_FIN, "CORCHETES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 83: break;
          case 7: 
            { return retornarSimbolo(MENOR, "MENOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 84: break;
          case 8: 
            { return retornarSimbolo(MAYOR, "MAYOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 85: break;
          case 9: 
            { return retornarSimbolo(EXCLAMACION, "EXCLAMACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 86: break;
          case 10: 
            { return retornarSimbolo(DOS_PUNTOS, "DOS_PUNTOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 87: break;
          case 11: 
            { return retornarSimbolo(COMA, "COMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 88: break;
          case 12: 
            { if(yytext().replaceAll("\"", "").trim().startsWith("|") || yytext().replaceAll("\"", "").trim().endsWith("|") ){
                    return retornarSimbolo(VALOR_PASSWORD, "VALOR_PASSWORD", yytext(), yyline + 1, yycolumn + 1); 
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 89: break;
          case 13: 
            { return retornarSimbolo(DIGITO, "DIGITO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 90: break;
          case 14: 
            { return retornarSimbolo(VALOR_ID, "VALOR_ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 91: break;
          case 15: 
            { return retornarSimbolo(SI, "SI", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 92: break;
          case 16: 
            { return retornarSimbolo(ID, "ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 93: break;
          case 17: 
            { return retornarSimbolo(NO, "NO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 94: break;
          case 18: 
            { if(yytext().replaceAll("\"", "").trim().endsWith("|") || yytext().replaceAll("\"", "").trim().startsWith("|") ){
                    return retornarSimbolo(VALOR_TEXTO_VISIBLE_CON_ESPACIO, "VALOR_TEXTO_VISIBLE_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1); 
               }else if(yytext().trim().contains(" ")){//si tiene espacios
                    return retornarSimbolo(VALOR_ITEMS_CON_ESPACIO, "VALOR_ITEMS_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 95: break;
          case 19: 
            { return retornarSimbolo(URL, "URL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 96: break;
          case 20: 
            { return retornarSimbolo(DARK, "DARK", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 97: break;
          case 21: 
            { return retornarSimbolo(TEMA, "TEMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 98: break;
          case 22: 
            { return retornarSimbolo(BLUE, "BLUE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 99: break;
          case 23: 
            { return retornarSimbolo(COMBO, "COMBO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 100: break;
          case 24: 
            { return retornarSimbolo(CLASE, "CLASE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 101: break;
          case 25: 
            { return retornarSimbolo(RADIO, "RADIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 102: break;
          case 26: 
            { return retornarSimbolo(FILAS, "FILAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 103: break;
          case 27: 
            { return retornarSimbolo(WHITE, "WHITE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 104: break;
          case 28: 
            { return retornarSimbolo(BOTON, "BOTON", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 105: break;
          case 29: 
            { return retornarSimbolo(CENTRO, "CENTRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 106: break;
          case 30: 
            { return retornarSimbolo(IMAGEN, "IMAGEN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 107: break;
          case 31: 
            { return retornarSimbolo(INDICE, "INDICE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 108: break;
          case 32: 
            { return retornarSimbolo(NOMBRE, "NOMBRE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 109: break;
          case 33: 
            { return retornarSimbolo(TITULO, "TITULO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 110: break;
          case 34: 
            { return retornarSimbolo(USUARIO, "USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 111: break;
          case 35: 
            { return retornarSimbolo(DERECHA, "DERECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 112: break;
          case 36: 
            { return retornarSimbolo(FICHERO, "FICHERO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 113: break;
          case 37: 
            { return retornarSimbolo(COLUMNAS, "COLUMNAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 114: break;
          case 38: 
            { return retornarSimbolo(CHECKBOX, "CHECKBOX", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 115: break;
          case 39: 
            { return retornarSimbolo(OPCIONES, "OPCIONES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 116: break;
          case 40: 
            { return retornarSimbolo(PASSWORD, "PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 117: break;
          case 41: 
            { return retornarSimbolo(REQUERIDO, "REQUERIDO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 118: break;
          case 42: 
            { return retornarSimbolo(IZQUIERDA, "IZQUIERDA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 119: break;
          case 43: 
            { return retornarSimbolo(AREA_TEXTO, "AREA_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 120: break;
          case 44: 
            { return retornarSimbolo(ALINEACION, "ALINEACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 121: break;
          case 45: 
            { return retornarSimbolo(FORMULARIO, "FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 122: break;
          case 46: 
            { return retornarSimbolo(JUSTIFICAR, "JUSTIFICAR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 123: break;
          case 47: 
            { return retornarSimbolo(VALOR_FECHA, "VALOR_FECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 124: break;
          case 48: 
            { return retornarSimbolo(INICIO_SOLICITUD, "INICIO_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 125: break;
          case 49: 
            { return retornarSimbolo(INICIO_RESPUESTA, "INICIO_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 126: break;
          case 50: 
            { return retornarSimbolo(FIN_SOLICITUD, "FIN_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 127: break;
          case 51: 
            { return retornarSimbolo(FIN_RESPUESTA, "FIN_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 128: break;
          case 52: 
            { return retornarSimbolo(CAMPO_TEXTO, "CAMPO_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 129: break;
          case 53: 
            { return retornarSimbolo(INICIO_RESPUESTAS, "INICIO_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 130: break;
          case 54: 
            { return retornarSimbolo(FIN_RESPUESTAS, "FIN_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 131: break;
          case 55: 
            { return retornarSimbolo(NOMBRE_CAMPO, "NOMBRE_CAMPO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 132: break;
          case 56: 
            { return retornarSimbolo(INICIO_SOLICITUDES, "INICIO_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 133: break;
          case 57: 
            { return retornarSimbolo(FIN_SOLICITUDES, "FIN_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 134: break;
          case 58: 
            { return retornarSimbolo(CREAR_USUARIO, "CREAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 135: break;
          case 59: 
            { return retornarSimbolo(USUARIO_NUEVO, "USUARIO_NUEVO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 136: break;
          case 60: 
            { return retornarSimbolo(LOGIN_USUARIO, "LOGIN_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 137: break;
          case 61: 
            { return retornarSimbolo(TEXTO_VISIBLE, "TEXTO_VISIBLE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 138: break;
          case 62: 
            { return retornarSimbolo(FECHA_CREACION, "FECHA_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 139: break;
          case 63: 
            { return retornarSimbolo(NUEVO_PASSWORD, "NUEVO_PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 140: break;
          case 64: 
            { return retornarSimbolo(USUARIO_ANTIGUO, "USUARIO_ANTIGUO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 141: break;
          case 65: 
            { return retornarSimbolo(ELIMINAR_USUARIO, "ELIMINAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 142: break;
          case 66: 
            { return retornarSimbolo(USUARIO_CREACION, "USUARIO_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 143: break;
          case 67: 
            { return retornarSimbolo(NUEVO_FORMULARIO, "NUEVO_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 144: break;
          case 68: 
            { return retornarSimbolo(MODIFICAR_USUARIO, "MODIFICAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 145: break;
          case 69: 
            { return retornarSimbolo(AGREGAR_COMPONENTE, "AGREGAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 146: break;
          case 70: 
            { return retornarSimbolo(FECHA_MODIFICACION, "FECHA_MODIFICACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 147: break;
          case 71: 
            { return retornarSimbolo(ELIMINAR_COMPONENTE, "ELIMINAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 148: break;
          case 72: 
            { return retornarSimbolo(ELIMINAR_FORMULARIO, "ELIMINAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 149: break;
          case 73: 
            { return retornarSimbolo(CREDENCIALES_USUARIO, "CREDENCIALES_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 150: break;
          case 74: 
            { return retornarSimbolo(MODIFICAR_COMPONENTE, "MODIFICAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 151: break;
          case 75: 
            { return retornarSimbolo(MODIFICAR_FORMULARIO, "MODIFICAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 152: break;
          case 76: 
            { return retornarSimbolo(PARAMETROS_COMPONENTE, "PARAMETROS_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 153: break;
          case 77: 
            { return retornarSimbolo(PARAMETROS_FORMULARIO, "PARAMETROS_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerIndigo [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerIndigo scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerIndigo(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}