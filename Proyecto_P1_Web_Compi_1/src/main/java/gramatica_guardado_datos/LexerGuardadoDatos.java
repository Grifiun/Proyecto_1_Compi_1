/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package gramatica_guardado_datos;

import java_cup.runtime.*;
import clasesDAO.Token;
import static gramatica_guardado_datos.ParserGuardadoDatosSym.*;

/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>guardadoDatos.jflex</tt>
 */
public class LexerGuardadoDatos implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\3\1\1\0\2\1\22\0\1\25\1\72\1\24\1\72\1\67"+
    "\3\72\1\4\1\5\2\72\1\7\1\66\1\12\1\72\12\71\1\6"+
    "\6\72\1\37\1\42\1\45\1\27\1\43\1\31\1\50\1\46\1\26"+
    "\1\64\1\53\1\36\1\34\1\41\1\32\1\47\1\62\1\33\1\44"+
    "\1\40\1\35\1\52\1\51\1\61\1\70\1\63\4\72\1\30\1\72"+
    "\1\21\1\11\1\70\1\10\1\55\1\13\1\70\1\57\1\22\1\70"+
    "\1\54\1\20\1\16\1\70\1\14\2\70\1\15\1\23\1\60\1\17"+
    "\1\70\1\56\3\70\1\2\1\72\1\3\1\72\u05e1\0\12\65\206\0"+
    "\12\65\306\0\12\65\u019c\0\12\65\166\0\12\65\166\0\12\65\166\0"+
    "\12\65\166\0\12\65\166\0\12\65\166\0\12\65\166\0\12\65\166\0"+
    "\12\65\166\0\12\65\140\0\12\65\166\0\12\65\106\0\12\65\u0116\0"+
    "\12\65\106\0\12\65\u0746\0\12\65\46\0\12\65\u012c\0\12\65\200\0"+
    "\12\65\246\0\12\65\6\0\12\65\266\0\12\65\126\0\12\65\206\0"+
    "\12\65\6\0\12\65\u89c6\0\12\65\u02a6\0\12\65\46\0\12\65\306\0"+
    "\12\65\26\0\12\65\126\0\12\65\u0196\0\12\65\u5316\0\12\65\u0586\0"+
    "\12\65\u0bbc\0\12\65\200\0\12\65\74\0\12\65\220\0\12\65\u0116\0"+
    "\12\65\u0156\0\12\65\166\0\12\65\u0176\0\12\65\146\0\12\65\146\0"+
    "\12\65\u01a6\0\12\65\u0366\0\12\65\u4e06\0\12\65\346\0\12\65\u6c74\0"+
    "\62\65\u1150\0\12\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\32\0\1\11\45\0\1\12\20\0\1\13"+
    "\17\0\1\14\6\0\1\15\20\0\1\16\20\0\1\17"+
    "\32\0\1\20\1\0\1\21\23\0\1\22\35\0\1\23"+
    "\4\0\1\24\12\0\1\25\2\0\1\26\2\0\1\27"+
    "\6\0\1\30\10\0\1\31\1\0\1\32\15\0\1\33"+
    "\2\0\1\34\6\0\1\35\15\0\1\36\1\0\1\37"+
    "\6\0\1\40\13\0\1\41\15\0\1\42\1\0\1\43"+
    "\13\0\1\44\2\0\1\45\1\0\1\46\5\0\1\47"+
    "\2\0\1\50\4\0\1\51\27\0\1\52\1\0\1\53"+
    "\4\0\1\54\2\0\1\55\1\0\1\56\15\0\1\57"+
    "\1\0\1\60\11\0\1\61\2\0\1\62\1\0\1\63"+
    "\5\0\1\64\2\0\1\65\4\0\1\66\3\0\1\67"+
    "\3\0\1\70\4\0\1\71\1\0\1\72\2\0\1\73"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d\0\261"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\73\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\73\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\73\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\73\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\73\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\73\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\73\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\73\0\u251b\0\73\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\73\0\u29b7"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\73\0\u3066\0\u30a1\0\u30dc"+
    "\0\u3117\0\73\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u32ef\0\u332a\0\u3365\0\73\0\u33a0\0\u33db\0\73"+
    "\0\u3416\0\u3451\0\73\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578"+
    "\0\u35b3\0\73\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715"+
    "\0\u3750\0\u378b\0\73\0\u37c6\0\73\0\u3801\0\u383c\0\u3877"+
    "\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\73\0\u3b00\0\u3b3b\0\73\0\u3b76\0\u3bb1"+
    "\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\73\0\u3cd8\0\u3d13\0\u3d4e"+
    "\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\73\0\u3fd7\0\73\0\u4012\0\u404d\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\73\0\u4174\0\u41af\0\u41ea\0\u4225"+
    "\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\73"+
    "\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a"+
    "\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\73\0\u46fc\0\73"+
    "\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\73\0\u49c0\0\u49fb\0\73\0\u4a36"+
    "\0\73\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\73\0\u4b98"+
    "\0\u4bd3\0\73\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\73\0\u4cfa"+
    "\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2"+
    "\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa"+
    "\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c\0\73\0\u5247"+
    "\0\73\0\u5282\0\u52bd\0\u52f8\0\u5333\0\73\0\u536e\0\u53a9"+
    "\0\73\0\u53e4\0\73\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3"+
    "\0\73\0\u571e\0\73\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845"+
    "\0\u5880\0\u58bb\0\u58f6\0\u5931\0\73\0\u596c\0\u59a7\0\73"+
    "\0\u59e2\0\73\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\73"+
    "\0\u5b44\0\u5b7f\0\73\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\73"+
    "\0\u5ca6\0\u5ce1\0\u5d1c\0\73\0\u5d57\0\u5d92\0\u5dcd\0\73"+
    "\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\73\0\u5ef4\0\73\0\u5f2f"+
    "\0\u5f6a\0\73\0\u5fa5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\13\2\1\13\1\3\45\2\104\0\1\14\63\0"+
    "\6\15\1\16\1\17\12\15\1\0\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\15\1\27\1\15\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\15\1\37"+
    "\1\15\1\40\4\15\1\41\5\15\1\42\1\43\2\23"+
    "\1\15\1\44\1\15\12\0\1\45\62\0\22\15\1\46"+
    "\1\47\37\15\1\0\5\15\2\0\17\15\1\50\2\15"+
    "\1\46\1\47\37\15\1\0\5\15\2\0\16\15\1\51"+
    "\3\15\1\46\1\47\37\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\1\15\1\52\4\15\1\53\4\15\1\54"+
    "\21\15\1\55\1\15\1\0\5\15\2\0\17\15\1\50"+
    "\2\15\1\46\1\47\11\15\1\56\3\15\1\57\21\15"+
    "\1\0\5\15\2\0\6\15\2\60\1\15\11\60\1\46"+
    "\1\47\37\60\1\0\4\60\1\15\2\0\22\15\1\46"+
    "\1\47\1\61\14\15\1\62\21\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\21\15\1\63\15\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\11\15\1\64\3\15\1\65"+
    "\21\15\1\0\5\15\2\0\22\15\1\46\1\47\5\15"+
    "\1\66\10\15\1\67\20\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\5\15\1\70\2\15\1\71\26\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\1\72\14\15\1\73"+
    "\21\15\1\0\5\15\2\0\22\15\1\46\1\47\4\15"+
    "\1\74\2\15\1\75\27\15\1\0\5\15\2\0\16\15"+
    "\1\51\3\15\1\46\1\47\4\15\1\76\3\15\1\77"+
    "\26\15\1\0\5\15\2\0\22\15\1\46\1\47\16\15"+
    "\1\100\20\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\1\101\36\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\4\15\1\102\3\15\1\103\1\104\3\15\1\105\2\15"+
    "\1\106\16\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\7\15\1\107\1\15\1\110\25\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\20\15\1\111\10\15\1\112\5\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\31\15\1\112"+
    "\5\15\1\0\5\15\2\0\22\15\1\46\1\47\7\15"+
    "\1\113\27\15\1\0\5\15\24\0\1\114\1\115\37\0"+
    "\1\116\3\0\1\116\3\0\22\15\1\114\1\117\37\15"+
    "\1\116\3\15\1\120\1\15\13\0\1\121\3\0\1\122"+
    "\55\0\22\123\1\46\1\47\37\123\1\0\5\123\2\0"+
    "\13\15\1\124\6\15\1\46\1\47\37\15\1\0\5\15"+
    "\2\0\15\15\1\125\4\15\1\46\1\47\37\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\2\15\1\126\34\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\11\15\1\127"+
    "\25\15\1\0\5\15\2\0\22\15\1\46\1\47\1\15"+
    "\1\130\35\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\34\15\1\131\2\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\5\15\1\132\4\15\1\133\24\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\5\15\1\134\31\15\1\0"+
    "\5\15\2\0\6\15\2\60\1\15\11\60\1\135\1\136"+
    "\37\60\1\0\4\60\1\15\2\0\22\15\1\46\1\47"+
    "\10\15\1\137\6\15\1\140\17\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\17\15\1\141\17\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\17\15\1\142\17\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\1\15\1\143\35\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\22\15\1\144"+
    "\11\15\1\145\2\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\10\15\1\146\26\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\7\15\1\147\27\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\15\15\1\150\21\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\1\151\36\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\12\15\1\152\24\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\6\15\1\153\24\15"+
    "\1\154\3\15\1\0\5\15\2\0\22\15\1\155\1\156"+
    "\6\15\1\157\30\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\15\15\1\160\21\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\12\15\1\161\24\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\7\15\1\162\27\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\12\15\1\163\24\15\1\0"+
    "\5\15\2\0\22\15\1\164\1\165\37\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\6\15\1\166\1\15\1\167"+
    "\26\15\1\0\5\15\2\0\22\15\1\46\1\47\11\15"+
    "\1\170\25\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\6\15\1\171\30\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\13\15\1\172\23\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\15\15\1\173\21\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\14\15\1\174\22\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\16\15\1\175\20\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\1\176\36\15\1\0"+
    "\5\15\2\0\20\15\1\177\1\15\1\46\1\47\37\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\16\15\1\200"+
    "\20\15\1\0\5\15\24\0\1\114\1\115\71\0\1\114"+
    "\1\115\37\0\1\201\3\0\1\201\3\0\22\123\1\114"+
    "\1\117\37\123\1\0\5\123\2\0\22\15\1\114\1\117"+
    "\37\15\1\201\3\15\1\202\1\15\14\0\1\203\101\0"+
    "\1\204\51\0\22\123\1\205\40\123\1\0\5\123\2\0"+
    "\22\15\1\46\1\47\26\15\1\206\10\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\27\15\1\207\7\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\3\15\1\210\13\15"+
    "\1\211\17\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\22\15\1\212\14\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\1\213\36\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\7\15\1\214\27\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\25\15\1\206\11\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\4\15\1\215\32\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\15\15\1\216\21\15\1\0"+
    "\5\15\2\0\22\123\1\135\1\136\37\123\1\0\5\123"+
    "\2\0\22\15\1\46\1\47\11\15\1\217\25\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\20\15\1\220\16\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\20\15\1\221"+
    "\16\15\1\0\5\15\2\0\22\15\1\46\1\47\1\222"+
    "\36\15\1\0\5\15\2\0\22\15\1\46\1\47\1\223"+
    "\36\15\1\0\5\15\2\0\22\15\1\46\1\47\1\224"+
    "\36\15\1\0\5\15\2\0\22\15\1\46\1\47\7\15"+
    "\1\225\27\15\1\0\5\15\2\0\22\15\1\226\1\227"+
    "\37\15\1\0\5\15\2\0\22\15\1\46\1\47\11\15"+
    "\1\230\25\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\11\15\1\231\25\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\13\15\1\232\23\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\7\15\1\233\27\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\11\15\1\234\25\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\12\15\1\235\24\15\1\0"+
    "\5\15\2\0\22\123\1\155\1\156\37\123\1\0\5\123"+
    "\2\0\22\15\1\46\1\47\14\15\1\236\22\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\24\15\1\237\12\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\4\15\1\240"+
    "\32\15\1\0\5\15\2\0\22\15\1\46\1\47\15\15"+
    "\1\207\21\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\5\15\1\241\31\15\1\0\5\15\2\0\22\123\1\164"+
    "\1\165\37\123\1\0\5\123\2\0\22\15\1\46\1\47"+
    "\14\15\1\242\22\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\7\15\1\243\27\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\16\15\1\244\20\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\21\15\1\245\15\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\12\15\1\246\24\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\17\15\1\247\17\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\10\15\1\250"+
    "\26\15\1\0\5\15\2\0\22\15\1\46\1\47\16\15"+
    "\1\251\20\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\12\15\1\252\24\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\32\15\1\253\4\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\12\15\1\254\24\15\1\0\5\15\24\0"+
    "\1\114\1\115\37\0\1\255\3\0\1\255\3\0\22\15"+
    "\1\114\1\117\37\15\1\255\3\15\1\256\1\15\15\0"+
    "\1\257\74\0\1\260\55\0\22\15\1\261\1\262\37\15"+
    "\1\0\5\15\2\0\22\15\1\263\1\264\37\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\4\15\1\265\32\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\4\15\1\266"+
    "\32\15\1\0\5\15\2\0\22\15\1\46\1\47\15\15"+
    "\1\267\21\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\17\15\1\270\17\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\1\271\36\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\16\15\1\272\20\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\17\15\1\273\17\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\16\15\1\274\20\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\15\15\1\275\21\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\11\15\1\276\25\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\4\15\1\277"+
    "\32\15\1\0\5\15\2\0\22\15\1\46\1\47\4\15"+
    "\1\300\32\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\16\15\1\301\20\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\15\15\1\302\21\15\1\0\5\15\2\0\22\123"+
    "\1\226\1\227\37\123\1\0\5\123\2\0\22\15\1\46"+
    "\1\47\5\15\1\303\31\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\2\15\1\304\34\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\15\15\1\305\21\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\10\15\1\306\26\15\1\0"+
    "\5\15\2\0\22\15\1\307\1\310\37\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\4\15\1\311\32\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\5\15\1\312\31\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\4\15\1\313"+
    "\32\15\1\0\5\15\2\0\22\15\1\46\1\47\13\15"+
    "\1\314\23\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\7\15\1\315\27\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\4\15\1\316\32\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\6\15\1\317\30\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\15\15\1\320\21\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\4\15\1\321\32\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\5\15\1\322\31\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\25\15\1\323"+
    "\11\15\1\0\5\15\2\0\22\15\1\46\1\47\1\324"+
    "\36\15\1\0\5\15\2\0\22\15\1\46\1\47\23\15"+
    "\1\325\13\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\15\15\1\326\21\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\27\15\1\326\7\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\1\327\36\15\1\0\5\15\24\0\1\114"+
    "\1\115\37\0\1\330\1\331\2\0\1\330\3\0\22\15"+
    "\1\114\1\117\37\15\1\330\1\332\2\15\1\333\1\15"+
    "\16\0\1\334\75\0\1\335\53\0\22\123\1\261\1\262"+
    "\37\123\1\0\5\123\2\0\22\123\1\263\1\264\37\123"+
    "\1\0\5\123\2\0\22\15\1\46\1\47\5\15\1\336"+
    "\31\15\1\0\5\15\2\0\22\15\1\46\1\47\6\15"+
    "\1\337\30\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\13\15\1\340\23\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\15\15\1\341\21\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\15\15\1\342\21\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\2\15\1\343\34\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\20\15\1\344\16\15\1\0"+
    "\5\15\2\0\22\15\1\345\1\346\37\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\5\15\1\347\31\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\2\15\1\350\34\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\13\15\1\351"+
    "\23\15\1\0\5\15\2\0\22\15\1\352\1\353\37\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\12\15\1\354"+
    "\24\15\1\0\5\15\2\0\22\15\1\46\1\47\5\15"+
    "\1\355\31\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\1\356\36\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\12\15\1\357\24\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\11\15\1\360\25\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\4\15\1\361\32\15\1\0\5\15\2\0"+
    "\22\123\1\307\1\310\37\123\1\0\5\123\2\0\22\15"+
    "\1\46\1\47\2\15\1\362\34\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\15\15\1\363\21\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\2\15\1\364\34\15\1\0"+
    "\5\15\2\0\22\15\1\365\1\366\37\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\17\15\1\367\17\15\1\0"+
    "\5\15\2\0\22\15\1\370\1\371\37\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\13\15\1\372\23\15\1\0"+
    "\5\15\2\0\22\15\1\373\1\374\37\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\2\15\1\375\34\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\4\15\1\376\32\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\14\15\1\377"+
    "\22\15\1\0\5\15\2\0\22\15\1\46\1\47\17\15"+
    "\1\u0100\17\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\4\15\1\u0101\32\15\1\0\5\15\2\0\22\15\1\u0102"+
    "\1\u0103\37\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\3\15\1\u0104\33\15\1\0\5\15\24\0\1\114\1\115"+
    "\37\0\1\330\3\0\1\330\66\0\1\u0105\3\0\1\u0105"+
    "\3\0\22\15\1\46\1\47\37\15\1\u0105\3\15\1\u0106"+
    "\1\15\2\0\22\15\1\114\1\117\37\15\1\330\3\15"+
    "\1\333\1\15\17\0\1\u0107\70\0\1\u0108\57\0\22\15"+
    "\1\46\1\47\6\15\1\u0109\30\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\21\15\1\u010a\15\15\1\0\5\15"+
    "\2\0\22\15\1\u010b\1\u010c\37\15\1\0\5\15\2\0"+
    "\22\15\1\u010d\1\u010e\37\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\5\15\1\u010f\31\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\5\15\1\u0110\31\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\11\15\1\u0111\25\15\1\0"+
    "\5\15\2\0\22\123\1\345\1\346\37\123\1\0\5\123"+
    "\2\0\22\15\1\46\1\47\4\15\1\u0112\32\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\6\15\1\u0113\10\15"+
    "\1\u0114\17\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\15\15\1\u0115\21\15\1\0\5\15\2\0\22\123\1\352"+
    "\1\353\37\123\1\0\5\123\2\0\22\15\1\46\1\47"+
    "\5\15\1\u0116\31\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\1\u0117\36\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\4\15\1\u0118\32\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\15\15\1\u0119\21\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\17\15\1\u011a\17\15\1\0\5\15"+
    "\2\0\22\15\1\u011b\1\u011c\37\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\24\15\1\u011d\12\15\1\0\5\15"+
    "\2\0\22\15\1\u011e\1\u011f\2\15\1\u0120\34\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\21\15\1\u0121\15\15"+
    "\1\0\5\15\2\0\22\123\1\365\1\366\37\123\1\0"+
    "\5\123\2\0\22\15\1\46\1\47\12\15\1\u0122\24\15"+
    "\1\0\5\15\2\0\22\123\1\370\1\371\37\123\1\0"+
    "\5\123\2\0\22\15\1\46\1\47\11\15\1\u0123\25\15"+
    "\1\0\5\15\2\0\22\123\1\373\1\374\37\123\1\0"+
    "\5\123\2\0\22\15\1\46\1\47\12\15\1\u0124\24\15"+
    "\1\0\5\15\2\0\22\15\1\u0125\1\u0126\37\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\4\15\1\u0127\32\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\4\15\1\u0128"+
    "\32\15\1\0\5\15\2\0\22\15\1\46\1\47\5\15"+
    "\1\u0129\31\15\1\0\5\15\2\0\22\123\1\u0102\1\u0103"+
    "\37\123\1\0\5\123\2\0\22\15\1\46\1\47\1\u012a"+
    "\36\15\1\0\5\15\65\0\1\u012b\3\0\1\u012b\3\0"+
    "\22\15\1\46\1\47\37\15\1\u012b\3\15\1\u012c\1\15"+
    "\20\0\1\u012d\74\0\1\u012e\52\0\22\15\1\46\1\47"+
    "\7\15\1\u012f\27\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\4\15\1\u0130\32\15\1\0\5\15\2\0\22\123"+
    "\1\u010b\1\u010c\37\123\1\0\5\123\2\0\22\123\1\u010d"+
    "\1\u010e\37\123\1\0\5\123\2\0\22\15\1\46\1\47"+
    "\1\15\1\u0131\35\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\15\15\1\u0132\21\15\1\0\5\15\2\0\22\15"+
    "\1\u0133\1\u0134\37\15\1\0\5\15\2\0\22\15\1\u0135"+
    "\1\u0136\37\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\4\15\1\u0137\32\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\5\15\1\u0138\31\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\16\15\1\u0139\20\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\4\15\1\u013a\32\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\1\15\1\u013b\35\15\1\0"+
    "\5\15\2\0\22\15\1\u013c\1\u013d\2\15\1\u013e\34\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\33\15\1\u013f"+
    "\3\15\1\0\5\15\2\0\22\15\1\46\1\47\1\u0140"+
    "\36\15\1\0\5\15\2\0\22\123\1\u011b\1\u011c\37\123"+
    "\1\0\5\123\2\0\22\15\1\46\1\47\1\u0141\36\15"+
    "\1\0\5\15\2\0\22\123\1\u011e\1\u011f\37\123\1\0"+
    "\5\123\2\0\22\15\1\46\1\47\17\15\1\u0142\17\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\11\15\1\u0143"+
    "\25\15\1\0\5\15\2\0\22\15\1\46\1\47\7\15"+
    "\1\u0144\27\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\16\15\1\u0145\20\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\15\15\1\u0146\21\15\1\0\5\15\2\0\22\123"+
    "\1\u0125\1\u0126\37\123\1\0\5\123\2\0\22\15\1\46"+
    "\1\47\33\15\1\u0147\3\15\1\0\5\15\2\0\22\15"+
    "\1\u0148\1\u0149\37\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\1\15\1\u014a\35\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\17\15\1\u014b\17\15\1\0\5\15\66\0"+
    "\1\u014c\6\0\22\15\1\46\1\47\37\15\1\0\1\u014d"+
    "\4\15\21\0\1\u014e\65\0\1\u014f\60\0\22\15\1\46"+
    "\1\47\10\15\1\u0150\26\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\13\15\1\u0151\23\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\11\15\1\u0152\25\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\17\15\1\u0153\17\15\1\0"+
    "\5\15\2\0\22\123\1\u0133\1\u0134\37\123\1\0\5\123"+
    "\2\0\22\123\1\u0135\1\u0136\37\123\1\0\5\123\2\0"+
    "\22\15\1\46\1\47\1\15\1\u0154\35\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\15\15\1\u0155\21\15\1\0"+
    "\5\15\2\0\22\15\1\u0156\1\u0157\37\15\1\0\5\15"+
    "\2\0\22\15\1\u0158\1\u0159\37\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\4\15\1\u015a\32\15\1\0\5\15"+
    "\2\0\22\123\1\u013c\1\u013d\37\123\1\0\5\123\2\0"+
    "\22\15\1\46\1\47\11\15\1\u015b\1\15\1\u015c\3\15"+
    "\1\u015d\17\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\12\15\1\u015e\24\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\4\15\1\u015f\32\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\16\15\1\u0160\20\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\11\15\1\u0161\25\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\16\15\1\u0162\20\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\5\15\1\u0163\31\15"+
    "\1\0\5\15\2\0\22\15\1\u0164\1\u0165\37\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\33\15\1\u0166\3\15"+
    "\1\0\5\15\2\0\22\15\1\u0167\1\u0168\37\15\1\0"+
    "\5\15\2\0\22\123\1\u0148\1\u0149\37\123\1\0\5\123"+
    "\2\0\22\15\1\u0169\1\u016a\37\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\11\15\1\u016b\25\15\1\0\5\15"+
    "\65\0\1\u016c\3\0\1\u016c\3\0\22\15\1\46\1\47"+
    "\37\15\1\u016c\3\15\1\u016d\1\15\15\0\1\u016e\100\0"+
    "\1\u016f\51\0\22\15\1\46\1\47\11\15\1\u0170\25\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\15\15\1\u0171"+
    "\21\15\1\0\5\15\2\0\22\15\1\u0172\1\u0173\37\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\4\15\1\u0174"+
    "\32\15\1\0\5\15\2\0\22\15\1\46\1\47\1\u0175"+
    "\36\15\1\0\5\15\2\0\22\15\1\46\1\47\11\15"+
    "\1\u0176\25\15\1\0\5\15\2\0\22\123\1\u0156\1\u0157"+
    "\37\123\1\0\5\123\2\0\22\123\1\u0158\1\u0159\37\123"+
    "\1\0\5\123\2\0\22\15\1\u0177\1\u0178\37\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\13\15\1\u0179\23\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\7\15\1\u017a"+
    "\27\15\1\0\5\15\2\0\22\15\1\46\1\47\5\15"+
    "\1\u017b\31\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\4\15\1\u017c\32\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\13\15\1\u017d\23\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\1\u017e\36\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\6\15\1\u017f\30\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\16\15\1\u0180\20\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\11\15\1\u0181\25\15\1\0"+
    "\5\15\2\0\22\123\1\u0164\1\u0165\37\123\1\0\5\123"+
    "\2\0\22\15\1\46\1\47\12\15\1\u0182\24\15\1\0"+
    "\5\15\2\0\22\123\1\u0167\1\u0168\37\123\1\0\5\123"+
    "\2\0\22\123\1\u0169\1\u016a\37\123\1\0\5\123\2\0"+
    "\22\15\1\46\1\47\5\15\1\u0183\31\15\1\0\5\15"+
    "\65\0\1\u0184\3\0\1\u0184\3\0\22\15\1\46\1\47"+
    "\37\15\1\u0184\3\15\1\u0185\1\15\22\0\1\u0186\52\0"+
    "\22\15\1\46\1\47\5\15\1\u0187\31\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\13\15\1\u0188\23\15\1\0"+
    "\5\15\2\0\22\123\1\u0172\1\u0173\37\123\1\0\5\123"+
    "\2\0\22\15\1\46\1\47\21\15\1\u0189\15\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\3\15\1\u018a\33\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\17\15\1\u018b"+
    "\17\15\1\0\5\15\2\0\22\123\1\u0177\1\u0178\37\123"+
    "\1\0\5\123\2\0\22\15\1\46\1\47\12\15\1\u018c"+
    "\24\15\1\0\5\15\2\0\22\15\1\46\1\47\15\15"+
    "\1\u018d\21\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\15\15\1\u018e\21\15\1\0\5\15\2\0\22\15\1\u018f"+
    "\1\u0190\37\15\1\0\5\15\2\0\22\15\1\u0191\1\u0192"+
    "\37\15\1\0\5\15\2\0\22\15\1\46\1\47\14\15"+
    "\1\u0193\22\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\21\15\1\u0194\15\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\23\15\1\u0195\13\15\1\0\5\15\2\0\22\15"+
    "\1\u0196\1\u0197\37\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\4\15\1\u0198\32\15\1\0\5\15\2\0\22\15"+
    "\1\u0199\1\u019a\37\15\1\0\5\15\24\0\1\u019b\1\u0184"+
    "\47\0\22\15\1\u019b\1\u019c\37\15\1\0\5\15\14\0"+
    "\1\u019d\60\0\22\15\1\46\1\47\1\u019e\36\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\12\15\1\u019f\24\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\1\u01a0\36\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\1\u01a1\36\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\1\u01a2\36\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\1\u01a3\36\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\24\15\1\u01a4"+
    "\12\15\1\0\5\15\2\0\22\15\1\46\1\47\11\15"+
    "\1\u01a5\25\15\1\0\5\15\2\0\22\123\1\u018f\1\u0190"+
    "\37\123\1\0\5\123\2\0\22\123\1\u0191\1\u0192\37\123"+
    "\1\0\5\123\2\0\22\15\1\46\1\47\10\15\1\u01a6"+
    "\26\15\1\0\5\15\2\0\22\15\1\46\1\47\4\15"+
    "\1\u01a7\32\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\4\15\1\u01a8\32\15\1\0\5\15\2\0\22\123\1\u0196"+
    "\1\u0197\37\123\1\0\5\123\2\0\22\15\1\u01a9\1\u01aa"+
    "\37\15\1\0\5\15\2\0\22\123\1\u0199\1\u019a\37\123"+
    "\1\0\5\123\2\0\22\123\1\u019b\1\u019c\37\123\1\0"+
    "\5\123\23\0\1\u01ab\51\0\22\15\1\46\1\47\4\15"+
    "\1\u01ac\32\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\15\15\1\u01ad\21\15\1\0\5\15\2\0\22\15\1\46"+
    "\1\47\10\15\1\u01ae\26\15\1\0\5\15\2\0\22\15"+
    "\1\46\1\47\17\15\1\u01af\17\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\4\15\1\u01b0\32\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\22\15\1\u01b1\14\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\4\15\1\u01b2\32\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\17\15\1\u01b3"+
    "\17\15\1\0\5\15\2\0\22\15\1\46\1\47\15\15"+
    "\1\u01b4\21\15\1\0\5\15\2\0\22\15\1\u01b5\1\u01b6"+
    "\37\15\1\0\5\15\2\0\22\15\1\46\1\47\5\15"+
    "\1\u01b7\31\15\1\0\5\15\2\0\22\123\1\u01a9\1\u01aa"+
    "\37\123\1\0\5\123\2\0\22\15\1\u01b8\1\u01b9\37\15"+
    "\1\0\5\15\2\0\22\15\1\u01ba\1\u01bb\37\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\11\15\1\u01bc\25\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\11\15\1\u01bd"+
    "\25\15\1\0\5\15\2\0\22\15\1\46\1\47\13\15"+
    "\1\u01be\23\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\7\15\1\u01bf\27\15\1\0\5\15\2\0\22\15\1\u01c0"+
    "\1\u01c1\37\15\1\0\5\15\2\0\22\15\1\46\1\47"+
    "\1\u01c2\36\15\1\0\5\15\2\0\22\15\1\u01c3\1\u01c4"+
    "\37\15\1\0\5\15\2\0\22\123\1\u01b5\1\u01b6\37\123"+
    "\1\0\5\123\2\0\22\15\1\46\1\47\1\15\1\u01c5"+
    "\35\15\1\0\5\15\2\0\22\123\1\u01b8\1\u01b9\37\123"+
    "\1\0\5\123\2\0\22\123\1\u01ba\1\u01bb\37\123\1\0"+
    "\5\123\2\0\22\15\1\46\1\47\1\15\1\u01c6\35\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\17\15\1\u01c7"+
    "\17\15\1\0\5\15\2\0\22\15\1\u01c8\1\u01c9\37\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\4\15\1\u01ca"+
    "\32\15\1\0\5\15\2\0\22\123\1\u01c0\1\u01c1\37\123"+
    "\1\0\5\123\2\0\22\15\1\46\1\47\4\15\1\u01cb"+
    "\32\15\1\0\5\15\2\0\22\123\1\u01c3\1\u01c4\37\123"+
    "\1\0\5\123\2\0\22\15\1\u01cc\1\u01cd\37\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\4\15\1\u01ce\32\15"+
    "\1\0\5\15\2\0\22\15\1\46\1\47\1\u01cf\36\15"+
    "\1\0\5\15\2\0\22\123\1\u01c8\1\u01c9\37\123\1\0"+
    "\5\123\2\0\22\15\1\u01d0\1\u01d1\37\15\1\0\5\15"+
    "\2\0\22\15\1\46\1\47\13\15\1\u01d2\23\15\1\0"+
    "\5\15\2\0\22\123\1\u01cc\1\u01cd\37\123\1\0\5\123"+
    "\2\0\22\15\1\46\1\47\16\15\1\u01d3\20\15\1\0"+
    "\5\15\2\0\22\15\1\46\1\47\4\15\1\u01d4\32\15"+
    "\1\0\5\15\2\0\22\123\1\u01d0\1\u01d1\37\123\1\0"+
    "\5\123\2\0\22\15\1\u01d5\1\u01d6\37\15\1\0\5\15"+
    "\2\0\22\15\1\u01d7\1\u01d8\37\15\1\0\5\15\2\0"+
    "\22\15\1\46\1\47\13\15\1\u01d9\23\15\1\0\5\15"+
    "\2\0\22\123\1\u01d5\1\u01d6\37\123\1\0\5\123\2\0"+
    "\22\123\1\u01d7\1\u01d8\37\123\1\0\5\123\2\0\22\15"+
    "\1\u01da\1\u01db\37\15\1\0\5\15\2\0\22\123\1\u01da"+
    "\1\u01db\37\123\1\0\5\123";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24544];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\11\2\1\32\0\1\11\45\0\1\11\20\0"+
    "\1\11\17\0\1\11\6\0\1\11\20\0\1\11\20\0"+
    "\1\11\32\0\1\11\1\0\1\11\23\0\1\11\35\0"+
    "\1\11\4\0\1\11\12\0\1\11\2\0\1\11\2\0"+
    "\1\11\6\0\1\11\10\0\1\11\1\0\1\11\15\0"+
    "\1\11\2\0\1\11\6\0\1\11\15\0\1\11\1\0"+
    "\1\11\6\0\1\11\13\0\1\11\15\0\1\11\1\0"+
    "\1\11\13\0\1\11\2\0\1\11\1\0\1\11\5\0"+
    "\1\11\2\0\1\11\4\0\1\11\27\0\1\11\1\0"+
    "\1\11\4\0\1\11\2\0\1\11\1\0\1\11\15\0"+
    "\1\11\1\0\1\11\11\0\1\11\2\0\1\11\1\0"+
    "\1\11\5\0\1\11\2\0\1\11\4\0\1\11\3\0"+
    "\1\11\3\0\1\11\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de los operadores invocados
    //ArrayList<Token> listadoOperadoresInvocados = new ArrayList();
    //ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

     //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
     private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
          //creamos un  token auxiliar
          Token tokenAux = new Token(tipoToken, lexema, fila, columna);
          System.out.println("\nFila : "+fila+" Columna: "+columna+" Token de tipo: "+tipoToken+" Lexema: "+lexema);
          //Agregamos al listado
          //listadoOperadoresInvocados.add(tokenAux);
          //retornamos el token aux como simbolo
          return new Symbol(tipo, tokenAux);
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGuardadoDatos(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 398) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(ParserGuardadoDatosSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext());
            } 
            // fall through
          case 60: break;
          case 2: 
            { 
            } 
            // fall through
          case 61: break;
          case 3: 
            { return retornarSimbolo(LLAVES_INICIO, "LLAVES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 62: break;
          case 4: 
            { return retornarSimbolo(LLAVES_FIN, "LLAVES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 63: break;
          case 5: 
            { return retornarSimbolo(PARENTESIS_INICIO, "PARENTESIS_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 64: break;
          case 6: 
            { return retornarSimbolo(PARENTESIS_FIN, "PARENTESIS_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 65: break;
          case 7: 
            { return retornarSimbolo(DOS_PUNTOS, "DOS_PUNTOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 66: break;
          case 8: 
            { return retornarSimbolo(COMA, "COMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 67: break;
          case 9: 
            { if(yytext().replaceAll("\"", "").trim().startsWith("|") || yytext().replaceAll("\"", "").trim().endsWith("|") ){
                return retornarSimbolo(VALOR_PASSWORD, "VALOR_PASSWORD", yytext(), yyline + 1, yycolumn + 1); 
            }else{
                return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
            }
            } 
            // fall through
          case 68: break;
          case 10: 
            { return retornarSimbolo(DIGITO, "DIGITO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 69: break;
          case 11: 
            { return retornarSimbolo(VALOR_ID, "VALOR_ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 70: break;
          case 12: 
            { return retornarSimbolo(NO, "NO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 71: break;
          case 13: 
            { return retornarSimbolo(SI, "SI", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 72: break;
          case 14: 
            { if(yytext().replaceAll("\"", "").trim().endsWith("|") || yytext().replaceAll("\"", "").trim().startsWith("|") ){
                return retornarSimbolo(VALOR_TEXTO_VISIBLE_CON_ESPACIO, "VALOR_TEXTO_VISIBLE_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1); 
            }else if(yytext().trim().contains(" ")){//si tiene espacios
                return retornarSimbolo(VALOR_ITEMS_CON_ESPACIO, "VALOR_ITEMS_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
            }else{
                return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
            }
            } 
            // fall through
          case 73: break;
          case 15: 
            { return retornarSimbolo(URL, "URL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 74: break;
          case 16: 
            { return retornarSimbolo(DARK, "DARK", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 75: break;
          case 17: 
            { return retornarSimbolo(BLUE, "BLUE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 76: break;
          case 18: 
            { return retornarSimbolo(TEMA, "TEMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 77: break;
          case 19: 
            { return retornarSimbolo(FILAS, "FILAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 78: break;
          case 20: 
            { return retornarSimbolo(RADIO, "RADIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 79: break;
          case 21: 
            { return retornarSimbolo(BOTON, "BOTON", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 80: break;
          case 22: 
            { return retornarSimbolo(COMBO, "COMBO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 81: break;
          case 23: 
            { return retornarSimbolo(CLASE, "CLASE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 82: break;
          case 24: 
            { return retornarSimbolo(WHITE, "WHITE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 83: break;
          case 25: 
            { return retornarSimbolo(IMAGEN, "IMAGEN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 84: break;
          case 26: 
            { return retornarSimbolo(INDICE, "INDICE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 85: break;
          case 27: 
            { return retornarSimbolo(TITULO, "TITULO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 86: break;
          case 28: 
            { return retornarSimbolo(NOMBRE, "NOMBRE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 87: break;
          case 29: 
            { return retornarSimbolo(CENTRO, "CENTRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 88: break;
          case 30: 
            { return retornarSimbolo(DERECHA, "DERECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 89: break;
          case 31: 
            { return retornarSimbolo(FICHERO, "FICHERO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 90: break;
          case 32: 
            { return retornarSimbolo(USUARIO, "USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 91: break;
          case 33: 
            { return retornarSimbolo(PUBLICO, "PUBLICO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 92: break;
          case 34: 
            { return retornarSimbolo(OPCIONES, "OPCIONES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 93: break;
          case 35: 
            { return retornarSimbolo(REGISTRO, "REGISTRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 94: break;
          case 36: 
            { return retornarSimbolo(COLUMNAS, "COLUMNAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 95: break;
          case 37: 
            { return retornarSimbolo(CHECKBOX, "CHECKBOX", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 96: break;
          case 38: 
            { return retornarSimbolo(PASSWORD, "PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 97: break;
          case 39: 
            { return retornarSimbolo(DBUSUARIOS, "DBUSUARIOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 98: break;
          case 40: 
            { return retornarSimbolo(IZQUIERDA, "IZQUIERDA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 99: break;
          case 41: 
            { return retornarSimbolo(REQUERIDO, "REQUERIDO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 100: break;
          case 42: 
            { return retornarSimbolo(AREA_TEXTO, "AREA_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 101: break;
          case 43: 
            { return retornarSimbolo(ALINEACION, "ALINEACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 102: break;
          case 44: 
            { return retornarSimbolo(ESTRUCTURA, "ESTRUCTURA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 103: break;
          case 45: 
            { return retornarSimbolo(JUSTIFICAR, "JUSTIFICAR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 104: break;
          case 46: 
            { return retornarSimbolo(VALOR_FECHA, "VALOR_FECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 105: break;
          case 47: 
            { return retornarSimbolo(CAMPO_TEXTO, "CAMPO_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 106: break;
          case 48: 
            { return retornarSimbolo(DBFORMULARIOS, "DBFORMULARIOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 107: break;
          case 49: 
            { return retornarSimbolo(NOMBRE_CAMPO, "NOMBRE_CAMPO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 108: break;
          case 50: 
            { return retornarSimbolo(ID_FORMULARIO, "ID_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 109: break;
          case 51: 
            { return retornarSimbolo(ID_COMPONENTE, "ID_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 110: break;
          case 52: 
            { return retornarSimbolo(USUARIO_NUEVO, "USUARIO_NUEVO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 111: break;
          case 53: 
            { return retornarSimbolo(TEXTO_VISIBLE, "TEXTO_VISIBLE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 112: break;
          case 54: 
            { return retornarSimbolo(FECHA_CREACION, "FECHA_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 113: break;
          case 55: 
            { return retornarSimbolo(NUEVO_PASSWORD, "NUEVO_PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 114: break;
          case 56: 
            { return retornarSimbolo(USUARIO_ANTIGUO, "USUARIO_ANTIGUO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 115: break;
          case 57: 
            { return retornarSimbolo(USUARIO_CREACION, "USUARIO_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 116: break;
          case 58: 
            { return retornarSimbolo(DATOS_RECOPILADOS, "DATOS_RECOPILADOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 117: break;
          case 59: 
            { return retornarSimbolo(FECHA_MODIFICACION, "FECHA_MODIFICACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = ParserGuardadoDatosSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGuardadoDatos [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGuardadoDatos scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGuardadoDatos(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}