/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package gramatica_indigo;
import java_cup.runtime.*;
import clasesDAO.Token;
import static gramatica_indigo.sym.*;

/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>indigoJflex.jflex</tt>
 */
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\3\1\1\0\2\1\22\0\1\43\1\10\1\42\1\77\1\74"+
    "\7\77\1\12\1\14\2\77\12\76\1\11\1\77\1\6\1\13\1\7"+
    "\2\77\1\15\1\61\1\44\1\17\1\45\1\52\1\54\1\60\1\50"+
    "\1\72\1\62\1\53\1\51\1\16\1\20\1\55\1\70\1\21\1\47"+
    "\1\22\1\46\1\57\1\56\1\67\1\75\1\71\1\4\1\77\1\5"+
    "\1\77\1\25\1\77\1\41\1\64\1\31\1\34\1\35\1\36\1\75"+
    "\1\66\1\23\1\75\1\63\1\30\1\75\1\24\1\27\1\40\1\75"+
    "\1\37\1\26\1\32\1\33\1\75\1\65\3\75\1\2\1\77\1\3"+
    "\1\77\u05e1\0\12\73\206\0\12\73\306\0\12\73\u019c\0\12\73\166\0"+
    "\12\73\166\0\12\73\166\0\12\73\166\0\12\73\166\0\12\73\166\0"+
    "\12\73\166\0\12\73\166\0\12\73\166\0\12\73\140\0\12\73\166\0"+
    "\12\73\106\0\12\73\u0116\0\12\73\106\0\12\73\u0746\0\12\73\46\0"+
    "\12\73\u012c\0\12\73\200\0\12\73\246\0\12\73\6\0\12\73\266\0"+
    "\12\73\126\0\12\73\206\0\12\73\6\0\12\73\u89c6\0\12\73\u02a6\0"+
    "\12\73\46\0\12\73\306\0\12\73\26\0\12\73\126\0\12\73\u0196\0"+
    "\12\73\u5316\0\12\73\u0586\0\12\73\u0bbc\0\12\73\200\0\12\73\74\0"+
    "\12\73\220\0\12\73\u0116\0\12\73\u0156\0\12\73\166\0\12\73\u0176\0"+
    "\12\73\146\0\12\73\146\0\12\73\u01a6\0\12\73\u0366\0\12\73\u4e06\0"+
    "\12\73\346\0\12\73\u6c74\0\62\73\u1150\0\12\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\12\1\2\0"+
    "\1\16\1\17\37\0\1\20\1\21\2\0\1\22\51\0"+
    "\1\23\12\0\1\24\4\0\1\25\26\0\1\26\2\0"+
    "\1\27\24\0\1\30\5\0\1\31\26\0\1\32\25\0"+
    "\1\33\11\0\1\34\5\0\1\35\32\0\1\36\6\0"+
    "\1\37\13\0\1\40\5\0\1\41\5\0\1\42\13\0"+
    "\1\43\4\0\1\44\1\0\1\45\14\0\1\46\7\0"+
    "\1\47\5\0\1\50\4\0\1\51\1\0\1\52\27\0"+
    "\1\53\13\0\1\54\6\0\1\55\21\0\1\56\4\0"+
    "\1\57\3\0\1\60\14\0\1\61\16\0\1\62\13\0"+
    "\1\63\16\0\1\64\1\0\1\65\22\0\1\66\5\0"+
    "\1\67\1\0\1\70\1\0\1\71\1\72\1\73\1\74"+
    "\5\0\1\75\22\0\1\76\1\0\1\77\1\0\1\100"+
    "\24\0\1\101\1\102\3\0\1\103\1\0\1\104\6\0"+
    "\1\105\7\0\1\106\5\0\1\107\12\0\1\110\12\0"+
    "\1\111\11\0\1\112\3\0\1\113\2\0\1\114\14\0"+
    "\1\115\5\0\1\116\6\0\1\117\4\0\1\120\1\0"+
    "\1\121\5\0\1\122\1\0\1\123\1\0\1\124\3\0"+
    "\1\125\1\0\1\126\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\200\0\300"+
    "\0\u0100\0\u0140\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0"+
    "\0\u0300\0\u0340\0\100\0\100\0\u0380\0\u03c0\0\u0400\0\u0440"+
    "\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0200"+
    "\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\100\0\100\0\u0b00\0\u0b40\0\100"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\100\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\100\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\100\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\100\0\u1ec0\0\u1f00\0\100\0\u1f40\0\u1f80\0\u1fc0\0\u2000"+
    "\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200"+
    "\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400"+
    "\0\100\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\100\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\100\0\u2b00\0\u2b40"+
    "\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40"+
    "\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40"+
    "\0\u2f80\0\u2fc0\0\u3000\0\100\0\u3040\0\u3080\0\u30c0\0\u3100"+
    "\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\100\0\u3280\0\u32c0"+
    "\0\u3300\0\u3340\0\u3380\0\100\0\u33c0\0\u3400\0\u3440\0\u3480"+
    "\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680"+
    "\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880"+
    "\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\100\0\u3a40"+
    "\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\100\0\u3bc0\0\u3c00"+
    "\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00"+
    "\0\u3e40\0\100\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\100"+
    "\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\100\0\u4100\0\u4140"+
    "\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340"+
    "\0\u4380\0\100\0\u43c0\0\u4400\0\u4440\0\u4480\0\100\0\u44c0"+
    "\0\100\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680"+
    "\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0\0\100\0\u4800\0\u4840"+
    "\0\u4880\0\u48c0\0\u4900\0\u4940\0\u4980\0\100\0\u49c0\0\u4a00"+
    "\0\u4a40\0\u4a80\0\u4ac0\0\100\0\u4b00\0\u4b40\0\u4b80\0\u4bc0"+
    "\0\100\0\u4c00\0\100\0\u4c40\0\u4c80\0\u4cc0\0\u4d00\0\u4d40"+
    "\0\u4d80\0\u4dc0\0\u4e00\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\u4f40"+
    "\0\u4f80\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140"+
    "\0\u5180\0\u51c0\0\100\0\u5200\0\u5240\0\u5280\0\u52c0\0\u5300"+
    "\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480\0\100\0\u54c0"+
    "\0\u5500\0\u5540\0\u5580\0\u55c0\0\u5600\0\100\0\u5640\0\u5680"+
    "\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880"+
    "\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\100"+
    "\0\u5a80\0\u5ac0\0\u5b00\0\u5b40\0\100\0\u5b80\0\u5bc0\0\u5c00"+
    "\0\100\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0"+
    "\0\u5e00\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\100\0\u5f40\0\u5f80"+
    "\0\u5fc0\0\u6000\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180"+
    "\0\u61c0\0\u6200\0\u6240\0\u6280\0\100\0\u62c0\0\u6300\0\u6340"+
    "\0\u6380\0\u63c0\0\u6400\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540"+
    "\0\100\0\u6580\0\u65c0\0\u6600\0\u6640\0\u6680\0\u66c0\0\u6700"+
    "\0\u6740\0\u6780\0\u67c0\0\u6800\0\u6840\0\u6880\0\u68c0\0\100"+
    "\0\u6900\0\100\0\u6940\0\u6980\0\u69c0\0\u6a00\0\u6a40\0\u6a80"+
    "\0\u6ac0\0\u6b00\0\u6b40\0\u6b80\0\u6bc0\0\u6c00\0\u6c40\0\u6c80"+
    "\0\u6cc0\0\u6d00\0\u6d40\0\u6d80\0\100\0\u6dc0\0\u6e00\0\u6e40"+
    "\0\u6e80\0\u6ec0\0\100\0\u6f00\0\100\0\u6f40\0\u6f80\0\u6fc0"+
    "\0\u7000\0\u7040\0\u7080\0\u70c0\0\u7100\0\u7140\0\u7180\0\100"+
    "\0\u71c0\0\u7200\0\u7240\0\u7280\0\u72c0\0\u7300\0\u7340\0\u7380"+
    "\0\u73c0\0\u7400\0\u7440\0\u7480\0\u74c0\0\u7500\0\u7540\0\u7580"+
    "\0\u75c0\0\u7600\0\100\0\u7640\0\100\0\u7680\0\100\0\u76c0"+
    "\0\u7700\0\u7740\0\u7780\0\u77c0\0\u7800\0\u7840\0\u7880\0\u78c0"+
    "\0\u7900\0\u7940\0\u7980\0\u79c0\0\u7a00\0\u7a40\0\u7a80\0\u7ac0"+
    "\0\u7b00\0\u7b40\0\u7b80\0\100\0\100\0\u7bc0\0\u7c00\0\u7c40"+
    "\0\100\0\u7c80\0\100\0\u7cc0\0\u7d00\0\u7d40\0\u7d80\0\u7dc0"+
    "\0\u7e00\0\100\0\u7e40\0\u7e80\0\u7ec0\0\u7f00\0\u7f40\0\u7f80"+
    "\0\u7fc0\0\100\0\u8000\0\u8040\0\u8080\0\u80c0\0\u8100\0\100"+
    "\0\u8140\0\u8180\0\u81c0\0\u8200\0\u8240\0\u8280\0\u82c0\0\u8300"+
    "\0\u8340\0\u8380\0\100\0\u83c0\0\u8400\0\u8440\0\u8480\0\u84c0"+
    "\0\u8500\0\u8540\0\u8580\0\u85c0\0\u8600\0\100\0\u8640\0\u8680"+
    "\0\u86c0\0\u8700\0\u8740\0\u8780\0\u87c0\0\u8800\0\u8840\0\100"+
    "\0\u8880\0\u88c0\0\u8900\0\100\0\u8940\0\u8980\0\100\0\u89c0"+
    "\0\u8a00\0\u8a40\0\u8a80\0\u8ac0\0\u8b00\0\u8b40\0\u8b80\0\u8bc0"+
    "\0\u8c00\0\u8c40\0\u8c80\0\100\0\u8cc0\0\u8d00\0\u8d40\0\u8d80"+
    "\0\u8dc0\0\100\0\u8e00\0\u8e40\0\u8e80\0\u8ec0\0\u8f00\0\u8f40"+
    "\0\100\0\u8f80\0\u8fc0\0\u9000\0\u9040\0\100\0\u9080\0\100"+
    "\0\u90c0\0\u9100\0\u9140\0\u9180\0\u91c0\0\100\0\u9200\0\100"+
    "\0\u9240\0\100\0\u9280\0\u92c0\0\u9300\0\100\0\u9340\0\100"+
    "\0\u9380";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\2"+
    "\1\21\1\2\1\22\1\23\12\2\1\24\3\2\1\25"+
    "\1\3\3\2\1\26\2\2\1\27\3\2\1\30\21\2"+
    "\116\0\1\31\101\0\1\32\100\0\1\33\76\0\1\34"+
    "\103\0\1\35\76\0\1\36\56\0\12\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\2\37\1\40\6\37"+
    "\1\47\5\37\1\0\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\37\1\61\1\62\2\37"+
    "\1\63\2\37\1\64\1\65\4\37\1\66\1\67\1\40"+
    "\1\37\1\70\1\37\45\0\1\71\52\0\1\72\137\0"+
    "\1\73\36\0\1\74\102\0\1\75\100\0\1\76\100\0"+
    "\1\77\55\0\40\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\12\37\26\102\1\100\1\101\27\102\1\0\3\102"+
    "\1\37\2\0\17\37\1\103\20\37\1\100\1\101\7\37"+
    "\1\104\1\105\16\37\1\0\4\37\2\0\16\37\1\106"+
    "\21\37\1\100\1\101\2\37\1\107\24\37\1\0\4\37"+
    "\2\0\13\37\1\110\23\37\1\111\1\100\1\101\1\37"+
    "\1\112\25\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\11\37\1\113\15\37\1\0\4\37\2\0\13\37\1\114"+
    "\24\37\1\100\1\101\1\37\1\115\25\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\1\37\1\116\2\37\1\117"+
    "\22\37\1\0\4\37\2\0\37\37\1\111\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\13\37\1\120\2\37\1\121"+
    "\1\122\20\37\1\100\1\101\1\37\1\123\5\37\1\124"+
    "\4\37\1\125\12\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\7\37\1\126\17\37\1\0\4\37\2\0\17\37"+
    "\1\127\20\37\1\100\1\101\3\37\1\130\23\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\4\37\1\131\22\37"+
    "\1\0\4\37\2\0\14\37\1\132\1\133\22\37\1\100"+
    "\1\101\5\37\1\134\17\37\1\135\1\37\1\0\4\37"+
    "\2\0\16\37\1\136\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\16\37\1\137\21\37\1\100\1\101\1\37"+
    "\1\140\2\37\1\141\22\37\1\0\4\37\2\0\16\37"+
    "\1\142\21\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\13\37\1\143\24\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\14\37\1\144\5\37\1\145"+
    "\4\37\1\0\4\37\2\0\16\37\1\146\7\37\1\147"+
    "\11\37\1\100\1\101\7\37\1\150\17\37\1\0\4\37"+
    "\2\0\26\37\1\147\11\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\22\37\1\145\4\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\2\37\1\151"+
    "\24\37\1\0\4\37\42\0\1\152\1\153\27\0\1\154"+
    "\2\0\1\154\3\0\40\37\1\152\1\155\27\37\1\154"+
    "\2\37\1\156\1\37\53\0\1\157\45\0\1\160\123\0"+
    "\1\161\57\0\1\162\77\0\1\163\54\0\40\164\1\100"+
    "\1\101\27\164\1\0\4\164\2\0\12\37\26\102\1\165"+
    "\1\166\27\102\1\0\3\102\1\37\2\0\40\37\1\100"+
    "\1\101\1\37\1\167\25\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\4\37\1\170\22\37\1\0\4\37\2\0"+
    "\17\37\1\171\20\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\172\1\173\5\37\1\174\21\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\37\1\175\25\37"+
    "\1\0\4\37\2\0\17\37\1\176\20\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\35\37\1\177\2\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\17\37\1\200\20\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\1\201\26\37\1\0\4\37\2\0\15\37\1\202"+
    "\22\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\24\37\1\203\2\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\5\37\1\204\15\37\1\205\3\37"+
    "\1\0\4\37\2\0\20\37\1\206\17\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\5\37"+
    "\1\207\21\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\5\37\1\210\1\37\1\211\17\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\37\1\212\25\37\1\0\4\37"+
    "\2\0\14\37\1\213\23\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\13\37\1\214\24\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\1\37\1\215"+
    "\25\37\1\0\4\37\2\0\40\37\1\100\1\101\4\37"+
    "\1\216\22\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\7\37\1\217\17\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\2\37\1\220\24\37\1\0\4\37\2\0\40\37"+
    "\1\221\1\222\27\37\1\0\4\37\2\0\15\37\1\223"+
    "\22\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\224\1\225\27\37\1\0\4\37\2\0\13\37\1\226"+
    "\24\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\24\37\1\227\2\37\1\0\4\37\2\0"+
    "\15\37\1\230\22\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\17\37\1\231\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\232\26\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\233\6\37\1\234"+
    "\17\37\1\0\4\37\2\0\40\37\1\100\1\101\10\37"+
    "\1\235\16\37\1\0\4\37\2\0\17\37\1\236\20\37"+
    "\1\100\1\101\3\37\1\237\23\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\4\37\1\240\22\37\1\0\4\37"+
    "\2\0\21\37\1\241\16\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\20\37\1\242\17\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\31\37\1\243\6\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\2\37"+
    "\1\244\24\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\3\37\1\245\23\37\1\0\4\37\42\0\1\152\1\153"+
    "\76\0\1\152\1\153\27\0\1\246\2\0\1\246\3\0"+
    "\40\164\1\152\1\155\27\164\1\0\4\164\2\0\40\37"+
    "\1\152\1\155\27\37\1\246\2\37\1\247\1\37\45\0"+
    "\1\250\103\0\1\251\47\0\1\252\104\0\1\253\10\0"+
    "\1\254\66\0\1\255\10\0\1\256\42\0\40\164\1\257"+
    "\30\164\1\0\4\164\2\0\40\164\1\165\1\166\27\164"+
    "\1\0\4\164\2\0\13\37\1\260\24\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\14\37\1\261\23\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\37\1\262\25\37\1\0\4\37\2\0\40\164\1\172"+
    "\1\173\27\164\1\0\4\164\2\0\40\37\1\100\1\101"+
    "\15\37\1\263\11\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\13\37\1\264\13\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\16\37\1\265\10\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\17\37\1\265\7\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\1\37\1\266\25\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\4\37\1\267\22\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\4\37\1\270"+
    "\22\37\1\0\4\37\2\0\40\37\1\100\1\101\2\37"+
    "\1\271\24\37\1\0\4\37\2\0\13\37\1\272\24\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\20\37\1\273"+
    "\17\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\2\37\1\274\24\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\11\37\1\275\15\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\15\37\1\276\11\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\2\37\1\277\24\37"+
    "\1\0\4\37\2\0\13\37\1\300\1\37\1\301\22\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\20\37\1\302"+
    "\17\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\3\37\1\303\23\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\304\26\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\5\37\1\305\21\37\1\0\4\37"+
    "\2\0\40\37\1\306\1\307\27\37\1\0\4\37\2\0"+
    "\13\37\1\310\24\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\164\1\221\1\222\27\164\1\0\4\164\2\0"+
    "\40\37\1\100\1\101\4\37\1\311\22\37\1\0\4\37"+
    "\2\0\40\164\1\224\1\225\27\164\1\0\4\164\2\0"+
    "\40\37\1\100\1\101\10\37\1\312\16\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\2\37\1\313\24\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\4\37\1\314\22\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\5\37\1\315"+
    "\21\37\1\0\4\37\2\0\40\37\1\100\1\101\14\37"+
    "\1\316\12\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\14\37\1\317\12\37\1\0\4\37\2\0\13\37\1\320"+
    "\24\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\4\37\1\321\22\37\1\0\4\37\2\0"+
    "\13\37\1\322\24\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\3\37\1\323\23\37\1\0"+
    "\4\37\2\0\20\37\1\324\17\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\30\37\1\325\7\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\16\37\1\326\21\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\33\37\1\327\4\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\1\37\1\327\25\37\1\0\4\37\2\0\20\37"+
    "\1\330\17\37\1\100\1\101\27\37\1\0\4\37\42\0"+
    "\1\152\1\153\27\0\1\331\2\0\1\331\3\0\40\37"+
    "\1\152\1\155\27\37\1\331\2\37\1\332\1\37\44\0"+
    "\1\333\100\0\1\334\61\0\1\335\105\0\1\336\71\0"+
    "\1\337\105\0\1\340\44\0\23\37\1\341\14\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\37\1\342\25\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\10\37\1\343\16\37\1\0\4\37\2\0\17\37"+
    "\1\344\20\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\16\37\1\345\21\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\346\1\347\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\350\26\37\1\0\4\37\2\0"+
    "\16\37\1\351\21\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\16\37\1\352\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\37\1\353\25\37"+
    "\1\0\4\37\2\0\40\37\1\354\1\355\27\37\1\0"+
    "\4\37\2\0\16\37\1\356\21\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\7\37\1\357"+
    "\17\37\1\0\4\37\2\0\16\37\1\360\21\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\16\37\1\361\21\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\5\37\1\362\21\37\1\0\4\37\2\0\17\37"+
    "\1\363\20\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\37\1\364\25\37\1\0\4\37"+
    "\2\0\17\37\1\365\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\37\1\366\25\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\16\37\1\367"+
    "\10\37\1\0\4\37\2\0\40\37\1\100\1\101\4\37"+
    "\1\370\22\37\1\0\4\37\2\0\40\164\1\306\1\307"+
    "\27\164\1\0\4\164\2\0\17\37\1\371\20\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\372\26\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\37\1\373\25\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\4\37\1\374\22\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\6\37\1\375\20\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\2\37\1\376\24\37\1\0\4\37"+
    "\2\0\13\37\1\377\24\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\37\1\u0100\25\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\3\37\1\u0101"+
    "\23\37\1\0\4\37\2\0\14\37\1\u0102\23\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\5\37\1\u0103\21\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\12\37\1\u0104\14\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\1\37\1\u0105\25\37\1\0\4\37\2\0"+
    "\33\37\1\u0105\4\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\14\37\1\u0106\23\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\u0107\1\u0108\27\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\4\37\1\u0109\22\37\1\0"+
    "\4\37\14\0\1\u010a\25\0\1\152\1\153\27\0\1\u010b"+
    "\2\0\1\u010b\3\0\12\37\1\u010c\25\37\1\152\1\155"+
    "\27\37\1\u010b\2\37\1\u010d\1\37\22\0\1\u010e\105\0"+
    "\1\u010f\75\0\1\u0110\101\0\1\u0111\75\0\1\u0112\53\0"+
    "\20\37\1\u0113\17\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\13\37\1\u0114\24\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\13\37\1\u0115\24\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\1\37\1\u0116"+
    "\25\37\1\0\4\37\2\0\23\37\1\u0117\14\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\164\1\346\1\347"+
    "\27\164\1\0\4\164\2\0\40\37\1\100\1\101\14\37"+
    "\1\u0118\12\37\1\0\4\37\2\0\14\37\1\u0119\23\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\u011a"+
    "\1\u011b\27\37\1\0\4\37\2\0\17\37\1\u011c\20\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\164\1\354"+
    "\1\355\27\164\1\0\4\164\2\0\23\37\1\u011d\14\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\16\37\1\u011e"+
    "\21\37\1\100\1\101\27\37\1\0\4\37\2\0\23\37"+
    "\1\u011f\14\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\37\1\u0120\1\u0121\27\37\1\0\4\37\2\0\14\37"+
    "\1\u0122\23\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\23\37\1\u0123\14\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\14\37\1\u0124\23\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\16\37\1\u0125\21\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\u0126\1\u0127\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\15\37\1\u0128\11\37"+
    "\1\0\4\37\2\0\14\37\1\u0129\23\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\4\37"+
    "\1\u012a\22\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\37\1\u012b\25\37\1\0\4\37\2\0\14\37\1\u012c"+
    "\23\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\1\37\1\u012d\25\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\4\37\1\u012e\22\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\7\37\1\u012f\17\37\1\0"+
    "\4\37\2\0\23\37\1\u0130\14\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\17\37\1\u0131\20\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\u0132\1\u0133\27\37"+
    "\1\0\4\37\2\0\23\37\1\u0134\14\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\1\37"+
    "\1\u0135\25\37\1\0\4\37\2\0\16\37\1\u0136\21\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\u0137"+
    "\1\u0138\27\37\1\0\4\37\2\0\40\37\1\u0139\1\u013a"+
    "\27\37\1\0\4\37\2\0\40\164\1\u0107\1\u0108\27\164"+
    "\1\0\4\164\2\0\40\37\1\100\1\101\6\37\1\u013b"+
    "\20\37\1\0\4\37\73\0\1\u013c\2\0\1\u013c\43\0"+
    "\1\152\1\153\27\0\1\u010b\2\0\1\u010b\3\0\40\37"+
    "\1\100\1\101\27\37\1\u013c\2\37\1\u013d\1\37\2\0"+
    "\40\37\1\152\1\155\27\37\1\u010b\2\37\1\u010d\1\37"+
    "\23\0\1\u013e\114\0\1\u013f\62\0\1\u0140\114\0\1\u0141"+
    "\41\0\40\37\1\100\1\101\1\37\1\u0142\25\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\u0143\26\37\1\0"+
    "\4\37\2\0\17\37\1\u0144\20\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\23\37\1\u0145\14\37\1\u0146\1\u0147"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\6\37"+
    "\1\u0148\2\37\1\u0149\15\37\1\0\4\37\2\0\13\37"+
    "\1\u014a\24\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\37\1\u014b\25\37\1\0\4\37"+
    "\2\0\40\164\1\u011a\1\u011b\27\164\1\0\4\164\2\0"+
    "\40\37\1\100\1\101\4\37\1\u014c\22\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\13\37\1\u014d\13\37\1\0"+
    "\4\37\2\0\40\37\1\u014e\1\u014f\27\37\1\0\4\37"+
    "\2\0\20\37\1\u0150\17\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\164\1\u0120\1\u0121\27\164\1\0\4\164"+
    "\2\0\13\37\1\u0151\24\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\2\37\1\u0152\24\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\1\u0153\26\37"+
    "\1\0\4\37\2\0\40\37\1\u0154\1\u0155\27\37\1\0"+
    "\4\37\2\0\40\164\1\u0126\1\u0127\27\164\1\0\4\164"+
    "\2\0\16\37\1\u0156\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\13\37\1\u0157\24\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\16\37\1\u0158\21\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\u0159\1\u015a\27\37"+
    "\1\0\4\37\2\0\40\37\1\u015b\1\u015c\27\37\1\0"+
    "\4\37\2\0\17\37\1\u015d\20\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\1\u015e\26\37"+
    "\1\0\4\37\2\0\13\37\1\u015f\24\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\1\u0160"+
    "\4\37\1\u0161\21\37\1\0\4\37\2\0\16\37\1\u0162"+
    "\21\37\1\100\1\101\27\37\1\0\4\37\2\0\40\164"+
    "\1\u0132\1\u0133\27\164\1\0\4\164\2\0\40\37\1\100"+
    "\1\101\2\37\1\u0163\24\37\1\0\4\37\2\0\20\37"+
    "\1\u0164\17\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\17\37\1\u0165\20\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\164\1\u0137\1\u0138\27\164\1\0\4\164\2\0"+
    "\40\164\1\u0139\1\u013a\27\164\1\0\4\164\2\0\40\37"+
    "\1\100\1\101\4\37\1\u0166\22\37\1\0\4\37\73\0"+
    "\1\u0167\2\0\1\u0167\3\0\40\37\1\100\1\101\27\37"+
    "\1\u0167\2\37\1\u0168\1\37\31\0\1\u0169\101\0\1\u016a"+
    "\75\0\1\u016b\101\0\1\u016c\46\0\40\37\1\100\1\101"+
    "\23\37\1\u016d\3\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\4\37\1\u016e\22\37\1\0\4\37\2\0\23\37"+
    "\1\u016f\14\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\u0170\26\37\1\0\4\37\2\0"+
    "\40\164\1\u0146\1\u0147\27\164\1\0\4\164\2\0\16\37"+
    "\1\u0171\21\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\13\37\1\u0172\24\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\u0173\1\u0174\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\3\37\1\u0175\23\37\1\0\4\37"+
    "\2\0\15\37\1\u0176\22\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\4\37\1\u0177\22\37"+
    "\1\0\4\37\2\0\40\164\1\u014e\1\u014f\27\164\1\0"+
    "\4\164\2\0\40\37\1\100\1\101\1\37\1\u0178\25\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\3\37\1\u0179"+
    "\23\37\1\0\4\37\2\0\40\37\1\100\1\101\3\37"+
    "\1\u017a\23\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\4\37\1\u017b\22\37\1\0\4\37\2\0\40\164\1\u0154"+
    "\1\u0155\27\164\1\0\4\164\2\0\40\37\1\100\1\101"+
    "\23\37\1\u017c\3\37\1\0\4\37\2\0\17\37\1\u017d"+
    "\20\37\1\100\1\101\27\37\1\0\4\37\2\0\23\37"+
    "\1\u017e\14\37\1\u017f\1\u0180\27\37\1\0\4\37\2\0"+
    "\40\164\1\u0159\1\u015a\27\164\1\0\4\164\2\0\40\164"+
    "\1\u015b\1\u015c\27\164\1\0\4\164\2\0\15\37\1\u0181"+
    "\22\37\1\100\1\101\27\37\1\0\4\37\2\0\13\37"+
    "\1\u0182\24\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\17\37\1\u0183\20\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\17\37\1\u0184\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\16\37\1\u0185\21\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\u0186\1\u0187\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\3\37\1\u0188\23\37"+
    "\1\0\4\37\2\0\17\37\1\u0189\20\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\15\37\1\u018a\22\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\u018b\26\37\1\0\4\37\14\0\1\u018c\65\0\12\37"+
    "\1\u018d\25\37\1\100\1\101\27\37\1\0\4\37\23\0"+
    "\1\u018e\111\0\1\u018f\65\0\1\u0190\111\0\1\u0191\44\0"+
    "\20\37\1\u0192\17\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\16\37\1\u0193\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\u0194\26\37\1\0"+
    "\4\37\2\0\13\37\1\u0195\24\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\17\37\1\u0196\20\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\3\37"+
    "\1\u0197\23\37\1\0\4\37\2\0\40\164\1\u0173\1\u0174"+
    "\27\164\1\0\4\164\2\0\40\37\1\u0198\1\u0199\27\37"+
    "\1\0\4\37\2\0\16\37\1\u019a\21\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\3\37"+
    "\1\u019b\23\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\23\37\1\u019c\3\37\1\0\4\37\2\0\40\37\1\u019d"+
    "\1\u019e\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\2\37\1\u019f\24\37\1\0\4\37\2\0\13\37\1\u01a0"+
    "\24\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\u01a1\1\u01a2\27\37\1\0\4\37\2\0\23\37\1\u01a3"+
    "\14\37\1\100\1\101\27\37\1\0\4\37\2\0\13\37"+
    "\1\u01a4\1\u01a5\23\37\1\100\1\101\1\u01a6\26\37\1\0"+
    "\4\37\2\0\40\164\1\u017f\1\u0180\27\164\1\0\4\164"+
    "\2\0\13\37\1\u01a7\24\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\17\37\1\u01a8\20\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\4\37\1\u01a9"+
    "\22\37\1\0\4\37\2\0\40\37\1\100\1\101\1\37"+
    "\1\u01aa\25\37\1\0\4\37\2\0\15\37\1\u01ab\22\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\164\1\u0186"+
    "\1\u0187\27\164\1\0\4\164\2\0\40\37\1\100\1\101"+
    "\2\37\1\u01ac\24\37\1\0\4\37\2\0\16\37\1\u01ad"+
    "\21\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\u01ae\1\u01af\27\37\1\0\4\37\2\0\13\37\1\u01b0"+
    "\24\37\1\100\1\101\27\37\1\0\4\37\73\0\1\u01b1"+
    "\2\0\1\u01b1\3\0\40\37\1\100\1\101\27\37\1\u01b1"+
    "\2\37\1\u01b2\1\37\32\0\1\u01b3\73\0\1\u01b4\103\0"+
    "\1\u01b5\73\0\1\u01b6\53\0\16\37\1\u01b7\21\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\14\37\1\u01b8\23\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\16\37\1\u01b9"+
    "\21\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\5\37\1\u01ba\21\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\5\37\1\u01bb\21\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\3\37\1\u01bc\23\37\1\0"+
    "\4\37\2\0\40\164\1\u0198\1\u0199\27\164\1\0\4\164"+
    "\2\0\40\37\1\u01bd\1\u01be\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\4\37\1\u01bf\22\37\1\0\4\37"+
    "\2\0\20\37\1\u01c0\17\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\164\1\u019d\1\u019e\27\164\1\0\4\164"+
    "\2\0\13\37\1\u01c1\24\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\7\37\1\u01c2\17\37"+
    "\1\0\4\37\2\0\40\164\1\u01a1\1\u01a2\27\164\1\0"+
    "\4\164\2\0\40\37\1\100\1\101\1\u01c3\1\37\1\u01c4"+
    "\3\37\1\u01c5\20\37\1\0\4\37\2\0\14\37\1\u01c6"+
    "\23\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\2\37\1\u01c7\24\37\1\0\4\37\2\0"+
    "\17\37\1\u01c8\20\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\u01c9\1\u01ca\27\37\1\0\4\37\2\0"+
    "\23\37\1\u01cb\14\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\16\37\1\u01cc\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\13\37\1\u01cd\24\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\4\37\1\u01ce"+
    "\22\37\1\0\4\37\2\0\13\37\1\u01cf\24\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\3\37\1\u01d0\23\37\1\0\4\37\2\0\40\164\1\u01ae"+
    "\1\u01af\27\164\1\0\4\164\2\0\17\37\1\u01d1\20\37"+
    "\1\100\1\101\27\37\1\0\4\37\73\0\1\u01d2\2\0"+
    "\1\u01d2\3\0\40\37\1\100\1\101\27\37\1\u01d2\2\37"+
    "\1\u01d3\1\37\33\0\1\u01d4\76\0\1\u01d5\100\0\1\u01d6"+
    "\76\0\1\u01d7\47\0\40\37\1\u01d8\1\u01d9\27\37\1\0"+
    "\4\37\2\0\40\37\1\u01da\1\u01db\27\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\5\37\1\u01dc\21\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\11\37\1\u01dd\15\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\2\37\1\u01de"+
    "\24\37\1\0\4\37\2\0\40\37\1\100\1\101\12\37"+
    "\1\u01df\14\37\1\0\4\37\2\0\40\164\1\u01bd\1\u01be"+
    "\27\164\1\0\4\164\2\0\40\37\1\100\1\101\15\37"+
    "\1\u01e0\11\37\1\0\4\37\2\0\16\37\1\u01e1\21\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\17\37\1\u01e2"+
    "\20\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\1\37\1\u01e3\25\37\1\0\4\37\2\0"+
    "\16\37\1\u01e4\21\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\3\37\1\u01e5\23\37\1\0"+
    "\4\37\2\0\16\37\1\u01e6\21\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\20\37\1\u01e7\17\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\1\37"+
    "\1\u01e8\25\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\37\1\u01e9\25\37\1\0\4\37\2\0\40\164\1\u01c9"+
    "\1\u01ca\27\164\1\0\4\164\2\0\40\37\1\100\1\101"+
    "\1\u01ea\1\37\1\u01eb\3\37\1\u01ec\20\37\1\0\4\37"+
    "\2\0\40\37\1\u01ed\1\u01ee\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\u01ef\26\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\6\37\1\u01f0\20\37\1\0\4\37"+
    "\2\0\17\37\1\u01f1\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\23\37\1\u01f2\14\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\u01f3\1\u01f4\27\37\1\0"+
    "\4\37\42\0\1\u01f5\1\u01d2\36\0\40\37\1\u01f5\1\u01f6"+
    "\27\37\1\0\4\37\34\0\1\u01f7\104\0\1\u01f8\72\0"+
    "\1\u01f9\104\0\1\u01fa\40\0\40\164\1\u01d8\1\u01d9\27\164"+
    "\1\0\4\164\2\0\40\164\1\u01da\1\u01db\27\164\1\0"+
    "\4\164\2\0\40\37\1\100\1\101\11\37\1\u01fb\15\37"+
    "\1\0\4\37\2\0\16\37\1\u01fc\21\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\7\37"+
    "\1\u01fd\17\37\1\0\4\37\2\0\16\37\1\u01fe\21\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\7\37\1\u01ff\17\37\1\0\4\37\2\0\40\37"+
    "\1\u0200\1\u0201\27\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\4\37\1\u0202\22\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\3\37\1\u0203\23\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\5\37\1\u0204\21\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\2\37\1\u0205\24\37\1\0"+
    "\4\37\2\0\17\37\1\u0206\20\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\4\37\1\u0207"+
    "\22\37\1\0\4\37\2\0\40\37\1\100\1\101\13\37"+
    "\1\u0208\13\37\1\0\4\37\2\0\13\37\1\u0209\24\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\16\37\1\u020a"+
    "\21\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\3\37\1\u020b\23\37\1\0\4\37\2\0"+
    "\16\37\1\u020c\21\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\164\1\u01ed\1\u01ee\27\164\1\0\4\164\2\0"+
    "\40\37\1\100\1\101\4\37\1\u020d\22\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\4\37\1\u020e\22\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\4\37\1\u020f\22\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\1\u0210\5\37"+
    "\1\u0211\20\37\1\0\4\37\2\0\40\164\1\u01f3\1\u01f4"+
    "\27\164\1\0\4\164\2\0\40\164\1\u01f5\1\u01f6\27\164"+
    "\1\0\4\164\35\0\1\u0212\70\0\1\u0213\106\0\1\u0214"+
    "\70\0\1\u0215\53\0\16\37\1\u0216\21\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\u0217\1\u0218\27\37"+
    "\1\0\4\37\2\0\13\37\1\u0219\24\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\17\37\1\u021a\20\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\1\37\1\u021b\25\37\1\0\4\37\2\0\40\164\1\u0200"+
    "\1\u0201\27\164\1\0\4\164\2\0\16\37\1\u021c\21\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\23\37\1\u021d"+
    "\14\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\11\37\1\u021e\15\37\1\0\4\37\2\0"+
    "\13\37\1\u021f\24\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\5\37\1\u0220\21\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\10\37\1\u0221\16\37"+
    "\1\0\4\37\2\0\16\37\1\u0222\21\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\1\u0223"+
    "\26\37\1\0\4\37\2\0\40\37\1\100\1\101\5\37"+
    "\1\u0224\21\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\2\37\1\u0225\24\37\1\0\4\37\2\0\17\37\1\u0226"+
    "\20\37\1\100\1\101\27\37\1\0\4\37\2\0\16\37"+
    "\1\u0227\21\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\u0228\26\37\1\0\4\37\2\0"+
    "\16\37\1\u0229\21\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\16\37\1\u022a\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\16\37\1\u022b\21\37\1\100\1\101\27\37"+
    "\1\0\4\37\26\0\1\u022c\77\0\1\u022d\53\0\14\37"+
    "\1\u022e\23\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\164\1\u0217\1\u0218\27\164\1\0\4\164\2\0\17\37"+
    "\1\u022f\20\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\15\37\1\u0230\22\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\u0231\1\u0232\27\37\1\0\4\37\2\0"+
    "\40\37\1\u0233\1\u0234\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\2\37\1\u0235\24\37\1\0\4\37\2\0"+
    "\16\37\1\u0236\21\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\17\37\1\u0237\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\2\37\1\u0238\24\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\2\37\1\u0239"+
    "\24\37\1\0\4\37\2\0\40\37\1\u023a\1\u023b\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\4\37\1\u023c"+
    "\22\37\1\0\4\37\2\0\40\37\1\100\1\101\11\37"+
    "\1\u023d\15\37\1\0\4\37\2\0\13\37\1\u023e\24\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\5\37\1\u023f\21\37\1\0\4\37\2\0\14\37"+
    "\1\u0240\23\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\13\37\1\u0241\24\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\37\1\u0242\1\u0243\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\5\37\1\u0244\21\37\1\0\4\37"+
    "\2\0\17\37\1\u0245\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\1\37\1\u0246\25\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\4\37\1\u0247"+
    "\22\37\1\0\4\37\2\0\40\37\1\u0248\1\u0249\27\37"+
    "\1\0\4\37\2\0\40\164\1\u0231\1\u0232\27\164\1\0"+
    "\4\164\2\0\40\164\1\u0233\1\u0234\27\164\1\0\4\164"+
    "\2\0\40\37\1\100\1\101\3\37\1\u024a\23\37\1\0"+
    "\4\37\2\0\14\37\1\u024b\23\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\4\37\1\u024c"+
    "\22\37\1\0\4\37\2\0\40\37\1\100\1\101\7\37"+
    "\1\u024d\17\37\1\0\4\37\2\0\16\37\1\u024e\21\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\164\1\u023a"+
    "\1\u023b\27\164\1\0\4\164\2\0\16\37\1\u024f\21\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\16\37\1\u0250"+
    "\21\37\1\100\1\101\27\37\1\0\4\37\2\0\17\37"+
    "\1\u0251\20\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\2\37\1\u0252\24\37\1\0\4\37"+
    "\2\0\40\37\1\u0253\1\u0254\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\u0255\26\37\1\0\4\37\2\0"+
    "\40\164\1\u0242\1\u0243\27\164\1\0\4\164\2\0\40\37"+
    "\1\100\1\101\11\37\1\u0256\15\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\5\37\1\u0257\21\37\1\0\4\37"+
    "\2\0\14\37\1\u0258\23\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\16\37\1\u0259\21\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\164\1\u0248\1\u0249\27\164\1\0"+
    "\4\164\2\0\40\37\1\100\1\101\2\37\1\u025a\24\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\1\37\1\u025b"+
    "\25\37\1\0\4\37\2\0\16\37\1\u025c\21\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\13\37\1\u025d\24\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\u025e"+
    "\1\u025f\27\37\1\0\4\37\2\0\14\37\1\u0260\23\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\14\37\1\u0261"+
    "\23\37\1\100\1\101\27\37\1\0\4\37\2\0\40\37"+
    "\1\100\1\101\4\37\1\u0262\22\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\7\37\1\u0263\17\37\1\0\4\37"+
    "\2\0\40\164\1\u0253\1\u0254\27\164\1\0\4\164\2\0"+
    "\40\37\1\100\1\101\4\37\1\u0264\22\37\1\0\4\37"+
    "\2\0\16\37\1\u0265\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\2\37\1\u0266\24\37"+
    "\1\0\4\37\2\0\20\37\1\u0267\17\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\u0268\1\u0269\27\37"+
    "\1\0\4\37\2\0\13\37\1\u026a\24\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\14\37\1\u026b\23\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\37\1\u026c\1\u026d"+
    "\27\37\1\0\4\37\2\0\17\37\1\u026e\20\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\40\164\1\u025e\1\u025f"+
    "\27\164\1\0\4\164\2\0\40\37\1\u026f\1\u0270\27\37"+
    "\1\0\4\37\2\0\40\37\1\100\1\101\1\37\1\u0271"+
    "\25\37\1\0\4\37\2\0\16\37\1\u0272\21\37\1\100"+
    "\1\101\27\37\1\0\4\37\2\0\13\37\1\u0273\24\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\16\37\1\u0274"+
    "\21\37\1\100\1\101\27\37\1\0\4\37\2\0\14\37"+
    "\1\u0275\23\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\7\37\1\u0276\17\37\1\0\4\37"+
    "\2\0\40\37\1\100\1\101\1\37\1\u0277\25\37\1\0"+
    "\4\37\2\0\40\164\1\u0268\1\u0269\27\164\1\0\4\164"+
    "\2\0\17\37\1\u0278\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\20\37\1\u0279\17\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\164\1\u026c\1\u026d\27\164\1\0"+
    "\4\164\2\0\40\37\1\100\1\101\4\37\1\u027a\22\37"+
    "\1\0\4\37\2\0\40\164\1\u026f\1\u0270\27\164\1\0"+
    "\4\164\2\0\14\37\1\u027b\23\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\40\37\1\u027c\1\u027d\27\37\1\0"+
    "\4\37\2\0\17\37\1\u027e\20\37\1\100\1\101\27\37"+
    "\1\0\4\37\2\0\14\37\1\u027f\23\37\1\100\1\101"+
    "\27\37\1\0\4\37\2\0\40\37\1\100\1\101\1\37"+
    "\1\u0280\25\37\1\0\4\37\2\0\13\37\1\u0281\24\37"+
    "\1\100\1\101\27\37\1\0\4\37\2\0\40\37\1\u0282"+
    "\1\u0283\27\37\1\0\4\37\2\0\40\37\1\100\1\101"+
    "\4\37\1\u0284\22\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\1\37\1\u0285\25\37\1\0\4\37\2\0\16\37"+
    "\1\u0286\21\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\20\37\1\u0287\17\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\40\164\1\u027c\1\u027d\27\164\1\0\4\164\2\0"+
    "\40\37\1\100\1\101\4\37\1\u0288\22\37\1\0\4\37"+
    "\2\0\40\37\1\u0289\1\u028a\27\37\1\0\4\37\2\0"+
    "\14\37\1\u028b\23\37\1\100\1\101\27\37\1\0\4\37"+
    "\2\0\17\37\1\u028c\20\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\164\1\u0282\1\u0283\27\164\1\0\4\164"+
    "\2\0\16\37\1\u028d\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\u028e\1\u028f\27\37\1\0\4\37"+
    "\2\0\40\37\1\u0290\1\u0291\27\37\1\0\4\37\2\0"+
    "\40\37\1\100\1\101\1\37\1\u0292\25\37\1\0\4\37"+
    "\2\0\16\37\1\u0293\21\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\164\1\u0289\1\u028a\27\164\1\0\4\164"+
    "\2\0\20\37\1\u0294\17\37\1\100\1\101\27\37\1\0"+
    "\4\37\2\0\40\37\1\100\1\101\4\37\1\u0295\22\37"+
    "\1\0\4\37\2\0\40\37\1\u0296\1\u0297\27\37\1\0"+
    "\4\37\2\0\40\164\1\u028e\1\u028f\27\164\1\0\4\164"+
    "\2\0\40\164\1\u0290\1\u0291\27\164\1\0\4\164\2\0"+
    "\40\37\1\u0298\1\u0299\27\37\1\0\4\37\2\0\40\37"+
    "\1\u029a\1\u029b\27\37\1\0\4\37\2\0\40\37\1\100"+
    "\1\101\1\37\1\u029c\25\37\1\0\4\37\2\0\16\37"+
    "\1\u029d\21\37\1\100\1\101\27\37\1\0\4\37\2\0"+
    "\40\164\1\u0296\1\u0297\27\164\1\0\4\164\2\0\40\164"+
    "\1\u0298\1\u0299\27\164\1\0\4\164\2\0\40\164\1\u029a"+
    "\1\u029b\27\164\1\0\4\164\2\0\40\37\1\u029e\1\u029f"+
    "\27\37\1\0\4\37\2\0\40\37\1\u02a0\1\u02a1\27\37"+
    "\1\0\4\37\2\0\40\164\1\u029e\1\u029f\27\164\1\0"+
    "\4\164\2\0\40\164\1\u02a0\1\u02a1\27\164\1\0\4\164";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\15\11\12\1\2\0\2\11\37\0\2\11\2\0"+
    "\1\11\51\0\1\11\12\0\1\11\4\0\1\11\26\0"+
    "\1\11\2\0\1\11\24\0\1\11\5\0\1\11\26\0"+
    "\1\11\25\0\1\11\11\0\1\11\5\0\1\11\32\0"+
    "\1\11\6\0\1\11\13\0\1\11\5\0\1\11\5\0"+
    "\1\11\13\0\1\11\4\0\1\11\1\0\1\11\14\0"+
    "\1\11\7\0\1\11\5\0\1\11\4\0\1\11\1\0"+
    "\1\11\27\0\1\11\13\0\1\11\6\0\1\11\21\0"+
    "\1\11\4\0\1\11\3\0\1\11\14\0\1\11\16\0"+
    "\1\11\13\0\1\11\16\0\1\11\1\0\1\11\22\0"+
    "\1\11\5\0\1\11\1\0\1\11\1\0\4\1\5\0"+
    "\1\11\22\0\1\11\1\0\1\11\1\0\1\11\24\0"+
    "\2\11\3\0\1\11\1\0\1\11\6\0\1\11\7\0"+
    "\1\11\5\0\1\11\12\0\1\11\12\0\1\11\11\0"+
    "\1\11\3\0\1\11\2\0\1\11\14\0\1\11\5\0"+
    "\1\11\6\0\1\11\4\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de los operadores invocados
    //ArrayList<Token> listadoOperadoresInvocados = new ArrayList();
    //ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

     //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
     private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
          //creamos un  token auxiliar
          Token tokenAux = new Token(tipoToken, lexema, fila, columna);
          System.out.println("\nFila : "+fila+" Columna: "+columna+" Token de tipo: "+tipoToken+" Lexema: "+lexema);
          //Agregamos al listado
          //listadoOperadoresInvocados.add(tokenAux);
          //retornamos el token aux como simbolo
          return new Symbol(tipo, tokenAux);
     }

     //Agregamos un token al array list de errores lexicos
     /*
     private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
          //creamos un  token auxiliar
          TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
          //Agregamos al listado
          listadoErroresLexicos.add(tokenErrorAux);
     }

     //Obtenemos el arrLust de los errores lexicos
     public ArrayList<TokenError> obtenerListadoErroresLexicos(){
          return listadoErroresLexicos;
     }

     //Obtenemos el lstado de los tokens
     public ArrayList<Token> obtenerListadoTokens(){
          return listadoOperadoresInvocados;
     }*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 406) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext());
            } 
            // fall through
          case 87: break;
          case 2: 
            { 
            } 
            // fall through
          case 88: break;
          case 3: 
            { return retornarSimbolo(LLAVES_INICIO, "LLAVES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 89: break;
          case 4: 
            { return retornarSimbolo(LLAVES_FIN, "LLAVES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 90: break;
          case 5: 
            { return retornarSimbolo(CORCHETES_INICIO, "CORCHETES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 91: break;
          case 6: 
            { return retornarSimbolo(CORCHETES_FIN, "CORCHETES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 92: break;
          case 7: 
            { return retornarSimbolo(MENOR, "MENOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 93: break;
          case 8: 
            { return retornarSimbolo(MAYOR, "MAYOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 94: break;
          case 9: 
            { return retornarSimbolo(EXCLAMACION, "EXCLAMACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 95: break;
          case 10: 
            { return retornarSimbolo(DOS_PUNTOS, "DOS_PUNTOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 96: break;
          case 11: 
            { return retornarSimbolo(COMA, "COMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 97: break;
          case 12: 
            { return retornarSimbolo(IGUAL, "IGUAL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 98: break;
          case 13: 
            { return retornarSimbolo(MENOS, "MENOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 99: break;
          case 14: 
            { return retornarSimbolo(OR, "OR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 100: break;
          case 15: 
            { return retornarSimbolo(TO, "TO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 101: break;
          case 16: 
            { return retornarSimbolo(AND, "AND", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 102: break;
          case 17: 
            { return retornarSimbolo(NOT, "NOT", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 103: break;
          case 18: 
            { if(yytext().replaceAll("\"", "").trim().startsWith("|") || yytext().replaceAll("\"", "").trim().endsWith("|") ){
                    return retornarSimbolo(VALOR_PASSWORD, "VALOR_PASSWORD", yytext(), yyline + 1, yycolumn + 1); 
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 104: break;
          case 19: 
            { return retornarSimbolo(DIGITO, "DIGITO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 105: break;
          case 20: 
            { return retornarSimbolo(VALOR_ID, "VALOR_ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 106: break;
          case 21: 
            { return retornarSimbolo(NO, "NO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 107: break;
          case 22: 
            { return retornarSimbolo(SI, "SI", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 108: break;
          case 23: 
            { return retornarSimbolo(ID, "ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 109: break;
          case 24: 
            { return retornarSimbolo(FORM, "FORM", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 110: break;
          case 25: 
            { if(yytext().replaceAll("\"", "").trim().endsWith("|") || yytext().replaceAll("\"", "").trim().startsWith("|") ){
                    return retornarSimbolo(VALOR_TEXTO_VISIBLE_CON_ESPACIO, "VALOR_TEXTO_VISIBLE_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1); 
               }else if(yytext().trim().contains(" ")){//si tiene espacios
                    return retornarSimbolo(VALOR_ITEMS_CON_ESPACIO, "VALOR_ITEMS_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 111: break;
          case 26: 
            { return retornarSimbolo(URL, "URL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 112: break;
          case 27: 
            { return retornarSimbolo(WHERE, "WHERE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 113: break;
          case 28: 
            { return retornarSimbolo(DARK, "DARK", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 114: break;
          case 29: 
            { return retornarSimbolo(TEMA, "TEMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 115: break;
          case 30: 
            { return retornarSimbolo(BLUE, "BLUE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 116: break;
          case 31: 
            { return retornarSimbolo(SELECT, "SELECT", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 117: break;
          case 32: 
            { return retornarSimbolo(RADIO, "RADIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 118: break;
          case 33: 
            { return retornarSimbolo(COMBO, "COMBO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 119: break;
          case 34: 
            { return retornarSimbolo(CLASE, "CLASE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 120: break;
          case 35: 
            { return retornarSimbolo(FILAS, "FILAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 121: break;
          case 36: 
            { return retornarSimbolo(WHITE, "WHITE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 122: break;
          case 37: 
            { return retornarSimbolo(BOTON, "BOTON", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 123: break;
          case 38: 
            { return retornarSimbolo(NOMBRE, "NOMBRE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 124: break;
          case 39: 
            { return retornarSimbolo(TITULO, "TITULO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 125: break;
          case 40: 
            { return retornarSimbolo(CENTRO, "CENTRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 126: break;
          case 41: 
            { return retornarSimbolo(INDICE, "INDICE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 127: break;
          case 42: 
            { return retornarSimbolo(IMAGEN, "IMAGEN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 128: break;
          case 43: 
            { return retornarSimbolo(DERECHA, "DERECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 129: break;
          case 44: 
            { return retornarSimbolo(USUARIO, "USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 130: break;
          case 45: 
            { return retornarSimbolo(FICHERO, "FICHERO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 131: break;
          case 46: 
            { return retornarSimbolo(OPCIONES, "OPCIONES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 132: break;
          case 47: 
            { return retornarSimbolo(COLUMNAS, "COLUMNAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 133: break;
          case 48: 
            { return retornarSimbolo(CHECKBOX, "CHECKBOX", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 134: break;
          case 49: 
            { return retornarSimbolo(PASSWORD, "PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 135: break;
          case 50: 
            { return retornarSimbolo(REQUERIDO, "REQUERIDO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 136: break;
          case 51: 
            { return retornarSimbolo(IZQUIERDA, "IZQUIERDA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 137: break;
          case 52: 
            { return retornarSimbolo(AREA_TEXTO, "AREA_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 138: break;
          case 53: 
            { return retornarSimbolo(ALINEACION, "ALINEACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 139: break;
          case 54: 
            { return retornarSimbolo(FORMULARIO, "FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 140: break;
          case 55: 
            { return retornarSimbolo(JUSTIFICAR, "JUSTIFICAR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 141: break;
          case 56: 
            { return retornarSimbolo(VALOR_FECHA, "VALOR_FECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 142: break;
          case 57: 
            { return retornarSimbolo(INICIO_SOLICITUD, "INICIO_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 143: break;
          case 58: 
            { return retornarSimbolo(INICIO_RESPUESTA, "INICIO_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 144: break;
          case 59: 
            { return retornarSimbolo(FIN_SOLICITUD, "FIN_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 145: break;
          case 60: 
            { return retornarSimbolo(FIN_RESPUESTA, "FIN_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 146: break;
          case 61: 
            { return retornarSimbolo(CAMPO_TEXTO, "CAMPO_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 147: break;
          case 62: 
            { return retornarSimbolo(INICIO_RESPUESTAS, "INICIO_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 148: break;
          case 63: 
            { return retornarSimbolo(FIN_RESPUESTAS, "FIN_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 149: break;
          case 64: 
            { return retornarSimbolo(NOMBRE_CAMPO, "NOMBRE_CAMPO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 150: break;
          case 65: 
            { return retornarSimbolo(INICIO_SOLICITUDES, "INICIO_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 151: break;
          case 66: 
            { return retornarSimbolo(FIN_SOLICITUDES, "FIN_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 152: break;
          case 67: 
            { return retornarSimbolo(TEXTO_VISIBLE, "TEXTO_VISIBLE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 153: break;
          case 68: 
            { return retornarSimbolo(CREAR_USUARIO, "CREAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 154: break;
          case 69: 
            { return retornarSimbolo(USUARIO_NUEVO, "USUARIO_NUEVO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 155: break;
          case 70: 
            { return retornarSimbolo(LOGIN_USUARIO, "LOGIN_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 156: break;
          case 71: 
            { return retornarSimbolo(NUEVO_PASSWORD, "NUEVO_PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 157: break;
          case 72: 
            { return retornarSimbolo(FECHA_CREACION, "FECHA_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 158: break;
          case 73: 
            { return retornarSimbolo(USUARIO_ANTIGUO, "USUARIO_ANTIGUO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 159: break;
          case 74: 
            { return retornarSimbolo(NUEVO_FORMULARIO, "NUEVO_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 160: break;
          case 75: 
            { return retornarSimbolo(ELIMINAR_USUARIO, "ELIMINAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 161: break;
          case 76: 
            { return retornarSimbolo(USUARIO_CREACION, "USUARIO_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 162: break;
          case 77: 
            { return retornarSimbolo(MODIFICAR_USUARIO, "MODIFICAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 163: break;
          case 78: 
            { return retornarSimbolo(AGREGAR_COMPONENTE, "AGREGAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 164: break;
          case 79: 
            { return retornarSimbolo(FECHA_MODIFICACION, "FECHA_MODIFICACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 165: break;
          case 80: 
            { return retornarSimbolo(ELIMINAR_COMPONENTE, "ELIMINAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 166: break;
          case 81: 
            { return retornarSimbolo(ELIMINAR_FORMULARIO, "ELIMINAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 167: break;
          case 82: 
            { return retornarSimbolo(CREDENCIALES_USUARIO, "CREDENCIALES_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 168: break;
          case 83: 
            { return retornarSimbolo(MODIFICAR_COMPONENTE, "MODIFICAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 169: break;
          case 84: 
            { return retornarSimbolo(MODIFICAR_FORMULARIO, "MODIFICAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 170: break;
          case 85: 
            { return retornarSimbolo(PARAMETROS_COMPONENTE, "PARAMETROS_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 171: break;
          case 86: 
            { return retornarSimbolo(PARAMETROS_FORMULARIO, "PARAMETROS_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerIndigo [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerIndigo scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerIndigo(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}