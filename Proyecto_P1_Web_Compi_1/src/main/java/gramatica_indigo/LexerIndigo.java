/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package gramatica_indigo;
import java_cup.runtime.*;
import clasesDAO.Token;
import static gramatica_indigo.sym.*;
import clasesDAO.TokenError;
import java.util.ArrayList;


/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>indigoJflex.jflex</tt>
 */
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\30\3\1\1\30\2\1\22\30\1\1\1\10\1\27\1\75\1\72"+
    "\7\75\1\12\1\70\2\75\12\74\1\11\1\75\1\6\1\75\1\7"+
    "\2\75\1\34\1\54\1\31\1\42\1\33\1\43\1\46\1\53\1\37"+
    "\1\67\1\55\1\44\1\41\1\45\1\40\1\47\1\65\1\32\1\36"+
    "\1\51\1\35\1\52\1\50\1\64\1\73\1\66\1\4\1\75\1\5"+
    "\1\75\1\15\1\75\1\56\1\61\1\21\1\24\1\25\1\26\1\73"+
    "\1\63\1\13\1\73\1\60\1\20\1\73\1\14\1\17\2\73\1\57"+
    "\1\16\1\22\1\23\1\73\1\62\3\73\1\2\1\75\1\3\1\75"+
    "\42\0\14\76\1\0\122\76\u0560\0\12\71\206\0\12\71\306\0\12\71"+
    "\u019c\0\12\71\166\0\12\71\166\0\12\71\166\0\12\71\166\0\12\71"+
    "\166\0\12\71\166\0\12\71\166\0\12\71\166\0\12\71\166\0\12\71"+
    "\140\0\12\71\166\0\12\71\106\0\12\71\u0116\0\12\71\106\0\12\71"+
    "\u0746\0\12\71\46\0\12\71\u012c\0\12\71\200\0\12\71\246\0\12\71"+
    "\6\0\12\71\266\0\12\71\126\0\12\71\206\0\12\71\6\0\12\71"+
    "\u03bf\0\1\75\u8606\0\12\71\u02a6\0\12\71\46\0\12\71\306\0\12\71"+
    "\26\0\12\71\126\0\12\71\u0196\0\12\71\u5316\0\12\71\u0586\0\12\71"+
    "\u0bbc\0\12\71\200\0\12\71\74\0\12\71\220\0\12\71\u0116\0\12\71"+
    "\u0156\0\12\71\166\0\12\71\u0176\0\12\71\146\0\12\71\146\0\12\71"+
    "\u01a6\0\12\71\u0366\0\12\71\u4e06\0\12\71\346\0\12\71\u6c74\0\62\71"+
    "\u1150\0\12\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\3\1\37\0\1\14\1\0"+
    "\1\15\51\0\1\16\6\0\1\17\22\0\1\20\2\0"+
    "\1\21\15\0\1\22\41\0\1\23\35\0\1\24\41\0"+
    "\1\25\3\0\1\26\15\0\1\27\3\0\1\30\3\0"+
    "\1\31\16\0\1\32\7\0\1\33\3\0\1\34\10\0"+
    "\1\35\13\0\1\36\1\0\1\37\15\0\1\40\4\0"+
    "\1\41\22\0\1\42\4\0\1\43\3\0\1\44\21\0"+
    "\1\45\4\0\1\46\12\0\1\47\12\0\1\50\13\0"+
    "\1\51\3\0\1\52\12\0\1\53\24\0\1\54\5\0"+
    "\1\55\1\0\1\56\12\0\1\57\7\0\1\60\1\61"+
    "\1\0\1\62\1\63\3\0\1\64\51\0\1\65\3\0"+
    "\1\66\1\67\1\0\1\70\11\0\1\71\6\0\1\72"+
    "\5\0\1\73\14\0\1\74\3\0\1\75\4\0\1\76"+
    "\6\0\1\77\12\0\1\100\3\0\1\101\5\0\1\102"+
    "\10\0\1\103\10\0\1\104\3\0\1\105\4\0\1\106"+
    "\1\0\1\107\5\0\1\110\1\0\1\111\1\0\1\112"+
    "\3\0\1\113\1\0\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[650];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\176\0\275\0\374\0\u013b"+
    "\0\u017a\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\77\0\u08dc"+
    "\0\77\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\77\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\77\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\77\0\u191a\0\u1959\0\77"+
    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\77\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\77"+
    "\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3"+
    "\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93"+
    "\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\77\0\u2c0d\0\u2c4c"+
    "\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234"+
    "\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\77"+
    "\0\u342c\0\u346b\0\u34aa\0\77\0\u34e9\0\u3528\0\u3567\0\u35a6"+
    "\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e"+
    "\0\u37dd\0\77\0\u381c\0\u385b\0\u389a\0\77\0\u38d9\0\u3918"+
    "\0\u3957\0\77\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1"+
    "\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9"+
    "\0\77\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82"+
    "\0\77\0\u3ec1\0\u3f00\0\u3f3f\0\77\0\u3f7e\0\u3fbd\0\u3ffc"+
    "\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\77\0\u4176\0\u41b5"+
    "\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad"+
    "\0\u43ec\0\77\0\u442b\0\77\0\u446a\0\u44a9\0\u44e8\0\u4527"+
    "\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f"+
    "\0\u475e\0\77\0\u479d\0\u47dc\0\u481b\0\u485a\0\77\0\u4899"+
    "\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91"+
    "\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89"+
    "\0\u4cc8\0\77\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\77\0\u4e03"+
    "\0\u4e42\0\u4e81\0\77\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc"+
    "\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4"+
    "\0\u51f3\0\u5232\0\u5271\0\u52b0\0\77\0\u52ef\0\u532e\0\u536d"+
    "\0\u53ac\0\77\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526"+
    "\0\u5565\0\u55a4\0\u55e3\0\u5622\0\77\0\u5661\0\u56a0\0\u56df"+
    "\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898\0\77"+
    "\0\u58d7\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51\0\u5a90"+
    "\0\u5acf\0\u5b0e\0\u5b4d\0\77\0\u5b8c\0\u5bcb\0\u5c0a\0\77"+
    "\0\u5c49\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02"+
    "\0\u5e41\0\u5e80\0\77\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb"+
    "\0\u5ffa\0\u6039\0\u6078\0\u60b7\0\u60f6\0\u6135\0\u6174\0\u61b3"+
    "\0\u61f2\0\u6231\0\u6270\0\u62af\0\u62ee\0\u632d\0\u636c\0\77"+
    "\0\u63ab\0\u63ea\0\u6429\0\u6468\0\u64a7\0\77\0\u64e6\0\77"+
    "\0\u6525\0\u6564\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de"+
    "\0\u671d\0\u675c\0\77\0\u679b\0\u67da\0\u6819\0\u6858\0\u6897"+
    "\0\u68d6\0\u6915\0\77\0\77\0\u6954\0\u6993\0\u69d2\0\u6a11"+
    "\0\u6a50\0\u6a8f\0\77\0\u6ace\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca"+
    "\0\u6c09\0\u6c48\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2"+
    "\0\u6e01\0\u6e40\0\u6e7f\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba"+
    "\0\u6ff9\0\u7038\0\u7077\0\u70b6\0\u70f5\0\u7134\0\u7173\0\u71b2"+
    "\0\u71f1\0\u7230\0\u726f\0\u72ae\0\u72ed\0\u732c\0\u736b\0\u73aa"+
    "\0\u73e9\0\u7428\0\u7467\0\u74a6\0\77\0\u74e5\0\u7524\0\u7563"+
    "\0\77\0\77\0\u75a2\0\77\0\u75e1\0\u7620\0\u765f\0\u769e"+
    "\0\u76dd\0\u771c\0\u775b\0\u779a\0\u77d9\0\77\0\u7818\0\u7857"+
    "\0\u7896\0\u78d5\0\u7914\0\u7953\0\77\0\u7992\0\u79d1\0\u7a10"+
    "\0\u7a4f\0\u7a8e\0\77\0\u7acd\0\u7b0c\0\u7b4b\0\u7b8a\0\u7bc9"+
    "\0\u7c08\0\u7c47\0\u7c86\0\u7cc5\0\u7d04\0\u7d43\0\u7d82\0\77"+
    "\0\u7dc1\0\u7e00\0\u7e3f\0\77\0\u7e7e\0\u7ebd\0\u7efc\0\u7f3b"+
    "\0\77\0\u7f7a\0\u7fb9\0\u7ff8\0\u8037\0\u8076\0\u80b5\0\77"+
    "\0\u80f4\0\u8133\0\u8172\0\u81b1\0\u81f0\0\u822f\0\u826e\0\u82ad"+
    "\0\u82ec\0\u832b\0\77\0\u836a\0\u83a9\0\u83e8\0\77\0\u8427"+
    "\0\u8466\0\u84a5\0\u84e4\0\u8523\0\77\0\u8562\0\u85a1\0\u85e0"+
    "\0\u861f\0\u865e\0\u869d\0\u86dc\0\u871b\0\77\0\u875a\0\u8799"+
    "\0\u87d8\0\u8817\0\u8856\0\u8895\0\u88d4\0\u8913\0\77\0\u8952"+
    "\0\u8991\0\u89d0\0\77\0\u8a0f\0\u8a4e\0\u8a8d\0\u8acc\0\77"+
    "\0\u8b0b\0\77\0\u8b4a\0\u8b89\0\u8bc8\0\u8c07\0\u8c46\0\77"+
    "\0\u8c85\0\77\0\u8cc4\0\77\0\u8d03\0\u8d42\0\u8d81\0\77"+
    "\0\u8dc0\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[650];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\12\2\1\16\1\17\47\2"+
    "\113\0\1\20\75\0\1\21\64\0\1\22\13\23\1\24"+
    "\6\23\1\25\2\23\1\0\1\22\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\23\1\43\1\44\1\45\2\23\1\46"+
    "\4\23\1\47\1\50\4\23\1\51\1\24\1\52\1\24"+
    "\1\23\1\53\1\23\1\54\13\0\1\55\77\0\1\56"+
    "\63\0\1\22\13\23\1\24\6\23\1\25\2\23\1\57"+
    "\1\22\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\23\1\43"+
    "\1\44\1\45\2\23\1\46\4\23\1\47\1\50\4\23"+
    "\1\51\1\24\1\52\1\24\1\23\1\53\1\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\40\23\1\0\4\23"+
    "\1\54\1\0\1\60\11\23\14\62\1\61\1\60\40\62"+
    "\1\0\3\62\1\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\25\23\1\63\12\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\64\1\65\1\66"+
    "\3\23\1\67\3\23\1\70\6\23\1\71\15\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\72\1\73\34\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\13\23\1\74\24\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\1\23\1\75"+
    "\11\23\1\76\1\23\1\77\22\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\23\1\100\3\23"+
    "\1\101\32\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\6\23\1\102\31\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\10\23\1\103\1\104"+
    "\2\23\1\105\20\23\1\106\2\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\16\23\1\107\21\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\7\23\1\110\30\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\2\23\1\111\1\112\21\23\1\63"+
    "\12\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\2\23\1\113\3\23\1\114\1\115\30\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\116\30\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\4\23\1\117\2\23\1\120\30\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\3\23"+
    "\1\121\34\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\22\23\1\122\7\23\1\123\5\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\124\3\23\1\125\31\23\1\0\4\23\1\54\1\0"+
    "\1\60\16\23\1\126\6\23\1\61\1\60\7\23\1\127"+
    "\3\23\1\130\24\23\1\0\4\23\1\54\1\0\1\60"+
    "\16\23\1\126\6\23\1\61\1\60\40\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\32\23\1\123"+
    "\5\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\4\23\1\131\33\23\1\0\4\23\1\54\1\0"+
    "\1\132\25\0\1\133\1\132\40\0\1\134\2\0\1\134"+
    "\3\0\1\135\25\23\1\133\1\135\40\23\1\134\2\23"+
    "\1\136\1\23\1\54\1\0\26\54\1\57\41\54\1\0"+
    "\5\54\15\0\1\137\76\0\1\140\62\0\1\60\25\54"+
    "\1\61\1\60\40\54\1\0\5\54\1\0\1\141\11\23"+
    "\14\62\1\142\1\141\40\62\1\0\3\62\1\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\26\23\1\143\11\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\2\23\1\144\35\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\145\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\10\23\1\146"+
    "\27\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\10\23\1\147\2\23\1\150\1\151\23\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\3\23"+
    "\1\152\34\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\153\35\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\34\23\1\154\3\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\11\23\1\155\26\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\6\23\1\156\31\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\2\23\1\157"+
    "\35\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\6\23\1\160\31\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\161\36\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\13\23"+
    "\1\162\24\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\4\23\1\163\33\23\1\0\4\23\1\54"+
    "\1\0\1\164\25\23\1\165\1\164\40\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\3\23\1\166"+
    "\34\23\1\0\4\23\1\54\1\0\1\167\25\23\1\170"+
    "\1\167\40\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\11\23\1\171\26\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\34\23\1\172\3\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\1\173\37\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\11\23\1\174\26\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\23\1\175\36\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\1\23\1\176\36\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\1\177\37\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\200\12\23\1\201"+
    "\24\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\202\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\15\23\1\203\22\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\204\35\23\1\0\4\23\1\54\1\0\1\205\25\23"+
    "\1\206\1\205\10\23\1\207\27\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\23\1\210\3\23"+
    "\1\211\32\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\6\23\1\212\31\23\1\0\4\23\1\54"+
    "\1\0\1\60\11\23\1\213\13\23\1\61\1\60\40\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\10\23\1\214\22\23\1\215\4\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\20\23\1\216\17\23"+
    "\1\0\4\23\1\54\1\0\1\60\21\23\1\217\3\23"+
    "\1\61\1\60\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\20\23\1\220\17\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\4\23\1\221"+
    "\33\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\5\23\1\222\32\23\1\0\4\23\1\54\1\0"+
    "\1\132\25\0\1\133\1\132\47\0\1\132\25\0\1\133"+
    "\1\132\40\0\1\223\2\0\1\223\3\0\1\135\25\54"+
    "\1\133\1\135\40\54\1\0\5\54\1\0\1\135\25\23"+
    "\1\133\1\135\40\23\1\223\2\23\1\224\1\23\1\54"+
    "\16\0\1\225\76\0\1\226\61\0\1\141\25\54\1\142"+
    "\1\141\40\54\1\0\5\54\1\0\1\60\25\23\1\61"+
    "\1\60\27\23\1\227\10\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\3\23\1\230\5\23\1\231"+
    "\26\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\20\23\1\232\17\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\16\23\1\233\21\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\23\23"+
    "\1\234\14\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\4\23\1\235\33\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\5\23\1\236\32\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\5\23\1\237\32\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\1\240\37\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\4\23\1\241\33\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\6\23\1\242\31\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\10\23\1\243\27\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\3\23\1\244"+
    "\34\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\14\23\1\245\23\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\2\23\1\246\35\23\1\0"+
    "\4\23\1\54\1\0\1\247\25\23\1\250\1\247\40\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\3\23\1\251\34\23\1\0\4\23\1\54\1\0\1\164"+
    "\25\54\1\165\1\164\40\54\1\0\5\54\1\0\1\60"+
    "\25\23\1\61\1\60\15\23\1\252\22\23\1\0\4\23"+
    "\1\54\1\0\1\167\25\54\1\170\1\167\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\6\23\1\253"+
    "\31\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\4\23\1\254\33\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\6\23\1\255\31\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\6\23"+
    "\1\256\31\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\257\35\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\24\23\1\227\13\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\22\23\1\260\15\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\22\23\1\261\15\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\3\23\1\262"+
    "\34\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\10\23\1\263\27\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\6\23\1\264\31\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\21\23"+
    "\1\265\16\23\1\0\4\23\1\54\1\0\1\205\25\54"+
    "\1\206\1\205\40\54\1\0\5\54\1\0\1\60\25\23"+
    "\1\61\1\60\23\23\1\266\14\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\3\23\1\267\34\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\5\23\1\270\32\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\20\23\1\271\17\23\1\0\4\23"+
    "\1\54\1\0\1\60\20\23\1\272\4\23\1\61\1\60"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\3\23\1\273\34\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\20\23\1\274\17\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\4\23"+
    "\1\275\33\23\1\0\4\23\1\54\1\0\1\60\23\23"+
    "\1\276\1\23\1\61\1\60\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\7\23\1\277\30\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\2\23\1\276\35\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\20\23\1\300\17\23\1\0\4\23"+
    "\1\54\1\0\1\132\25\0\1\133\1\132\40\0\1\301"+
    "\2\0\1\301\3\0\1\135\25\23\1\133\1\135\40\23"+
    "\1\301\2\23\1\302\1\23\1\54\17\0\1\303\76\0"+
    "\1\304\60\0\1\305\25\23\1\306\1\305\40\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\23"+
    "\1\307\36\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\310\35\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\23\1\311\36\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\7\23\1\312\30\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\313\30\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\10\23\1\314"+
    "\27\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\4\23\1\315\33\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\2\23\1\316\35\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\24\23"+
    "\1\317\13\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\320\35\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\7\23\1\321\30\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\6\23\1\322\31\23\1\0\4\23\1\54\1\0\1\60"+
    "\13\23\1\323\11\23\1\61\1\60\40\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\2\23\1\324"+
    "\35\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\15\23\1\325\22\23\1\0\4\23\1\54\1\0"+
    "\1\247\25\54\1\250\1\247\40\54\1\0\5\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\326\36\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\327\35\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\1\330\37\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\6\23\1\331\31\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\332\30\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\12\23\1\333\25\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\334\37\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\3\23"+
    "\1\335\34\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\336\35\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\5\23\1\337\32\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\4\23\1\340\33\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\341\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\7\23\1\342"+
    "\30\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\343\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\10\23\1\344\27\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\17\23"+
    "\1\345\20\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\346\35\23\1\0\4\23\1\54"+
    "\1\0\1\60\23\23\1\346\1\23\1\61\1\60\40\23"+
    "\1\0\4\23\1\54\1\0\1\347\25\23\1\350\1\347"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\7\23\1\351\30\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\13\23\1\352\24\23\1\0"+
    "\4\23\1\54\1\0\1\353\25\23\1\354\1\353\40\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\14\23\1\355\23\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\6\23\1\356\31\23\1\0\4\23"+
    "\1\54\1\0\1\132\25\0\1\133\1\132\37\0\1\357"+
    "\1\360\2\0\1\360\3\0\1\135\25\23\1\133\1\135"+
    "\37\23\1\361\1\360\2\23\1\362\1\23\1\54\20\0"+
    "\1\363\76\0\1\364\57\0\1\305\25\54\1\306\1\305"+
    "\40\54\1\0\5\54\1\0\1\60\13\23\1\365\11\23"+
    "\1\61\1\60\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\366\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\7\23\1\367"+
    "\30\23\1\0\4\23\1\54\1\0\1\60\13\23\1\370"+
    "\11\23\1\61\1\60\40\23\1\0\4\23\1\54\1\0"+
    "\1\371\25\23\1\372\1\371\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\14\23\1\373\23\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\13\23\1\374\24\23\1\0\4\23\1\54\1\0\1\375"+
    "\25\23\1\376\1\375\40\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\23\23\1\377\14\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\23"+
    "\1\u0100\36\23\1\0\4\23\1\54\1\0\1\u0101\25\23"+
    "\1\u0102\1\u0101\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\u0103\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\20\23\1\u0104"+
    "\17\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\3\23\1\u0105\34\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\3\23\1\u0106\34\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\6\23"+
    "\1\u0107\31\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\14\23\1\u0108\23\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\2\23\1\u0109\35\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\2\23\1\u010a\35\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\u010b\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\6\23\1\u010c"+
    "\31\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\22\23\1\u010d\15\23\1\0\4\23\1\54\1\0"+
    "\1\60\13\23\1\u010e\11\23\1\61\1\60\40\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\23"+
    "\1\u010f\36\23\1\0\4\23\1\54\1\0\1\u0110\25\23"+
    "\1\u0111\1\u0110\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\13\23\1\u0112\24\23\1\0\4\23"+
    "\1\54\1\0\1\60\13\23\1\u0113\11\23\1\61\1\60"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\13\23\1\u0114"+
    "\11\23\1\61\1\60\40\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\2\23\1\u0115\35\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\u0116\35\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\7\23\1\u0117\30\23\1\0\4\23\1\54"+
    "\1\0\1\u0118\25\23\1\u0119\1\u0118\40\23\1\0\4\23"+
    "\1\54\1\0\1\347\25\54\1\350\1\347\40\54\1\0"+
    "\5\54\1\0\1\60\13\23\1\u011a\11\23\1\61\1\60"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\7\23\1\u011b\30\23\1\0\4\23\1\54\1\0"+
    "\1\353\25\54\1\354\1\353\40\54\1\0\5\54\1\0"+
    "\1\u011c\25\23\1\u011d\1\u011c\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\12\23\1\u011e\25\23"+
    "\1\0\4\23\1\54\71\0\1\u011f\2\0\1\u011f\3\0"+
    "\1\132\25\0\1\133\1\132\40\0\1\360\2\0\1\360"+
    "\3\0\1\60\25\23\1\61\1\60\40\23\1\u011f\2\23"+
    "\1\u0120\1\23\1\54\1\0\1\135\25\23\1\133\1\135"+
    "\40\23\1\360\2\23\1\362\1\23\1\54\13\0\1\u0121"+
    "\76\0\1\u0122\64\0\1\60\25\23\1\61\1\60\4\23"+
    "\1\u0123\33\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\1\u0124\37\23\1\0\4\23\1\54\1\0"+
    "\1\u0125\25\23\1\u0126\1\u0125\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\20\23\1\u0127\17\23"+
    "\1\0\4\23\1\54\1\0\1\371\25\54\1\372\1\371"+
    "\40\54\1\0\5\54\1\0\1\60\25\23\1\61\1\60"+
    "\3\23\1\u0128\34\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\20\23\1\u0129\17\23\1\0\4\23"+
    "\1\54\1\0\1\375\25\54\1\376\1\375\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\7\23\1\u012a"+
    "\30\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\6\23\1\u012b\31\23\1\0\4\23\1\54\1\0"+
    "\1\u0101\25\54\1\u0102\1\u0101\40\54\1\0\5\54\1\0"+
    "\1\60\25\23\1\61\1\60\3\23\1\u012c\34\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\u012d\35\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\1\u012e\37\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\u012f\36\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\u0130\30\23\1\0\4\23\1\54\1\0\1\u0131\25\23"+
    "\1\u0132\1\u0131\40\23\1\0\4\23\1\54\1\0\1\u0133"+
    "\25\23\1\u0134\1\u0133\40\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\u0135\36\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\u0136\35\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\1\u0137\37\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\3\23\1\u0138\34\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\u0139"+
    "\7\23\1\u013a\27\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u013b\30\23\1\0\4\23"+
    "\1\54\1\0\1\u0110\25\54\1\u0111\1\u0110\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\3\23\1\u013c"+
    "\34\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\4\23\1\u013d\33\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\12\23\1\u013e\3\23\1\u013f"+
    "\21\23\1\0\4\23\1\54\1\0\1\u0140\13\23\1\u0141"+
    "\11\23\1\u0142\1\u0140\40\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\20\23\1\u0143\17\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\23"+
    "\1\u0144\36\23\1\0\4\23\1\54\1\0\1\u0118\25\54"+
    "\1\u0119\1\u0118\40\54\1\0\5\54\1\0\1\60\25\23"+
    "\1\61\1\60\21\23\1\u0145\16\23\1\0\4\23\1\54"+
    "\1\0\1\u0146\25\23\1\u0147\1\u0146\40\23\1\0\4\23"+
    "\1\54\1\0\1\u011c\25\54\1\u011d\1\u011c\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\6\23\1\u0148"+
    "\31\23\1\0\4\23\1\54\71\0\1\u0149\2\0\1\u0149"+
    "\3\0\1\60\25\23\1\61\1\60\40\23\1\u0149\2\23"+
    "\1\u014a\1\23\1\54\21\0\1\u014b\76\0\1\u014c\56\0"+
    "\1\60\25\23\1\61\1\60\5\23\1\u014d\32\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\6\23"+
    "\1\u014e\31\23\1\0\4\23\1\54\1\0\1\u0125\25\54"+
    "\1\u0126\1\u0125\40\54\1\0\5\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\u014f\35\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\5\23\1\u0150\32\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\3\23\1\u0151\34\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\33\23\1\u0152\4\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\11\23\1\u0153"+
    "\26\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\u0154\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\33\23\1\u0155\4\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\6\23"+
    "\1\u0156\31\23\1\0\4\23\1\54\1\0\1\60\13\23"+
    "\1\u0157\11\23\1\61\1\60\40\23\1\0\4\23\1\54"+
    "\1\0\1\u0158\13\23\1\u0159\11\23\1\u015a\1\u0158\40\23"+
    "\1\0\4\23\1\54\1\0\1\u0131\25\54\1\u0132\1\u0131"+
    "\40\54\1\0\5\54\1\0\1\u0133\25\54\1\u0134\1\u0133"+
    "\40\54\1\0\5\54\1\0\1\60\25\23\1\61\1\60"+
    "\11\23\1\u015b\26\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\5\23\1\u015c\32\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\3\23\1\u015d"+
    "\34\23\1\0\4\23\1\54\1\0\1\u015e\25\23\1\u015f"+
    "\1\u015e\40\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\1\23\1\u0160\36\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\7\23\1\u0161\30\23"+
    "\1\0\4\23\1\54\1\0\1\u0162\25\23\1\u0163\1\u0162"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\u0164\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\5\23\1\u0165\32\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\u0166\30\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\3\23\1\u0167\34\23\1\0\4\23\1\54"+
    "\1\0\1\u0140\25\54\1\u0142\1\u0140\40\54\1\0\5\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\u0168\37\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\23"+
    "\1\u0169\36\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\11\23\1\u016a\26\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\6\23\1\u016b\31\23"+
    "\1\0\4\23\1\54\1\0\1\u0146\25\54\1\u0147\1\u0146"+
    "\40\54\1\0\5\54\1\0\1\60\25\23\1\61\1\60"+
    "\1\u016c\37\23\1\0\4\23\1\54\70\0\1\u016d\7\0"+
    "\1\60\25\23\1\61\1\60\37\23\1\u016e\1\0\4\23"+
    "\1\54\13\0\1\u016f\76\0\1\u0170\64\0\1\60\25\23"+
    "\1\61\1\60\4\23\1\u0171\33\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\3\23\1\u0172\34\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\33\23\1\u0173\4\23\1\0\4\23\1\54\1\0\1\u0174"+
    "\25\23\1\u0175\1\u0174\40\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\u0176\3\23\1\u0177"+
    "\31\23\1\u0178\1\0\4\23\1\54\1\0\1\u0179\25\23"+
    "\1\u017a\1\u0179\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u017b\30\23\1\0\4\23"+
    "\1\54\1\0\1\60\13\23\1\u017c\11\23\1\61\1\60"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\20\23\1\u017d\17\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\7\23\1\u017e\30\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\u017f"+
    "\37\23\1\0\4\23\1\54\1\0\1\u0158\25\54\1\u015a"+
    "\1\u0158\40\54\1\0\5\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\u0180\2\23\1\u0181\10\23\1\u0182\23\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\3\23"+
    "\1\u0183\34\23\1\0\4\23\1\54\1\0\1\u0184\25\23"+
    "\1\u0185\1\u0184\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\1\23\1\u0186\36\23\1\0\4\23"+
    "\1\54\1\0\1\u015e\25\54\1\u015f\1\u015e\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\2\23\1\u0187"+
    "\35\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\11\23\1\u0188\26\23\1\0\4\23\1\54\1\0"+
    "\1\u0162\25\54\1\u0163\1\u0162\40\54\1\0\5\54\1\0"+
    "\1\60\25\23\1\61\1\60\6\23\1\u0189\31\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\4\23"+
    "\1\u018a\33\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\1\23\1\u018b\36\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\5\23\1\u018c\32\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\3\23\1\u018d\34\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u018e\30\23\1\0\4\23"+
    "\1\54\1\0\1\u018f\25\23\1\u0190\1\u018f\40\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\5\23"+
    "\1\u0191\32\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\3\23\1\u0192\34\23\1\0\4\23\1\54"+
    "\71\0\1\u0193\2\0\1\u0193\3\0\1\60\25\23\1\61"+
    "\1\60\40\23\1\u0193\2\23\1\u0194\1\23\1\54\22\0"+
    "\1\u0195\76\0\1\u0196\55\0\1\60\25\23\1\61\1\60"+
    "\3\23\1\u0197\34\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\13\23\1\u0198\24\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\20\23\1\u0199"+
    "\17\23\1\0\4\23\1\54\1\0\1\u0174\25\54\1\u0175"+
    "\1\u0174\40\54\1\0\5\54\1\0\1\60\13\23\1\u019a"+
    "\11\23\1\61\1\60\40\23\1\0\4\23\1\54\1\0"+
    "\1\u019b\25\23\1\u019c\1\u019b\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\40\23\1\u019d\2\23"+
    "\1\u019e\1\23\1\54\1\0\1\u0179\25\54\1\u017a\1\u0179"+
    "\40\54\1\0\5\54\1\0\1\u019f\25\23\1\u01a0\1\u019f"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\u01a1\3\23\1\u01a2\5\23\1\u01a3\25\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\u01a4\30\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\14\23\1\u01a5\23\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\7\23\1\u01a6\30\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\1\23\1\u01a7\36\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\u01a8\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\4\23\1\u01a9"+
    "\33\23\1\0\4\23\1\54\1\0\1\u01aa\25\23\1\u01ab"+
    "\1\u01aa\40\23\1\0\4\23\1\54\1\0\1\u0184\25\54"+
    "\1\u0185\1\u0184\40\54\1\0\5\54\1\0\1\60\13\23"+
    "\1\u01ac\11\23\1\61\1\60\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\3\23\1\u01ad\34\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\6\23\1\u01ae\31\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u01af\30\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\3\23\1\u01b0"+
    "\34\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\10\23\1\u01b1\27\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\5\23\1\u01b2\32\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\10\23"+
    "\1\u01b3\27\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\5\23\1\u01b4\32\23\1\0\4\23\1\54"+
    "\1\0\1\u018f\25\54\1\u0190\1\u018f\40\54\1\0\5\54"+
    "\1\0\1\60\25\23\1\61\1\60\6\23\1\u01b5\31\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\1\23\1\u01b6\36\23\1\0\4\23\1\54\71\0\1\u01b7"+
    "\2\0\1\u01b7\3\0\1\60\25\23\1\61\1\60\40\23"+
    "\1\u01b7\2\23\1\u01b8\1\23\1\54\23\0\1\u01b9\76\0"+
    "\1\u01ba\54\0\1\60\25\23\1\61\1\60\1\23\1\u01bb"+
    "\36\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\2\23\1\u01bc\35\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\7\23\1\u01bd\30\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\11\23"+
    "\1\u01be\26\23\1\0\4\23\1\54\1\0\1\u019b\25\54"+
    "\1\u019c\1\u019b\40\54\1\0\5\54\1\0\1\u01bf\25\0"+
    "\1\u01c0\1\u01bf\40\0\1\u019d\2\0\1\u019d\3\0\1\u01c1"+
    "\25\23\1\u01c0\1\u01c1\40\23\1\u019d\2\23\1\u019e\1\23"+
    "\1\54\1\0\1\u019f\25\54\1\u01a0\1\u019f\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\7\23\1\u01c2"+
    "\30\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\5\23\1\u01c3\32\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\7\23\1\u01c4\30\23\1\0"+
    "\4\23\1\54\1\0\1\u01c5\25\23\1\u01c6\1\u01c5\40\23"+
    "\1\0\4\23\1\54\1\0\1\u01c7\25\23\1\u01c8\1\u01c7"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\10\23\1\u01c9\27\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\2\23\1\u01ca\35\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\20\23"+
    "\1\u01cb\17\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\u01cc\35\23\1\0\4\23\1\54"+
    "\1\0\1\u01aa\25\54\1\u01ab\1\u01aa\40\54\1\0\5\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\u01cd\3\23\1\u01ce"+
    "\5\23\1\u01cf\25\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\1\u01d0\37\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\12\23\1\u01d1\25\23"+
    "\1\0\4\23\1\54\1\0\1\u01d2\25\23\1\u01d3\1\u01d2"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\u01d4\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\4\23\1\u01d5\33\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\17\23"+
    "\1\u01d6\20\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\16\23\1\u01d7\21\23\1\0\4\23\1\54"+
    "\1\0\1\60\13\23\1\u01d8\11\23\1\61\1\60\40\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\23\23\1\u01d9\14\23\1\0\4\23\1\54\1\0\1\u01da"+
    "\25\23\1\u01db\1\u01da\40\23\1\0\4\23\1\54\1\0"+
    "\1\u01b7\25\0\1\u01dc\1\u01b7\47\0\1\u01dd\25\23\1\u01dc"+
    "\1\u01dd\40\23\1\0\4\23\1\54\24\0\1\u01de\76\0"+
    "\1\u01df\53\0\1\60\25\23\1\61\1\60\6\23\1\u01e0"+
    "\31\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\5\23\1\u01e1\32\23\1\0\4\23\1\54\1\0"+
    "\1\u01e2\25\23\1\u01e3\1\u01e2\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\3\23\1\u01e4\34\23"+
    "\1\0\4\23\1\54\1\0\1\u01bf\25\0\1\u01c0\1\u01bf"+
    "\47\0\1\u01c1\25\54\1\u01c0\1\u01c1\40\54\1\0\5\54"+
    "\1\0\1\60\25\23\1\61\1\60\10\23\1\u01e5\27\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\4\23\1\u01e6\33\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\1\23\1\u01e7\36\23\1\0\4\23"+
    "\1\54\1\0\1\u01c5\25\54\1\u01c6\1\u01c5\40\54\1\0"+
    "\5\54\1\0\1\u01c7\25\54\1\u01c8\1\u01c7\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\16\23\1\u01e8"+
    "\21\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\3\23\1\u01e9\34\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\6\23\1\u01ea\31\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\21\23"+
    "\1\u01eb\16\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\7\23\1\u01ec\30\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\5\23\1\u01ed\32\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\7\23\1\u01ee\30\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\6\23\1\u01ef\31\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\6\23\1\u01f0"+
    "\31\23\1\0\4\23\1\54\1\0\1\u01d2\25\54\1\u01d3"+
    "\1\u01d2\40\54\1\0\5\54\1\0\1\60\25\23\1\61"+
    "\1\60\6\23\1\u01f1\31\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\13\23\1\u01f2\24\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\u01f3\30\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\7\23\1\u01f4\30\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\u01f5\11\23\1\u01f6"+
    "\25\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\13\23\1\u01f7\24\23\1\0\4\23\1\54\1\0"+
    "\1\u01da\25\54\1\u01db\1\u01da\40\54\1\0\5\54\1\0"+
    "\1\u01dd\25\54\1\u01dc\1\u01dd\40\54\1\0\5\54\25\0"+
    "\1\u01f8\76\0\1\u01f9\52\0\1\60\25\23\1\61\1\60"+
    "\7\23\1\u01fa\30\23\1\0\4\23\1\54\1\0\1\60"+
    "\13\23\1\u01fb\11\23\1\61\1\60\40\23\1\0\4\23"+
    "\1\54\1\0\1\u01e2\25\54\1\u01e3\1\u01e2\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\20\23\1\u01fc"+
    "\17\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\16\23\1\u01fd\21\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\3\23\1\u01fe\34\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\10\23"+
    "\1\u01ff\27\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\7\23\1\u0200\30\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\u0201\37\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\15\23"+
    "\1\u0202\22\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\7\23\1\u0203\30\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\10\23\1\u0204\27\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\4\23\1\u0205\33\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\1\23\1\u0206\36\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\7\23\1\u0207"+
    "\30\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\u0208\37\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u0209\30\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\3\23\1\u020a"+
    "\34\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\u020b\36\23\1\0\4\23\1\54\1\0"+
    "\1\u020c\25\23\1\u020d\1\u020c\40\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\7\23\1\u020e\30\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\7\23\1\u020f\30\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\2\23\1\u0210\35\23\1\0\4\23"+
    "\1\54\16\0\1\u0211\76\0\1\u0212\61\0\1\u0213\25\23"+
    "\1\u0214\1\u0213\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\4\23\1\u0215\33\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\7\23\1\u0216"+
    "\30\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\7\23\1\u0217\30\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\u0218\36\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\4\23"+
    "\1\u0219\33\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\14\23\1\u021a\23\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\6\23\1\u021b\31\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\4\23\1\u021c\33\23\1\0\4\23\1\54\1\0\1\u021d"+
    "\25\23\1\u021e\1\u021d\40\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\16\23\1\u021f\21\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\3\23"+
    "\1\u0220\34\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\10\23\1\u0221\27\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\14\23\1\u0222\23\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\3\23\1\u0223\34\23\1\0\4\23\1\54\1\0\1\u0224"+
    "\25\23\1\u0225\1\u0224\40\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\u0226\36\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\11\23"+
    "\1\u0227\26\23\1\0\4\23\1\54\1\0\1\u020c\25\54"+
    "\1\u020d\1\u020c\40\54\1\0\5\54\1\0\1\60\25\23"+
    "\1\61\1\60\10\23\1\u0228\27\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\1\23\1\u0229\36\23"+
    "\1\0\4\23\1\54\1\0\1\u022a\25\23\1\u022b\1\u022a"+
    "\40\23\1\0\4\23\1\54\1\0\1\u0213\25\54\1\u0214"+
    "\1\u0213\40\54\1\0\5\54\1\0\1\60\25\23\1\61"+
    "\1\60\5\23\1\u022c\32\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\5\23\1\u022d\32\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\14\23"+
    "\1\u022e\23\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\6\23\1\u022f\31\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\13\23\1\u0230\24\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\2\23\1\u0231\35\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u0232\30\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\7\23\1\u0233"+
    "\30\23\1\0\4\23\1\54\1\0\1\u021d\25\54\1\u021e"+
    "\1\u021d\40\54\1\0\5\54\1\0\1\60\25\23\1\61"+
    "\1\60\7\23\1\u0234\30\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\1\23\1\u0235\36\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\4\23"+
    "\1\u0236\33\23\1\0\4\23\1\54\1\0\1\u0237\25\23"+
    "\1\u0238\1\u0237\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\1\u0239\37\23\1\0\4\23\1\54"+
    "\1\0\1\u0224\25\54\1\u0225\1\u0224\40\54\1\0\5\54"+
    "\1\0\1\60\25\23\1\61\1\60\6\23\1\u023a\31\23"+
    "\1\0\4\23\1\54\1\0\1\u023b\25\23\1\u023c\1\u023b"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\16\23\1\u023d\21\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\10\23\1\u023e\27\23\1\0"+
    "\4\23\1\54\1\0\1\u022a\25\54\1\u022b\1\u022a\40\54"+
    "\1\0\5\54\1\0\1\60\25\23\1\61\1\60\4\23"+
    "\1\u023f\33\23\1\0\4\23\1\54\1\0\1\u0240\25\23"+
    "\1\u0241\1\u0240\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\2\23\1\u0242\35\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\7\23\1\u0243"+
    "\30\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\3\23\1\u0244\34\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\14\23\1\u0245\23\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\14\23"+
    "\1\u0246\23\23\1\0\4\23\1\54\1\0\1\u0247\25\23"+
    "\1\u0248\1\u0247\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\u0249\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\6\23\1\u024a"+
    "\31\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\13\23\1\u024b\24\23\1\0\4\23\1\54\1\0"+
    "\1\u0237\25\54\1\u0238\1\u0237\40\54\1\0\5\54\1\0"+
    "\1\60\25\23\1\61\1\60\6\23\1\u024c\31\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\u024d\30\23\1\0\4\23\1\54\1\0\1\u023b\25\54"+
    "\1\u023c\1\u023b\40\54\1\0\5\54\1\0\1\60\25\23"+
    "\1\61\1\60\7\23\1\u024e\30\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\4\23\1\u024f\33\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\3\23\1\u0250\34\23\1\0\4\23\1\54\1\0\1\u0240"+
    "\25\54\1\u0241\1\u0240\40\54\1\0\5\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\u0251\23\23\1\0\4\23"+
    "\1\54\1\0\1\u0252\25\23\1\u0253\1\u0252\40\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\1\23"+
    "\1\u0254\36\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\20\23\1\u0255\17\23\1\0\4\23\1\54"+
    "\1\0\1\u0256\25\23\1\u0257\1\u0256\40\23\1\0\4\23"+
    "\1\54\1\0\1\u0247\25\54\1\u0248\1\u0247\40\54\1\0"+
    "\5\54\1\0\1\60\25\23\1\61\1\60\2\23\1\u0258"+
    "\35\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\7\23\1\u0259\30\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\3\23\1\u025a\34\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\7\23"+
    "\1\u025b\30\23\1\0\4\23\1\54\1\0\1\u025c\25\23"+
    "\1\u025d\1\u025c\40\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\14\23\1\u025e\23\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\13\23\1\u025f"+
    "\24\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\u0260\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\20\23\1\u0261\17\23\1\0"+
    "\4\23\1\54\1\0\1\u0252\25\54\1\u0253\1\u0252\40\54"+
    "\1\0\5\54\1\0\1\60\25\23\1\61\1\60\6\23"+
    "\1\u0262\31\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\2\23\1\u0263\35\23\1\0\4\23\1\54"+
    "\1\0\1\u0256\25\54\1\u0257\1\u0256\40\54\1\0\5\54"+
    "\1\0\1\60\25\23\1\61\1\60\14\23\1\u0264\23\23"+
    "\1\0\4\23\1\54\1\0\1\u0265\25\23\1\u0266\1\u0265"+
    "\40\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\u0267\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\14\23\1\u0268\23\23\1\0"+
    "\4\23\1\54\1\0\1\u025c\25\54\1\u025d\1\u025c\40\54"+
    "\1\0\5\54\1\0\1\60\25\23\1\61\1\60\2\23"+
    "\1\u0269\35\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\3\23\1\u026a\34\23\1\0\4\23\1\54"+
    "\1\0\1\60\25\23\1\61\1\60\6\23\1\u026b\31\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\2\23\1\u026c\35\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u026d\30\23\1\0\4\23"+
    "\1\54\1\0\1\u026e\25\23\1\u026f\1\u026e\40\23\1\0"+
    "\4\23\1\54\1\0\1\60\25\23\1\61\1\60\20\23"+
    "\1\u0270\17\23\1\0\4\23\1\54\1\0\1\u0265\25\54"+
    "\1\u0266\1\u0265\40\54\1\0\5\54\1\0\1\60\25\23"+
    "\1\61\1\60\6\23\1\u0271\31\23\1\0\4\23\1\54"+
    "\1\0\1\u0272\25\23\1\u0273\1\u0272\40\23\1\0\4\23"+
    "\1\54\1\0\1\60\25\23\1\61\1\60\14\23\1\u0274"+
    "\23\23\1\0\4\23\1\54\1\0\1\60\25\23\1\61"+
    "\1\60\1\23\1\u0275\36\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\7\23\1\u0276\30\23\1\0"+
    "\4\23\1\54\1\0\1\u0277\25\23\1\u0278\1\u0277\40\23"+
    "\1\0\4\23\1\54\1\0\1\u0279\25\23\1\u027a\1\u0279"+
    "\40\23\1\0\4\23\1\54\1\0\1\u026e\25\54\1\u026f"+
    "\1\u026e\40\54\1\0\5\54\1\0\1\60\25\23\1\61"+
    "\1\60\2\23\1\u027b\35\23\1\0\4\23\1\54\1\0"+
    "\1\60\25\23\1\61\1\60\7\23\1\u027c\30\23\1\0"+
    "\4\23\1\54\1\0\1\u0272\25\54\1\u0273\1\u0272\40\54"+
    "\1\0\5\54\1\0\1\60\25\23\1\61\1\60\20\23"+
    "\1\u027d\17\23\1\0\4\23\1\54\1\0\1\60\25\23"+
    "\1\61\1\60\6\23\1\u027e\31\23\1\0\4\23\1\54"+
    "\1\0\1\u027f\25\23\1\u0280\1\u027f\40\23\1\0\4\23"+
    "\1\54\1\0\1\u0277\25\54\1\u0278\1\u0277\40\54\1\0"+
    "\5\54\1\0\1\u0279\25\54\1\u027a\1\u0279\40\54\1\0"+
    "\5\54\1\0\1\u0281\25\23\1\u0282\1\u0281\40\23\1\0"+
    "\4\23\1\54\1\0\1\u0283\25\23\1\u0284\1\u0283\40\23"+
    "\1\0\4\23\1\54\1\0\1\60\25\23\1\61\1\60"+
    "\2\23\1\u0285\35\23\1\0\4\23\1\54\1\0\1\60"+
    "\25\23\1\61\1\60\7\23\1\u0286\30\23\1\0\4\23"+
    "\1\54\1\0\1\u027f\25\54\1\u0280\1\u027f\40\54\1\0"+
    "\5\54\1\0\1\u0281\25\54\1\u0282\1\u0281\40\54\1\0"+
    "\5\54\1\0\1\u0283\25\54\1\u0284\1\u0283\40\54\1\0"+
    "\5\54\1\0\1\u0287\25\23\1\u0288\1\u0287\40\23\1\0"+
    "\4\23\1\54\1\0\1\u0289\25\23\1\u028a\1\u0289\40\23"+
    "\1\0\4\23\1\54\1\0\1\u0287\25\54\1\u0288\1\u0287"+
    "\40\54\1\0\5\54\1\0\1\u0289\25\54\1\u028a\1\u0289"+
    "\40\54\1\0\5\54";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36351];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\13\11\3\1\37\0\1\11\1\0\1\11\51\0"+
    "\1\11\6\0\1\11\22\0\1\11\2\0\1\11\15\0"+
    "\1\11\41\0\1\11\35\0\1\11\41\0\1\11\3\0"+
    "\1\11\15\0\1\11\3\0\1\11\3\0\1\11\16\0"+
    "\1\11\7\0\1\11\3\0\1\11\10\0\1\11\13\0"+
    "\1\11\1\0\1\11\15\0\1\11\4\0\1\11\22\0"+
    "\1\11\4\0\1\11\3\0\1\11\21\0\1\11\4\0"+
    "\1\11\12\0\1\11\12\0\1\11\13\0\1\11\3\0"+
    "\1\11\12\0\1\11\24\0\1\11\5\0\1\11\1\0"+
    "\1\11\12\0\1\11\7\0\2\11\1\0\2\1\3\0"+
    "\1\11\51\0\1\11\3\0\2\11\1\0\1\11\11\0"+
    "\1\11\6\0\1\11\5\0\1\11\14\0\1\11\3\0"+
    "\1\11\4\0\1\11\6\0\1\11\12\0\1\11\3\0"+
    "\1\11\5\0\1\11\10\0\1\11\10\0\1\11\3\0"+
    "\1\11\4\0\1\11\1\0\1\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[650];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de los operadores invocados
    //ArrayList<Token> listadoOperadoresInvocados = new ArrayList();
    ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

     //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
     private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
          //creamos un  token auxiliar
          Token tokenAux = new Token(tipoToken, lexema, fila, columna);
          System.out.println("\nFila : "+fila+" Columna: "+columna+" Token de tipo: "+tipoToken+" Lexema: "+lexema);
          //Agregamos al listado
          //listadoOperadoresInvocados.add(tokenAux);
          //retornamos el token aux como simbolo
          return new Symbol(tipo, tokenAux);
     }

     //Agregamos un token al array list de errores lexicos
     
     private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
          //creamos un  token auxiliar
          TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
          //Agregamos al listado
          listadoErroresLexicos.add(tokenErrorAux);
     }

     //Obtenemos el arrLust de los errores lexicos
     public ArrayList<TokenError> obtenerListadoErroresLexicos(){
          return listadoErroresLexicos;
     }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 416) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addErrorLexico ("LEXICO", yytext(), "Token no valido",yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 77: break;
          case 2: 
            { 
            } 
            // fall through
          case 78: break;
          case 3: 
            { return retornarSimbolo(LLAVES_INICIO, "LLAVES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 79: break;
          case 4: 
            { return retornarSimbolo(LLAVES_FIN, "LLAVES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 80: break;
          case 5: 
            { return retornarSimbolo(CORCHETES_INICIO, "CORCHETES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 81: break;
          case 6: 
            { return retornarSimbolo(CORCHETES_FIN, "CORCHETES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 82: break;
          case 7: 
            { return retornarSimbolo(MENOR, "MENOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 83: break;
          case 8: 
            { return retornarSimbolo(MAYOR, "MAYOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 84: break;
          case 9: 
            { return retornarSimbolo(EXCLAMACION, "EXCLAMACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 85: break;
          case 10: 
            { return retornarSimbolo(DOS_PUNTOS, "DOS_PUNTOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 86: break;
          case 11: 
            { return retornarSimbolo(COMA, "COMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 87: break;
          case 12: 
            { if(yytext().replaceAll("\"", "").trim().endsWith("|") || yytext().replaceAll("\"", "").trim().startsWith("|") ){
                    return retornarSimbolo(VALOR_TEXTO_VISIBLE_CON_ESPACIO, "VALOR_TEXTO_VISIBLE_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1); 
               }else if(yytext().trim().contains(" ")){//si tiene espacios
                    return retornarSimbolo(VALOR_ITEMS_CON_ESPACIO, "VALOR_ITEMS_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 88: break;
          case 13: 
            { if(yytext().replaceAll("\"", "").trim().startsWith("|") || yytext().replaceAll("\"", "").trim().endsWith("|") ){
                    return retornarSimbolo(VALOR_PASSWORD, "VALOR_PASSWORD", yytext(), yyline + 1, yycolumn + 1); 
               }else{
                    return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
               }
            } 
            // fall through
          case 89: break;
          case 14: 
            { return retornarSimbolo(DIGITO, "DIGITO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 90: break;
          case 15: 
            { return retornarSimbolo(VALOR_ID, "VALOR_ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 91: break;
          case 16: 
            { return retornarSimbolo(SI, "SI", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 92: break;
          case 17: 
            { return retornarSimbolo(ID, "ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 93: break;
          case 18: 
            { return retornarSimbolo(NO, "NO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 94: break;
          case 19: 
            { return retornarSimbolo(URL, "URL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 95: break;
          case 20: 
            { return retornarSimbolo(DARK, "DARK", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 96: break;
          case 21: 
            { return retornarSimbolo(TEMA, "TEMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 97: break;
          case 22: 
            { return retornarSimbolo(BLUE, "BLUE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 98: break;
          case 23: 
            { return retornarSimbolo(COMBO, "COMBO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 99: break;
          case 24: 
            { return retornarSimbolo(CLASE, "CLASE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 100: break;
          case 25: 
            { return retornarSimbolo(RADIO, "RADIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 101: break;
          case 26: 
            { return retornarSimbolo(FILAS, "FILAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 102: break;
          case 27: 
            { return retornarSimbolo(WHITE, "WHITE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 103: break;
          case 28: 
            { return retornarSimbolo(BOTON, "BOTON", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 104: break;
          case 29: 
            { return retornarSimbolo(CENTRO, "CENTRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 105: break;
          case 30: 
            { return retornarSimbolo(IMAGEN, "IMAGEN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 106: break;
          case 31: 
            { return retornarSimbolo(INDICE, "INDICE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 107: break;
          case 32: 
            { return retornarSimbolo(NOMBRE, "NOMBRE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 108: break;
          case 33: 
            { return retornarSimbolo(TITULO, "TITULO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 109: break;
          case 34: 
            { return retornarSimbolo(USUARIO, "USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 110: break;
          case 35: 
            { return retornarSimbolo(DERECHA, "DERECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 111: break;
          case 36: 
            { return retornarSimbolo(FICHERO, "FICHERO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 112: break;
          case 37: 
            { return retornarSimbolo(COLUMNAS, "COLUMNAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 113: break;
          case 38: 
            { return retornarSimbolo(CHECKBOX, "CHECKBOX", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 114: break;
          case 39: 
            { return retornarSimbolo(OPCIONES, "OPCIONES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 115: break;
          case 40: 
            { return retornarSimbolo(PASSWORD, "PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 116: break;
          case 41: 
            { return retornarSimbolo(CONSULTAS, "CONSULTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 117: break;
          case 42: 
            { return retornarSimbolo(REQUERIDO, "REQUERIDO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 118: break;
          case 43: 
            { return retornarSimbolo(IZQUIERDA, "IZQUIERDA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 119: break;
          case 44: 
            { return retornarSimbolo(CONSULTA_N, "CONSULTA_N", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 120: break;
          case 45: 
            { return retornarSimbolo(AREA_TEXTO, "AREA_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 121: break;
          case 46: 
            { return retornarSimbolo(ALINEACION, "ALINEACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 122: break;
          case 47: 
            { return retornarSimbolo(FORMULARIO, "FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 123: break;
          case 48: 
            { return retornarSimbolo(JUSTIFICAR, "JUSTIFICAR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 124: break;
          case 49: 
            { return retornarSimbolo(VALOR_FECHA, "VALOR_FECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 125: break;
          case 50: 
            { return retornarSimbolo(INICIO_SOLICITUD, "INICIO_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 126: break;
          case 51: 
            { return retornarSimbolo(FIN_SOLICITUD, "FIN_SOLICITUD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 127: break;
          case 52: 
            { return retornarSimbolo(CAMPO_TEXTO, "CAMPO_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 128: break;
          case 53: 
            { return retornarSimbolo(NOMBRE_CAMPO, "NOMBRE_CAMPO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 129: break;
          case 54: 
            { return retornarSimbolo(INICIO_SOLICITUDES, "INICIO_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 130: break;
          case 55: 
            { return retornarSimbolo(FIN_SOLICITUDES, "FIN_SOLICITUDES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 131: break;
          case 56: 
            { return retornarSimbolo(CREAR_USUARIO, "CREAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 132: break;
          case 57: 
            { return retornarSimbolo(USUARIO_NUEVO, "USUARIO_NUEVO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 133: break;
          case 58: 
            { return retornarSimbolo(LOGIN_USUARIO, "LOGIN_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 134: break;
          case 59: 
            { return retornarSimbolo(TEXTO_VISIBLE, "TEXTO_VISIBLE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 135: break;
          case 60: 
            { return retornarSimbolo(FECHA_CREACION, "FECHA_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 136: break;
          case 61: 
            { return retornarSimbolo(NUEVO_PASSWORD, "NUEVO_PASSWORD", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 137: break;
          case 62: 
            { return retornarSimbolo(CONSULTAR_DATOS, "CONSULTAR_DATOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 138: break;
          case 63: 
            { return retornarSimbolo(USUARIO_ANTIGUO, "USUARIO_ANTIGUO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 139: break;
          case 64: 
            { return retornarSimbolo(ELIMINAR_USUARIO, "ELIMINAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 140: break;
          case 65: 
            { return retornarSimbolo(USUARIO_CREACION, "USUARIO_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 141: break;
          case 66: 
            { return retornarSimbolo(NUEVO_FORMULARIO, "NUEVO_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 142: break;
          case 67: 
            { return retornarSimbolo(MODIFICAR_USUARIO, "MODIFICAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 143: break;
          case 68: 
            { return retornarSimbolo(AGREGAR_COMPONENTE, "AGREGAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 144: break;
          case 69: 
            { return retornarSimbolo(FECHA_MODIFICACION, "FECHA_MODIFICACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 145: break;
          case 70: 
            { return retornarSimbolo(ELIMINAR_COMPONENTE, "ELIMINAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 146: break;
          case 71: 
            { return retornarSimbolo(ELIMINAR_FORMULARIO, "ELIMINAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 147: break;
          case 72: 
            { return retornarSimbolo(CREDENCIALES_USUARIO, "CREDENCIALES_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 148: break;
          case 73: 
            { return retornarSimbolo(MODIFICAR_COMPONENTE, "MODIFICAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 149: break;
          case 74: 
            { return retornarSimbolo(MODIFICAR_FORMULARIO, "MODIFICAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 150: break;
          case 75: 
            { return retornarSimbolo(PARAMETROS_COMPONENTE, "PARAMETROS_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 151: break;
          case 76: 
            { return retornarSimbolo(PARAMETROS_FORMULARIO, "PARAMETROS_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerIndigo [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerIndigo scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerIndigo(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}