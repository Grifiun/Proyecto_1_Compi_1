
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package gramatica_importacion_formularios;

import java_cup.runtime.*;
import gramatica_importacion_formularios.ParserImportacionDatosSym;
import gramatica_importacion_formularios.LexerImportacionDatos;
import clasesDAO.Token;
import clasesDAO.TokenError;
import clasesDAO.TokenParametro;
import clasesDAO.BloqueParametros;
import java.util.ArrayList;
import funciones.FuncionesSolicitudes;
import funciones.FuncionesComponentes;
import funciones.FuncionesUsuario;
import funciones.FuncionesFormularios;
import clasesDAOUsuario.Usuario;
import clasesDAOFormularios.Formulario;
import clasesDAOFormularios.Componente;
import clasesDAOFormularios.Registro;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserImportacionDatos extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserImportacionDatosSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserImportacionDatos() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserImportacionDatos(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserImportacionDatos(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\006\007\000\002\007\005\000\002\007\003" +
    "\000\002\007\003\000\002\010\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\005\000" +
    "\002\014\005\000\002\016\005\000\002\017\005\000\002" +
    "\020\005\000\002\021\005\000\002\022\005\000\002\015" +
    "\005\000\002\023\005\000\002\024\005\000\002\025\005" +
    "\000\002\026\005\000\002\027\005\000\002\030\005\000" +
    "\002\031\005\000\002\032\005\000\002\033\005\000\002" +
    "\034\005\000\002\045\003\000\002\046\003\000\002\047" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\003" +
    "\000\002\037\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\050" +
    "\002\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\003\005\012\007\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufffe\001\002\000\004\002\266" +
    "\001\002\000\004\006\010\001\002\000\004\004\011\001" +
    "\002\000\024\003\031\013\027\014\033\015\024\016\023" +
    "\017\026\020\015\021\016\056\034\001\002\000\006\005" +
    "\ufff7\011\ufff7\001\002\000\006\005\ufff4\011\ufff4\001\002" +
    "\000\006\005\ufff8\011\ufff8\001\002\000\004\010\263\001" +
    "\002\000\004\010\261\001\002\000\006\005\255\011\254" +
    "\001\002\000\006\005\ufffa\011\ufffa\001\002\000\006\005" +
    "\ufff5\011\ufff5\001\002\000\006\005\ufff3\011\ufff3\001\002" +
    "\000\004\010\247\001\002\000\004\010\245\001\002\000" +
    "\006\005\ufff2\011\ufff2\001\002\000\004\010\235\001\002" +
    "\000\004\010\233\001\002\000\006\005\ufff6\011\ufff6\001" +
    "\002\000\006\005\ufff9\011\ufff9\001\002\000\006\005\ufffc" +
    "\011\ufffc\001\002\000\004\010\231\001\002\000\004\010" +
    "\035\001\002\000\004\006\036\001\002\000\006\003\041" +
    "\004\040\001\002\000\006\007\227\011\226\001\002\000" +
    "\030\025\070\026\062\027\055\030\064\031\044\032\061" +
    "\033\045\034\072\035\057\036\067\037\052\001\002\000" +
    "\006\007\uffee\011\uffee\001\002\000\006\007\uffef\011\uffef" +
    "\001\002\000\006\005\uffe6\011\uffe6\001\002\000\004\010" +
    "\224\001\002\000\004\010\220\001\002\000\006\005\uffea" +
    "\011\uffea\001\002\000\006\005\uffe1\011\uffe1\001\002\000" +
    "\006\005\216\011\215\001\002\000\006\005\uffe3\011\uffe3" +
    "\001\002\000\004\010\210\001\002\000\006\005\uffe8\011" +
    "\uffe8\001\002\000\006\005\uffe9\011\uffe9\001\002\000\004" +
    "\010\176\001\002\000\006\005\uffe2\011\uffe2\001\002\000" +
    "\004\010\174\001\002\000\006\005\uffe5\011\uffe5\001\002" +
    "\000\004\010\166\001\002\000\004\010\163\001\002\000" +
    "\006\005\uffe4\011\uffe4\001\002\000\004\010\161\001\002" +
    "\000\006\005\uffeb\011\uffeb\001\002\000\006\005\uffe7\011" +
    "\uffe7\001\002\000\004\010\156\001\002\000\004\010\146" +
    "\001\002\000\006\005\uffe0\011\uffe0\001\002\000\004\010" +
    "\073\001\002\000\126\005\uffa4\011\uffa4\013\125\014\111" +
    "\015\077\016\124\017\123\020\121\022\136\023\135\024" +
    "\102\025\133\026\122\027\114\030\106\031\144\032\075" +
    "\033\126\034\145\035\141\036\137\037\117\040\143\041" +
    "\142\042\101\043\127\044\112\045\132\046\134\047\074" +
    "\050\110\051\104\052\131\053\140\054\100\055\130\056" +
    "\105\060\115\061\107\063\076\064\120\065\116\001\002" +
    "\000\006\005\uff88\011\uff88\001\002\000\006\005\uff95\011" +
    "\uff95\001\002\000\006\005\uffaa\011\uffaa\001\002\000\006" +
    "\005\uffa1\011\uffa1\001\002\000\006\005\uff83\011\uff83\001" +
    "\002\000\006\005\uff8d\011\uff8d\001\002\000\006\005\uff9b" +
    "\011\uff9b\001\002\000\006\005\uffd1\011\uffd1\001\002\000" +
    "\006\005\uff86\011\uff86\001\002\000\006\005\uff81\011\uff81" +
    "\001\002\000\006\005\uff97\011\uff97\001\002\000\006\005" +
    "\uffac\011\uffac\001\002\000\006\005\uff87\011\uff87\001\002" +
    "\000\006\005\uffa2\011\uffa2\001\002\000\006\005\uff8b\011" +
    "\uff8b\001\002\000\006\005\uffa8\011\uffa8\001\002\000\006" +
    "\005\uff98\011\uff98\001\002\000\006\005\uffad\011\uffad\001" +
    "\002\000\006\005\uffab\011\uffab\001\002\000\006\005\uff90" +
    "\011\uff90\001\002\000\006\005\uffa9\011\uffa9\001\002\000" +
    "\006\005\uff9e\011\uff9e\001\002\000\006\005\uff9a\011\uff9a" +
    "\001\002\000\006\005\uff9f\011\uff9f\001\002\000\006\005" +
    "\uffa0\011\uffa0\001\002\000\006\005\uffa3\011\uffa3\001\002" +
    "\000\006\005\uff94\011\uff94\001\002\000\006\005\uff8c\011" +
    "\uff8c\001\002\000\006\005\uff82\011\uff82\001\002\000\006" +
    "\005\uff85\011\uff85\001\002\000\006\005\uff8a\011\uff8a\001" +
    "\002\000\006\005\uff99\011\uff99\001\002\000\006\005\uff89" +
    "\011\uff89\001\002\000\006\005\uff9c\011\uff9c\001\002\000" +
    "\006\005\uff9d\011\uff9d\001\002\000\006\005\uff91\011\uff91" +
    "\001\002\000\006\005\uff84\011\uff84\001\002\000\006\005" +
    "\uff92\011\uff92\001\002\000\006\005\uff8e\011\uff8e\001\002" +
    "\000\006\005\uff8f\011\uff8f\001\002\000\006\005\uff96\011" +
    "\uff96\001\002\000\006\005\uff93\011\uff93\001\002\000\126" +
    "\005\uffa4\011\uffa4\013\125\014\111\015\077\016\124\017" +
    "\123\020\121\022\136\023\135\024\102\025\133\026\122" +
    "\027\114\030\106\031\144\032\075\033\126\034\145\035" +
    "\141\036\137\037\117\040\143\041\142\042\101\043\127" +
    "\044\112\045\132\046\134\047\074\050\110\051\104\052" +
    "\131\053\140\054\100\055\130\056\105\061\150\062\155" +
    "\063\147\064\153\065\152\001\002\000\006\005\uffb1\011" +
    "\uffb1\001\002\000\006\005\uffaf\011\uffaf\001\002\000\006" +
    "\005\uffae\011\uffae\001\002\000\006\005\uffb2\011\uffb2\001" +
    "\002\000\006\005\uffb0\011\uffb0\001\002\000\006\005\uffd7" +
    "\011\uffd7\001\002\000\006\005\uffb3\011\uffb3\001\002\000" +
    "\004\065\160\001\002\000\006\005\uffcf\011\uffcf\001\002" +
    "\000\006\005\uffcb\011\uffcb\001\002\000\004\065\160\001" +
    "\002\000\006\005\uffd5\011\uffd5\001\002\000\004\064\164" +
    "\001\002\000\006\005\uffcd\011\uffcd\001\002\000\006\005" +
    "\uffd8\011\uffd8\001\002\000\012\050\172\051\171\052\167" +
    "\053\173\001\002\000\006\005\uffbe\011\uffbe\001\002\000" +
    "\006\005\uffd3\011\uffd3\001\002\000\006\005\uffbd\011\uffbd" +
    "\001\002\000\006\005\uffbf\011\uffbf\001\002\000\006\005" +
    "\uffbc\011\uffbc\001\002\000\004\065\160\001\002\000\006" +
    "\005\uffd0\011\uffd0\001\002\000\022\040\201\041\202\042" +
    "\207\043\205\044\203\045\204\046\206\047\177\001\002" +
    "\000\006\005\uffc0\011\uffc0\001\002\000\006\005\uffd6\011" +
    "\uffd6\001\002\000\006\005\uffc7\011\uffc7\001\002\000\006" +
    "\005\uffc6\011\uffc6\001\002\000\006\005\uffc3\011\uffc3\001" +
    "\002\000\006\005\uffc2\011\uffc2\001\002\000\006\005\uffc4" +
    "\011\uffc4\001\002\000\006\005\uffc1\011\uffc1\001\002\000" +
    "\006\005\uffc5\011\uffc5\001\002\000\132\005\uffa4\011\uffa4" +
    "\013\125\014\111\015\077\016\124\017\123\020\121\022" +
    "\136\023\135\024\102\025\133\026\122\027\114\030\106" +
    "\031\144\032\075\033\126\034\145\035\141\036\137\037" +
    "\117\040\143\041\142\042\101\043\127\044\112\045\132" +
    "\046\134\047\074\050\110\051\104\052\131\053\140\054" +
    "\100\055\130\056\105\057\214\060\212\061\150\062\155" +
    "\063\147\064\153\065\152\001\002\000\006\005\uffce\011" +
    "\uffce\001\002\000\006\005\uffa6\011\uffa6\001\002\000\006" +
    "\005\uffa5\011\uffa5\001\002\000\006\005\uffa7\011\uffa7\001" +
    "\002\000\030\025\070\026\062\027\055\030\064\031\044" +
    "\032\061\033\045\034\072\035\057\036\067\037\052\001" +
    "\002\000\006\007\uffed\011\uffed\001\002\000\006\005\uffec" +
    "\011\uffec\001\002\000\006\054\221\055\223\001\002\000" +
    "\006\005\uffbb\011\uffbb\001\002\000\006\005\uffd2\011\uffd2" +
    "\001\002\000\006\005\uffba\011\uffba\001\002\000\132\005" +
    "\uffa4\011\uffa4\013\125\014\111\015\077\016\124\017\123" +
    "\020\121\022\136\023\135\024\102\025\133\026\122\027" +
    "\114\030\106\031\144\032\075\033\126\034\145\035\141" +
    "\036\137\037\117\040\143\041\142\042\101\043\127\044" +
    "\112\045\132\046\134\047\074\050\110\051\104\052\131" +
    "\053\140\054\100\055\130\056\105\057\214\060\212\061" +
    "\150\062\155\063\147\064\153\065\152\001\002\000\006" +
    "\005\uffd4\011\uffd4\001\002\000\004\004\040\001\002\000" +
    "\006\005\ufff1\011\ufff1\001\002\000\006\007\ufff0\011\ufff0" +
    "\001\002\000\132\005\uffa4\011\uffa4\013\125\014\111\015" +
    "\077\016\124\017\123\020\121\022\136\023\135\024\102" +
    "\025\133\026\122\027\114\030\106\031\144\032\075\033" +
    "\126\034\145\035\141\036\137\037\117\040\143\041\142" +
    "\042\101\043\127\044\112\045\132\046\134\047\074\050" +
    "\110\051\104\052\131\053\140\054\100\055\130\056\105" +
    "\057\214\060\212\061\150\062\155\063\147\064\153\065" +
    "\152\001\002\000\006\005\uffdd\011\uffdd\001\002\000\004" +
    "\064\164\001\002\000\006\005\uffde\011\uffde\001\002\000" +
    "\126\005\uffa4\011\uffa4\013\125\014\111\015\077\016\124" +
    "\017\123\020\121\022\136\023\135\024\102\025\133\026" +
    "\122\027\114\030\106\031\144\032\075\033\126\034\145" +
    "\035\141\036\137\037\117\040\143\041\142\042\101\043" +
    "\127\044\112\045\132\046\134\047\074\050\110\051\104" +
    "\052\131\053\140\054\100\055\130\056\105\061\240\062" +
    "\244\063\236\064\243\065\242\001\002\000\006\005\uffb7" +
    "\011\uffb7\001\002\000\006\005\uffda\011\uffda\001\002\000" +
    "\006\005\uffb5\011\uffb5\001\002\000\006\005\uffb4\011\uffb4" +
    "\001\002\000\006\005\uffb8\011\uffb8\001\002\000\006\005" +
    "\uffb6\011\uffb6\001\002\000\006\005\uffb9\011\uffb9\001\002" +
    "\000\132\005\uffa4\011\uffa4\013\125\014\111\015\077\016" +
    "\124\017\123\020\121\022\136\023\135\024\102\025\133" +
    "\026\122\027\114\030\106\031\144\032\075\033\126\034" +
    "\145\035\141\036\137\037\117\040\143\041\142\042\101" +
    "\043\127\044\112\045\132\046\134\047\074\050\110\051" +
    "\104\052\131\053\140\054\100\055\130\056\105\057\214" +
    "\060\212\061\150\062\155\063\147\064\153\065\152\001" +
    "\002\000\006\005\uffdc\011\uffdc\001\002\000\010\022\253" +
    "\023\251\024\250\001\002\000\006\005\uffc8\011\uffc8\001" +
    "\002\000\006\005\uffc9\011\uffc9\001\002\000\006\005\uffdb" +
    "\011\uffdb\001\002\000\006\005\uffca\011\uffca\001\002\000" +
    "\022\013\027\014\033\015\024\016\023\017\026\020\015" +
    "\021\016\056\034\001\002\000\004\007\256\001\002\000" +
    "\004\002\uffff\001\002\000\006\005\ufffd\011\ufffd\001\002" +
    "\000\006\005\ufffb\011\ufffb\001\002\000\006\054\221\055" +
    "\223\001\002\000\006\005\uffd9\011\uffd9\001\002\000\004" +
    "\063\264\001\002\000\006\005\uffcc\011\uffcc\001\002\000" +
    "\006\005\uffdf\011\uffdf\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\016\005\031\006\017\013" +
    "\021\014\013\016\011\017\027\020\020\021\012\022\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\036\010\041\001\001\000" +
    "\002\001\001\000\034\011\047\012\064\015\045\023\053" +
    "\024\052\025\065\026\042\027\057\030\062\031\050\032" +
    "\055\033\046\034\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\102\050\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\153\050\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\161\001\001\000\002\001\001\000\004\045\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\174\001\001\000\002\001\001\000\004\035\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\212\044\210\050\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\216\015\045\023\053\024\052\025\065\026\042\027\057" +
    "\030\062\031\050\032\055\033\046\034\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\042\212\044\224\050\150\001\001\000\002\001\001" +
    "\000\004\010\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\212\044\231\050\150\001\001\000\002" +
    "\001\001\000\004\045\233\001\001\000\002\001\001\000" +
    "\006\043\236\050\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\212" +
    "\044\245\050\150\001\001\000\002\001\001\000\004\041" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\256\006\257\013" +
    "\021\014\013\016\011\017\027\020\020\021\012\022\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\261\001\001\000\002" +
    "\001\001\000\004\046\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserImportacionDatos$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserImportacionDatos$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserImportacionDatos$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Funciones a importar	
	private FuncionesSolicitudes funcionesSolicitudes = new FuncionesSolicitudes();
	private FuncionesUsuario funcionesUsuario = new FuncionesUsuario();
	private FuncionesFormularios funcionesFormularios = new FuncionesFormularios();
	private FuncionesComponentes funcionesComponentes = new FuncionesComponentes();
		
	//Listados
	private Formulario formularioLeido;

	//Controlador de error sintactico
	@Override
	public void syntax_error(Symbol a){
		Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna
		
		String msgError = "Se esperaba: ";	
		//System.out.println("error de sintaxis: linea: "+tokenError.getLinea()+" columna: "+tokenError.getColumna());
		
		for(int i = 0; i < expected_token_ids().size(); i++){
			//msgError = msgError + mensajes[expected_token_ids().get(i)];
			msgError = msgError + symbl_name_from_id(expected_token_ids().get(i)) + " ";

			if(i < expected_token_ids().size() - 1)
				msgError = msgError + ", ";			
		}

		funcionesSolicitudes.agregarNuevoError("ERROR SINTACTICO", tokenError.getLexema(), msgError, tokenError.getLinea(), tokenError.getColumna());
		//System.out.println(msgError);
		//recibe tipo error, lexema error, mensaje, linea, columna
		//TokenError tokenErrorAux = new TokenError("SINTACTICO", tokenError.getLexema(), msgError, tokenError.getLinea(), tokenError.getColumna());
		//listadoErroresSintacticos.add(tokenErrorAux);
	}

	public Formulario getFormularioLeido(){
		return formularioLeido;
	}

	public ArrayList<TokenError> getListadoErroresParser(){
		return funcionesSolicitudes.getListadoErroresParser();
	}

    public ParserImportacionDatos(LexerImportacionDatos lex){
        super(lex);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserImportacionDatos$actions {
  private final ParserImportacionDatos parser;

  /** Constructor */
  CUP$ParserImportacionDatos$actions(ParserImportacionDatos parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserImportacionDatos$do_action_part00000000(
    int                        CUP$ParserImportacionDatos$act_num,
    java_cup.runtime.lr_parser CUP$ParserImportacionDatos$parser,
    java.util.Stack            CUP$ParserImportacionDatos$stack,
    int                        CUP$ParserImportacionDatos$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserImportacionDatos$result;

      /* select the action based on the action number */
      switch (CUP$ParserImportacionDatos$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).value;
		RESULT = start_val;
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserImportacionDatos$parser.done_parsing();
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= db_formularios 
            {
              Object RESULT =null;
		 System.out.println("Se leyeron formularios");
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // db_formularios ::= NEWFORMULARIO PARENTESIS_INICIO LLAVES_INICIO sub_bloque_datos_formularios LLAVES_FIN PARENTESIS_FIN 
            {
              Object RESULT =null;
		int formularioAuxleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int formularioAuxright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Formulario formularioAux = (Formulario)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
			
			if(formularioAux != null){//si el form es valido
				formularioLeido = formularioAux;
			}			
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("db_formularios",1, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-5)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // db_formularios ::= error 
            {
              Object RESULT =null;
		System.out.println("error en el bloque inicio/cierre form"); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("db_formularios",1, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sub_bloque_datos_formularios ::= sub_bloque_datos_formularios COMA datos_formularios 
            {
              Formulario RESULT =null;
		int formularioAuxleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int formularioAuxright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Formulario formularioAux = (Formulario)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro parametro = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		
			if(formularioAux == null){
				formularioAux = new Formulario();
			}

			formularioAux = funcionesFormularios.agregarParametroFormulario(formularioAux, parametro);//agregamos el parametro
			RESULT = formularioAux;//Enviamos el formulario a las producciones superiores
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("sub_bloque_datos_formularios",2, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sub_bloque_datos_formularios ::= datos_formularios 
            {
              Formulario RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro parametro = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		
			//Cuando el primer bloque es un parametro ordinario
			Formulario formularioAux = new Formulario();
			formularioAux = funcionesFormularios.agregarParametroFormulario(formularioAux, parametro);//agregamos el parametro

			RESULT = formularioAux;//Enviamos el formulario a las producciones superiores
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("sub_bloque_datos_formularios",2, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sub_bloque_datos_formularios ::= sub_bloque_datos_formularios COMA estructura_formulario 
            {
              Formulario RESULT =null;
		int formularioAuxleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int formularioAuxright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Formulario formularioAux = (Formulario)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int listadoComponentesleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int listadoComponentesright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		ArrayList<Componente> listadoComponentes = (ArrayList<Componente>)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		
			if(formularioAux == null){
				formularioAux = new Formulario();
			}

			formularioAux.setListadoComponentes(listadoComponentes);
			RESULT = formularioAux;
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("sub_bloque_datos_formularios",2, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sub_bloque_datos_formularios ::= estructura_formulario 
            {
              Formulario RESULT =null;
		int listadoComponentesleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int listadoComponentesright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		ArrayList<Componente> listadoComponentes = (ArrayList<Componente>)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		
			//Cuando el primer bloque es una estructura de componentes, inicalizamos
			Formulario formularioAux = new Formulario();
			formularioAux.setListadoComponentes(listadoComponentes);

			RESULT = formularioAux;//Enviamos el formulario a las producciones superiores
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("sub_bloque_datos_formularios",2, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sub_bloque_datos_formularios ::= error 
            {
              Formulario RESULT =null;
		System.out.println("error en el bloque de parametros del formulario");
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("sub_bloque_datos_formularios",2, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // datos_formularios ::= parametro_id_form 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_formularios",3, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datos_formularios ::= parametro_titulo 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_formularios",3, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // datos_formularios ::= parametro_nombre 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_formularios",3, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // datos_formularios ::= parametro_tema 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_formularios",3, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datos_formularios ::= parametro_usuario_creacion 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_formularios",3, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // datos_formularios ::= parametro_fecha_creacion 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_formularios",3, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // datos_formularios ::= parametro_publico 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_formularios",3, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura_formulario ::= ESTRUCTURA DOS_PUNTOS PARENTESIS_INICIO bloque_datos_estructura_fornulario PARENTESIS_FIN 
            {
              ArrayList<Componente> RESULT =null;
		int listadoComponentesleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).left;
		int listadoComponentesright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).right;
		ArrayList<Componente> listadoComponentes = (ArrayList<Componente>)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).value;
		
			System.out.println(" Largo listado componentes: ");
			RESULT = listadoComponentes;
			System.out.println(" largo: "+listadoComponentes.size());
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("estructura_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-4)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_datos_estructura_fornulario ::= bloque_datos_estructura_fornulario COMA datos_estructura_fornulario 
            {
              ArrayList<Componente> RESULT =null;
		int listadoComponentesleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int listadoComponentesright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		ArrayList<Componente> listadoComponentes = (ArrayList<Componente>)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Componente comp = (Componente)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		
			if(listadoComponentes == null)
				listadoComponentes = new ArrayList();

			listadoComponentes.add(comp);
			RESULT = listadoComponentes;
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("bloque_datos_estructura_fornulario",5, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque_datos_estructura_fornulario ::= datos_estructura_fornulario 
            {
              ArrayList<Componente> RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Componente comp = (Componente)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
			
			ArrayList<Componente> listadoComponentes = new ArrayList();//creamos un nuevo arrList
			listadoComponentes.add(comp);//Agregamos el componente y subimos el listado en la produccion
			RESULT = listadoComponentes;
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("bloque_datos_estructura_fornulario",5, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_datos_estructura_fornulario ::= error 
            {
              ArrayList<Componente> RESULT =null;
		 System.out.println("Error en le bloque de estructuras"); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("bloque_datos_estructura_fornulario",5, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datos_estructura_fornulario ::= LLAVES_INICIO bloque_parametros_parametros LLAVES_FIN 
            {
              Componente RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token inicio = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).right;
		BloqueParametros param = (BloqueParametros)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token fin = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		
			//Agregamos donde inicia cada bloque por si acaso
			param = funcionesSolicitudes.agregarInicioFinBloque(inicio, fin, param);
			//Obtenemos el tipo de clase que tiene el componente
			int indexClase = param.getListadoTipoParametros().indexOf("\"CLASE\"");
			String clase = param.getListadoParametros().get(indexClase).getLexema();
			System.out.println("Agregamos un nuevo componente");
			Componente componenteAux;

			//Creamos el tipo de componente segun la clase                               
			componenteAux = funcionesComponentes.crearComponentePorClase(clase);
			//Agregamos los datos al componente
			componenteAux = funcionesComponentes.agregarDatosCompoente(param, componenteAux);

			RESULT = componenteAux;//Enviamos el componente y sus datos hacia arriba
			//listadoFormularios = funcionesComponentes.agregarComponenteFormularioPorId(componenteAux, listadoFormularios, listadoIdFormularios);
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("datos_estructura_fornulario",6, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_parametros_parametros ::= bloque_parametros_parametros COMA parametros_componente 
            {
              BloqueParametros RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		BloqueParametros a = (BloqueParametros)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro b = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 
			RESULT = funcionesSolicitudes.agregarParametroABloque(a, b, "ESTRUCTURA_FORMULARIO", "PARAMETROS_COMPONENTE");
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("bloque_parametros_parametros",7, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_parametros_parametros ::= parametros_componente 
            {
              BloqueParametros RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 
			RESULT = funcionesSolicitudes.agregarParametroABloque(null, a, "ESTRUCTURA_FORMULARIO", "PARAMETROS_COMPONENTE");	
		
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("bloque_parametros_parametros",7, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros_componente ::= parametro_id_componente 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros_componente ::= parametro_nombre_campo 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros_componente ::= parametro_clase 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros_componente ::= parametro_indice 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_componente ::= parametro_texto_visible 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_componente ::= parametro_alineacion 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_componente ::= parametro_requerido 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_componente ::= parametro_opciones 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_componente ::= parametro_filas 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_componente ::= parametro_columnas 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_componente ::= parametro_URL 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		TokenParametro a = (TokenParametro)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametros_componente",8, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametro_fecha_creacion ::= FECHA_CREACION DOS_PUNTOS valores_fecha 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro_id_form ::= ID_FORMULARIO DOS_PUNTOS valores_id 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_id_form",10, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro_titulo ::= TITULO DOS_PUNTOS valores_texto_visible 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_titulo",12, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametro_nombre ::= NOMBRE DOS_PUNTOS valores_texto_visible 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_nombre",13, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametro_tema ::= TEMA DOS_PUNTOS valores_tema 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_tema",14, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametro_usuario_creacion ::= USUARIO_CREACION DOS_PUNTOS valores_usuario_id 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_usuario_creacion",15, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro_publico ::= PUBLICO DOS_PUNTOS valores_requerido 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_publico",16, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro_id_componente ::= ID_COMPONENTE DOS_PUNTOS valores_id 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_id_componente",11, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametro_nombre_campo ::= NOMBRE_CAMPO DOS_PUNTOS valores_password 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",17, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametro_clase ::= CLASE DOS_PUNTOS valores_clase 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_clase",18, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro_indice ::= INDICE DOS_PUNTOS valores_digito 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_indice",19, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro_texto_visible ::= TEXTO_VISIBLE DOS_PUNTOS valores_texto_visible 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_texto_visible",20, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_alineacion ::= ALINEACION DOS_PUNTOS valores_alineacion 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",21, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_requerido ::= REQUERIDO DOS_PUNTOS valores_requerido 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_requerido",22, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_opciones ::= OPCIONES DOS_PUNTOS valores_opciones 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_opciones",23, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro_filas ::= FILAS DOS_PUNTOS valores_digito 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_filas",24, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_columnas ::= COLUMNAS DOS_PUNTOS valores_digito 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_columnas",25, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_URL ::= URL DOS_PUNTOS valores_texto_visible 
            {
              TokenParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = new TokenParametro("\""+a.getTipoToken()+"\"", b.getLexema() ,a.getLinea(), a.getColumna()); 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("parametro_URL",26, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.elementAt(CUP$ParserImportacionDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valores_id ::= VALOR_ID 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_id",35, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valores_fecha ::= VALOR_FECHA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_fecha",36, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valores_digito ::= DIGITO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_digito",37, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valores_tema ::= DARK 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_tema",31, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valores_tema ::= BLUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_tema",31, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valores_tema ::= WHITE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_tema",31, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valores_clase ::= CAMPO_TEXTO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valores_clase ::= AREA_TEXTO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valores_clase ::= CHECKBOX 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valores_clase ::= RADIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valores_clase ::= FICHERO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valores_clase ::= IMAGEN 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valores_clase ::= COMBO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valores_clase ::= BOTON 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_clase",27, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valores_alineacion ::= CENTRO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_alineacion",28, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valores_alineacion ::= DERECHA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_alineacion",28, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valores_alineacion ::= IZQUIERDA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_alineacion",28, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valores_alineacion ::= JUSTIFICAR 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_alineacion",28, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valores_requerido ::= SI 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_requerido",29, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valores_requerido ::= NO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_requerido",29, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valores_usuario_id ::= VALOR_PASSWORD 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_usuario_id",33, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valores_usuario_id ::= DIGITO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_usuario_id",33, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valores_usuario_id ::= VALOR_FECHA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_usuario_id",33, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valores_usuario_id ::= VALOR_ID 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_usuario_id",33, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valores_usuario_id ::= VALOR_ITEMS_SIN_ESPACIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_usuario_id",33, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valores_usuario_id ::= valores_reservados 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_usuario_id",33, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valores_password ::= VALOR_PASSWORD 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_password",32, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valores_password ::= DIGITO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_password",32, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valores_password ::= VALOR_FECHA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_password",32, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valores_password ::= VALOR_ID 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_password",32, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valores_password ::= VALOR_ITEMS_SIN_ESPACIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_password",32, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valores_password ::= valores_reservados 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_password",32, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valores_opciones ::= VALOR_ITEMS_CON_ESPACIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_opciones",30, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valores_opciones ::= VALOR_ITEMS_SIN_ESPACIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_opciones",30, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valores_opciones ::= DIGITO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_opciones",30, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valores_opciones ::= VALOR_FECHA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_opciones",30, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valores_opciones ::= VALOR_ID 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_opciones",30, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valores_opciones ::= valores_reservados 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_opciones",30, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valores_texto_visible ::= VALOR_TEXTO_VISIBLE_CON_ESPACIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_texto_visible",34, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valores_texto_visible ::= VALOR_ITEMS_CON_ESPACIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_texto_visible",34, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valores_texto_visible ::= valores_password 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_texto_visible",34, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valores_reservados ::= 
            {
              Token RESULT =null;

              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valores_reservados ::= ID_FORMULARIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valores_reservados ::= TITULO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valores_reservados ::= NOMBRE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valores_reservados ::= TEMA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valores_reservados ::= USUARIO_CREACION 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valores_reservados ::= FECHA_CREACION 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valores_reservados ::= DARK 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valores_reservados ::= BLUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valores_reservados ::= WHITE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valores_reservados ::= ID_COMPONENTE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valores_reservados ::= NOMBRE_CAMPO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valores_reservados ::= CLASE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valores_reservados ::= INDICE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valores_reservados ::= TEXTO_VISIBLE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valores_reservados ::= ALINEACION 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valores_reservados ::= REQUERIDO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valores_reservados ::= OPCIONES 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valores_reservados ::= FILAS 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valores_reservados ::= COLUMNAS 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valores_reservados ::= URL 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valores_reservados ::= CAMPO_TEXTO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valores_reservados ::= AREA_TEXTO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valores_reservados ::= CHECKBOX 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valores_reservados ::= RADIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valores_reservados ::= FICHERO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valores_reservados ::= IMAGEN 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valores_reservados ::= COMBO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valores_reservados ::= BOTON 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valores_reservados ::= CENTRO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valores_reservados ::= IZQUIERDA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valores_reservados ::= DERECHA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valores_reservados ::= JUSTIFICAR 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valores_reservados ::= SI 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valores_reservados ::= NO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valores_reservados ::= ESTRUCTURA 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserImportacionDatos$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserImportacionDatos$result = parser.getSymbolFactory().newSymbol("valores_reservados",38, ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacionDatos$stack.peek()), RESULT);
            }
          return CUP$ParserImportacionDatos$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserImportacionDatos$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserImportacionDatos$do_action(
    int                        CUP$ParserImportacionDatos$act_num,
    java_cup.runtime.lr_parser CUP$ParserImportacionDatos$parser,
    java.util.Stack            CUP$ParserImportacionDatos$stack,
    int                        CUP$ParserImportacionDatos$top)
    throws java.lang.Exception
    {
              return CUP$ParserImportacionDatos$do_action_part00000000(
                               CUP$ParserImportacionDatos$act_num,
                               CUP$ParserImportacionDatos$parser,
                               CUP$ParserImportacionDatos$stack,
                               CUP$ParserImportacionDatos$top);
    }
}

}