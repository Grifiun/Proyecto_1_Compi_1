
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package gramatica_reporteria;

import java_cup.runtime.*;
import gramatica_reporteria.ParserReporteriaSym;
import gramatica_reporteria.LexerReporteria;
import java_cup.runtime.XMLElement;
import clasesDAO.BloqueParametros;
import funciones.FuncionesSolicitudes;
import clasesDAO.Token;
import clasesDAO.TokenError;
import clasesDAO.TokenParametro;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserReporteria extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserReporteriaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserReporteria() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserReporteria(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserReporteria(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\012\000\002\003\003\000\002\004\004" +
    "\000\002\004\005\000\002\004\003\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\007\006\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\003\004\022\007\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\074\001\002\000\004\002\000" +
    "\001\002\000\004\023\010\001\002\000\004\024\011\001" +
    "\002\000\004\012\012\001\002\000\004\007\013\001\002" +
    "\000\004\030\014\001\002\000\006\003\ufff6\004\ufff6\001" +
    "\002\000\006\003\016\004\020\001\002\000\006\002\ufffa" +
    "\025\ufffa\001\002\000\006\002\uffff\025\041\001\002\000" +
    "\030\003\030\005\026\017\021\020\035\021\034\022\031" +
    "\023\025\024\023\025\024\026\032\030\022\001\002\000" +
    "\026\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\017\uffe7\020\uffe7\001\002\000\026\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\001\002\000\026\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\017\uffe2\020\uffe2\001\002\000\026\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\001\002\000\026\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\001\002\000\006\002\ufffc\025\ufffc\001\002\000\006\005" +
    "\ufff8\010\ufff8\001\002\000\006\005\ufff7\010\ufff7\001\002" +
    "\000\026\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\001\002\000\026" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\001\002\000\006\005\037" +
    "\010\036\001\002\000\006\005\uffe5\010\uffe5\001\002\000" +
    "\026\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\020\uffe6\001\002\000\024\017" +
    "\021\020\035\021\034\022\031\023\025\024\023\025\024" +
    "\026\032\030\022\001\002\000\006\002\ufffb\025\ufffb\001" +
    "\002\000\006\005\ufff9\010\ufff9\001\002\000\004\004\043" +
    "\001\002\000\004\002\ufffe\001\002\000\026\003\046\017" +
    "\021\020\035\021\047\022\031\023\025\024\023\025\024" +
    "\026\032\030\022\001\002\000\024\005\073\006\054\007" +
    "\055\011\053\013\051\014\056\015\060\017\052\020\057" +
    "\001\002\000\024\005\uffeb\006\uffeb\007\uffeb\011\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\001\002\000\024" +
    "\005\uffea\006\uffea\007\uffea\011\uffea\013\uffea\014\uffea\015" +
    "\uffea\017\uffea\020\uffea\001\002\000\044\003\046\005\uffe5" +
    "\006\uffe5\007\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\017" +
    "\021\020\035\021\047\022\031\023\025\024\023\025\024" +
    "\026\032\030\022\001\002\000\024\005\ufff2\006\054\007" +
    "\055\011\053\013\051\014\056\015\060\017\052\020\057" +
    "\001\002\000\006\026\063\027\061\001\002\000\026\003" +
    "\046\017\021\020\035\021\047\022\031\023\025\024\023" +
    "\025\024\026\032\030\022\001\002\000\006\026\063\027" +
    "\061\001\002\000\006\026\063\027\061\001\002\000\006" +
    "\026\063\027\061\001\002\000\006\026\063\027\061\001" +
    "\002\000\026\003\046\017\021\020\035\021\047\022\031" +
    "\023\025\024\023\025\024\026\032\030\022\001\002\000" +
    "\006\026\063\027\061\001\002\000\024\005\uffdf\006\uffdf" +
    "\007\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\001\002\000\024\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\001\002\000" +
    "\024\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\001\002\000\024\005\ufff3\006" +
    "\ufff3\007\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3" +
    "\020\ufff3\001\002\000\024\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee\001\002" +
    "\000\024\005\ufff1\006\ufff1\007\ufff1\011\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\017\ufff1\020\ufff1\001\002\000\024\005\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\001\002\000\024\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020\uffec\001" +
    "\002\000\024\005\ufff4\006\ufff4\007\ufff4\011\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\017\ufff4\020\057\001\002\000\024\005" +
    "\uffed\006\uffed\007\uffed\011\uffed\013\uffed\014\uffed\015\uffed" +
    "\017\uffed\020\uffed\001\002\000\004\002\ufff5\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\014\001\001\000\002\001\001\000\004\004\016" +
    "\001\001\000\002\001\001\000\004\007\041\001\001\000" +
    "\006\005\032\012\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\043\012\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\047\012\044\001\001\000\002\001\001\000\004\013\071" +
    "\001\001\000\006\010\070\012\044\001\001\000\004\013" +
    "\067\001\001\000\004\013\066\001\001\000\004\013\065" +
    "\001\001\000\004\013\064\001\001\000\006\010\063\012" +
    "\044\001\001\000\004\013\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserReporteria$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserReporteria$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserReporteria$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Listado de errores	
	private FuncionesSolicitudes funcionesSolicitudes = new FuncionesSolicitudes();
	private ArrayList<BloqueParametros> listadoSolicitudes = new ArrayList();
	//Controlador de error sintactico
	
	@Override
	public void syntax_error(Symbol a){
		Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna		
		String msgError = "Se esperaba: ";	
		System.out.println("error de sintaxis: linea: "+tokenError.getLexema()+" "+tokenError.getLinea()+" columna: "+tokenError.getColumna());
		
		int linea = tokenError.getLinea();
		int columna = tokenError.getColumna();

		for(int i = 0; i < expected_token_ids().size(); i++){
			//msgError = msgError + mensajes[expected_token_ids().get(i)];
			msgError = msgError + symbl_name_from_id(expected_token_ids().get(i)) + " ";

			if(i < expected_token_ids().size() - 1)
				msgError = msgError + ", ";			
		}
		tokenError = null;

		funcionesSolicitudes.agregarNuevoError("ERROR SINTACTICO", "Faltan tokens", msgError, linea, columna);
		//System.out.println(msgError);
		//recibe tipo error, lexema error, mensaje, linea, columna
		//TokenError tokenErrorAux = new TokenError("SINTACTICO", tokenError.getLexema(), msgError, tokenError.getLinea(), tokenError.getColumna());
		//listadoErroresSintacticos.add(tokenErrorAux);
	}

	public ArrayList<TokenError> getListadoErroresParser(){
		return funcionesSolicitudes.getListadoErroresParser();
	}

	public void agregarSolicitud(BloqueParametros bloqueAux){
		this.listadoSolicitudes.add(bloqueAux);
	}

	public ArrayList<BloqueParametros> getListadoSolicitudes(){
		return this.listadoSolicitudes;
	}

	public void imprimirErrores(){
		funcionesSolicitudes.imprimirListadoErrores();
	}

    public ParserReporteria(LexerReporteria lex){
        super(lex);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserReporteria$actions {
  private final ParserReporteria parser;

  /** Constructor */
  CUP$ParserReporteria$actions(ParserReporteria parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserReporteria$do_action_part00000000(
    int                        CUP$ParserReporteria$act_num,
    java_cup.runtime.lr_parser CUP$ParserReporteria$parser,
    java.util.Stack            CUP$ParserReporteria$stack,
    int                        CUP$ParserReporteria$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserReporteria$result;

      /* select the action based on the action number */
      switch (CUP$ParserReporteria$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-1)).value;
		RESULT = start_val;
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-1)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserReporteria$parser.done_parsing();
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= sqform_bloque_parametros 
            {
              Object RESULT =null;
		 System.out.println("Se detecto una entrada para SQForm\n"); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sqform_bloque_parametros ::= SELECT TO FORM MENOS MAYOR sqform_valores_identificador_formulario sqform_bloque_parametros_nombre_campo 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_bloque_parametros",1, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-6)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sqform_bloque_parametros ::= SELECT TO FORM MENOS MAYOR sqform_valores_identificador_formulario sqform_bloque_parametros_nombre_campo sqform_bloque_parametros_where 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_bloque_parametros",1, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-7)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sqform_bloque_parametros ::= error 
            {
              Object RESULT =null;
		 System.out.println(" Error en el bloque de [ SQForm ]");
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_bloque_parametros",1, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sqform_bloque_parametros_nombre_campo ::= CORCHETES_INICIO CORCHETES_FIN 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_bloque_parametros_nombre_campo",2, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-1)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sqform_bloque_parametros_nombre_campo ::= CORCHETES_INICIO sqform_parametros_nombre_campo CORCHETES_FIN 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_bloque_parametros_nombre_campo",2, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sqform_bloque_parametros_nombre_campo ::= error 
            {
              Object RESULT =null;
		 System.out.println(" Error en el bloque de [ Nombre Campos ]");
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_bloque_parametros_nombre_campo",2, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sqform_parametros_nombre_campo ::= sqform_parametros_nombre_campo COMA sqform_valores_nombre_campos 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_nombre_campo",3, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sqform_parametros_nombre_campo ::= sqform_valores_nombre_campos 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_nombre_campo",3, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sqform_parametros_nombre_campo ::= error 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_nombre_campo",3, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sqform_valores_identificador_formulario ::= SQFORM_VALOR_NOMRE_CAMPOS 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_identificador_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sqform_bloque_parametros_where ::= WHERE CORCHETES_INICIO sqform_parametros_where_bloque CORCHETES_FIN 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_bloque_parametros_where",5, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque AND sqform_parametros_where_bloque 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto AND"); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque OR sqform_parametros_where_bloque 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto OR"); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sqform_parametros_where_bloque ::= NOT sqform_parametros_where_bloque 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto NOT"); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-1)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque MAYOR sqform_valores_comparacion 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto > "); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque MENOR sqform_valores_comparacion 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto < "); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque MAYOR_IGUAL sqform_valores_comparacion 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto >= "); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque MENOR_IGUAL sqform_valores_comparacion 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto <="); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque MENOR_MAYOR sqform_valores_comparacion 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto <>"); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sqform_parametros_where_bloque ::= sqform_parametros_where_bloque IGUAL sqform_valores_comparacion 
            {
              Object RESULT =null;
		  System.out.println ("Se ejecuto ="); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.elementAt(CUP$ParserReporteria$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sqform_parametros_where_bloque ::= sqform_valores_nombre_campos 
            {
              Object RESULT =null;
		  System.out.println ("Se detecto campo "); 
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sqform_parametros_where_bloque ::= error 
            {
              Object RESULT =null;
		 System.out.println("Ocurrio un error en el bloque de where");
              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_parametros_where_bloque",6, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sqform_valores_nombre_campos ::= SQFORM_VALOR_NOMRE_CAMPOS 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sqform_valores_nombre_campos ::= SQFORM_VALOR_NUMERO 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sqform_valores_nombre_campos ::= AND 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sqform_valores_nombre_campos ::= OR 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sqform_valores_nombre_campos ::= NOT 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sqform_valores_nombre_campos ::= SELECT 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sqform_valores_nombre_campos ::= TO 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sqform_valores_nombre_campos ::= FORM 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sqform_valores_nombre_campos ::= WHERE 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_nombre_campos",8, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sqform_valores_comparacion ::= SQFORM_VALOR_NUMERO 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_comparacion",9, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sqform_valores_comparacion ::= SQFORM_VALOR_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserReporteria$result = parser.getSymbolFactory().newSymbol("sqform_valores_comparacion",9, ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReporteria$stack.peek()), RESULT);
            }
          return CUP$ParserReporteria$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserReporteria$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserReporteria$do_action(
    int                        CUP$ParserReporteria$act_num,
    java_cup.runtime.lr_parser CUP$ParserReporteria$parser,
    java.util.Stack            CUP$ParserReporteria$stack,
    int                        CUP$ParserReporteria$top)
    throws java.lang.Exception
    {
              return CUP$ParserReporteria$do_action_part00000000(
                               CUP$ParserReporteria$act_num,
                               CUP$ParserReporteria$parser,
                               CUP$ParserReporteria$stack,
                               CUP$ParserReporteria$top);
    }
}

}