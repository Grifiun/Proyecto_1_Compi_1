/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package gramatica_importacion_formularios;

import java_cup.runtime.*;
import clasesDAO.Token;
import clasesDAO.TokenError;
import static gramatica_importacion_formularios.ParserImportacionDatosSym.*;
import java.util.ArrayList;


/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflexImportacion.jflex</tt>
 */
public class LexerImportacionDatos implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\25\3\1\1\25\2\1\22\25\1\1\1\72\1\24\1\72\1\67"+
    "\3\72\1\4\1\5\2\72\1\7\1\66\1\13\1\72\12\71\1\6"+
    "\6\72\1\37\1\42\1\45\1\27\1\43\1\31\1\62\1\46\1\26"+
    "\1\64\1\50\1\36\1\34\1\41\1\32\1\47\1\61\1\33\1\44"+
    "\1\40\1\35\1\60\1\54\1\57\1\70\1\63\4\72\1\30\1\72"+
    "\1\22\1\53\1\70\1\51\1\11\1\14\1\70\1\55\1\23\1\70"+
    "\1\52\1\21\1\17\1\10\1\15\2\70\1\16\1\70\1\56\1\20"+
    "\1\70\1\12\3\70\1\2\1\72\1\3\1\72\42\0\14\73\1\0"+
    "\122\73\u0560\0\12\65\206\0\12\65\306\0\12\65\u019c\0\12\65\166\0"+
    "\12\65\166\0\12\65\166\0\12\65\166\0\12\65\166\0\12\65\166\0"+
    "\12\65\166\0\12\65\166\0\12\65\166\0\12\65\140\0\12\65\166\0"+
    "\12\65\106\0\12\65\u0116\0\12\65\106\0\12\65\u0746\0\12\65\46\0"+
    "\12\65\u012c\0\12\65\200\0\12\65\246\0\12\65\6\0\12\65\266\0"+
    "\12\65\126\0\12\65\206\0\12\65\6\0\12\65\u03bf\0\1\72\u8606\0"+
    "\12\65\u02a6\0\12\65\46\0\12\65\306\0\12\65\26\0\12\65\126\0"+
    "\12\65\u0196\0\12\65\u5316\0\12\65\u0586\0\12\65\u0bbc\0\12\65\200\0"+
    "\12\65\74\0\12\65\220\0\12\65\u0116\0\12\65\u0156\0\12\65\166\0"+
    "\12\65\u0176\0\12\65\146\0\12\65\146\0\12\65\u01a6\0\12\65\u0366\0"+
    "\12\65\u4e06\0\12\65\346\0\12\65\u6c74\0\62\65\u1150\0\12\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\33\0\1\11\1\0\1\12\43\0\1\13"+
    "\15\0\1\14\16\0\1\15\6\0\1\16\33\0\1\17"+
    "\35\0\1\20\14\0\1\21\3\0\1\22\20\0\1\23"+
    "\7\0\1\24\4\0\1\25\10\0\1\26\2\0\1\27"+
    "\2\0\1\30\13\0\1\31\1\0\1\32\12\0\1\33"+
    "\2\0\1\34\5\0\1\35\12\0\1\36\1\0\1\37"+
    "\15\0\1\40\11\0\1\41\10\0\1\42\2\0\1\43"+
    "\7\0\1\44\2\0\1\45\20\0\1\46\1\0\1\47"+
    "\3\0\1\50\2\0\1\51\1\52\11\0\1\53\1\54"+
    "\6\0\1\55\1\0\1\56\1\0\1\57\3\0\1\60"+
    "\1\0\1\61\3\0\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4\0\u01e0"+
    "\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0"+
    "\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0"+
    "\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\74\0\u0744"+
    "\0\74\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\74\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\74\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\74\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\74\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\74\0\u1dc4\0\u1e00\0\u1e3c"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\u2454\0\74\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\74"+
    "\0\u2760\0\u279c\0\u27d8\0\74\0\u2814\0\u2850\0\u288c\0\u28c8"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\74\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\74\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\74\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94"+
    "\0\u2fd0\0\u300c\0\74\0\u3048\0\u3084\0\74\0\u30c0\0\u30fc"+
    "\0\74\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0"+
    "\0\u32dc\0\u3318\0\u3354\0\u3390\0\74\0\u33cc\0\74\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8"+
    "\0\u3624\0\74\0\u3660\0\u369c\0\74\0\u36d8\0\u3714\0\u3750"+
    "\0\u378c\0\u37c8\0\74\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4"+
    "\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\74\0\u3a5c\0\74"+
    "\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c"+
    "\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\74\0\u3da4\0\u3de0"+
    "\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\74"+
    "\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164"+
    "\0\74\0\u41a0\0\u41dc\0\74\0\u4218\0\u4254\0\u4290\0\u42cc"+
    "\0\u4308\0\u4344\0\u4380\0\74\0\u43bc\0\u43f8\0\74\0\u4434"+
    "\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614"+
    "\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\74"+
    "\0\u47f4\0\74\0\u4830\0\u486c\0\u48a8\0\74\0\u48e4\0\u4920"+
    "\0\74\0\74\0\u495c\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88"+
    "\0\u4ac4\0\u4b00\0\u4b3c\0\74\0\74\0\u4b78\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\74\0\u4ce0\0\74\0\u4d1c\0\74"+
    "\0\u4d58\0\u4d94\0\u4dd0\0\74\0\u4e0c\0\74\0\u4e48\0\u4e84"+
    "\0\u4ec0\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\13\2\1\13\47\2\105\0\1\14\63\0\1\15"+
    "\10\16\1\17\11\16\1\0\1\15\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\16\1\26\1\16\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\16\1\36\1\16"+
    "\1\37\1\16\1\40\1\41\7\16\1\42\1\43\2\22"+
    "\1\16\1\44\1\16\1\45\12\0\1\46\62\0\1\15"+
    "\10\16\1\17\11\16\1\47\1\15\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\16\1\26\1\16\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\16\1\36\1\16"+
    "\1\37\1\16\1\40\1\41\7\16\1\42\1\43\2\22"+
    "\1\16\1\44\1\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\37\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\27\16\1\52\7\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\1\16\1\53\4\16"+
    "\1\54\4\16\1\55\21\16\1\56\1\16\1\0\5\16"+
    "\1\45\1\0\1\50\20\16\1\57\1\16\1\51\1\50"+
    "\11\16\1\60\3\16\1\61\21\16\1\0\5\16\1\45"+
    "\1\0\1\50\6\16\3\62\1\16\10\62\1\51\1\50"+
    "\37\62\1\0\4\62\1\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\1\63\14\16\1\64\21\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\21\16\1\65"+
    "\15\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\11\16\1\66\3\16\1\67\21\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\5\16\1\70"+
    "\10\16\1\71\20\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\5\16\1\72\2\16\1\73\26\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\1\74\14\16\1\75\21\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\4\16\1\76\32\16\1\0"+
    "\5\16\1\45\1\0\1\50\17\16\1\77\2\16\1\51"+
    "\1\50\4\16\1\100\3\16\1\101\26\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\16\16\1\102"+
    "\20\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\1\103\36\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\4\16\1\104\3\16\1\105\1\106"+
    "\3\16\1\107\2\16\1\110\16\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\7\16\1\111\27\16"+
    "\1\0\5\16\1\45\1\0\1\50\20\16\1\57\1\16"+
    "\1\51\1\50\37\16\1\0\5\16\1\45\1\0\1\50"+
    "\17\16\1\77\2\16\1\51\1\50\37\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\20\16\1\112"+
    "\6\16\1\52\7\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\7\16\1\113\27\16\1\0\5\16"+
    "\1\45\1\0\1\114\22\0\1\115\1\114\37\0\1\116"+
    "\3\0\1\116\3\0\1\117\22\16\1\115\1\117\37\16"+
    "\1\116\3\16\1\120\1\16\1\45\1\0\23\45\1\47"+
    "\40\45\1\0\6\45\13\0\1\121\61\0\1\50\22\45"+
    "\1\51\1\50\37\45\1\0\6\45\1\0\1\50\21\16"+
    "\1\122\1\51\1\50\37\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\2\16\1\123\34\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\11\16"+
    "\1\124\25\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\1\16\1\125\35\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\33\16\1\126\3\16"+
    "\1\0\5\16\1\45\1\0\1\50\14\16\1\127\5\16"+
    "\1\51\1\50\37\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\5\16\1\130\31\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\5\16\1\131"+
    "\31\16\1\0\5\16\1\45\1\0\1\132\6\16\3\62"+
    "\1\16\10\62\1\133\1\132\37\62\1\0\4\62\1\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\10\16\1\134"+
    "\6\16\1\135\17\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\17\16\1\136\17\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\17\16\1\137"+
    "\17\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\1\16\1\140\35\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\33\16\1\141\3\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\10\16"+
    "\1\142\26\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\7\16\1\143\27\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\15\16\1\144\21\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\1\145\36\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\12\16\1\146\24\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\6\16\1\147\22\16"+
    "\1\150\5\16\1\0\5\16\1\45\1\0\1\151\22\16"+
    "\1\152\1\151\6\16\1\153\30\16\1\0\5\16\1\45"+
    "\1\0\1\50\16\16\1\154\3\16\1\51\1\50\37\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\12\16\1\155\24\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\7\16\1\156\27\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\12\16\1\157"+
    "\24\16\1\0\5\16\1\45\1\0\1\160\22\16\1\161"+
    "\1\160\37\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\6\16\1\162\1\16\1\163\26\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\11\16"+
    "\1\164\25\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\6\16\1\165\30\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\13\16\1\166\23\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\15\16\1\167\21\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\14\16\1\170\22\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\1\171\36\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\16\16\1\172\20\16\1\0\5\16\1\45\1\0\1\114"+
    "\22\0\1\115\1\114\47\0\1\114\22\0\1\115\1\114"+
    "\37\0\1\173\3\0\1\173\3\0\1\117\22\45\1\115"+
    "\1\117\37\45\1\0\6\45\1\0\1\117\22\16\1\115"+
    "\1\117\37\16\1\173\3\16\1\174\1\16\1\45\14\0"+
    "\1\175\60\0\1\50\22\16\1\51\1\50\30\16\1\176"+
    "\6\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\3\16\1\177\13\16\1\200\17\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\34\16\1\201"+
    "\2\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\1\202\36\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\7\16\1\203\27\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\24\16\1\204"+
    "\12\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\22\16\1\204\14\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\15\16\1\205\21\16\1\0"+
    "\5\16\1\45\1\0\1\132\22\45\1\133\1\132\37\45"+
    "\1\0\6\45\1\0\1\50\22\16\1\51\1\50\11\16"+
    "\1\206\25\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\20\16\1\207\16\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\20\16\1\210\16\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\1\211\36\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\1\212\36\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\7\16\1\213\27\16\1\0"+
    "\5\16\1\45\1\0\1\214\22\16\1\215\1\214\37\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\11\16\1\216\25\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\11\16\1\217\25\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\13\16\1\220"+
    "\23\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\7\16\1\221\27\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\11\16\1\222\25\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\12\16"+
    "\1\223\24\16\1\0\5\16\1\45\1\0\1\151\22\45"+
    "\1\152\1\151\37\45\1\0\6\45\1\0\1\50\22\16"+
    "\1\51\1\50\14\16\1\224\22\16\1\0\5\16\1\45"+
    "\1\0\1\50\7\16\1\225\12\16\1\51\1\50\37\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\4\16\1\226\32\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\15\16\1\225\21\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\5\16\1\227"+
    "\31\16\1\0\5\16\1\45\1\0\1\160\22\45\1\161"+
    "\1\160\37\45\1\0\6\45\1\0\1\50\22\16\1\51"+
    "\1\50\14\16\1\230\22\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\7\16\1\231\27\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\16\16"+
    "\1\232\20\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\21\16\1\233\15\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\12\16\1\234\24\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\17\16\1\235\17\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\10\16\1\236\26\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\12\16\1\237"+
    "\24\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\12\16\1\240\24\16\1\0\5\16\1\45\1\0"+
    "\1\114\22\0\1\115\1\114\37\0\1\241\3\0\1\241"+
    "\3\0\1\117\22\16\1\115\1\117\37\16\1\241\3\16"+
    "\1\242\1\16\1\45\15\0\1\243\57\0\1\50\7\16"+
    "\1\244\12\16\1\51\1\50\37\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\4\16\1\245\32\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\4\16\1\246\32\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\15\16\1\247\21\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\17\16\1\250"+
    "\17\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\1\251\36\16\1\0\5\16\1\45\1\0\1\252"+
    "\22\16\1\253\1\252\37\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\17\16\1\254\17\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\16\16"+
    "\1\255\20\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\15\16\1\256\21\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\11\16\1\257\25\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\4\16\1\260\32\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\4\16\1\261\32\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\15\16\1\262"+
    "\21\16\1\0\5\16\1\45\1\0\1\214\22\45\1\215"+
    "\1\214\37\45\1\0\6\45\1\0\1\50\22\16\1\51"+
    "\1\50\5\16\1\263\31\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\2\16\1\264\34\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\15\16"+
    "\1\265\21\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\10\16\1\266\26\16\1\0\5\16\1\45"+
    "\1\0\1\267\22\16\1\270\1\267\37\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\4\16\1\271"+
    "\32\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\5\16\1\272\31\16\1\0\5\16\1\45\1\0"+
    "\1\273\22\16\1\274\1\273\37\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\13\16\1\275\23\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\7\16\1\276\27\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\4\16\1\277\32\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\6\16\1\300"+
    "\30\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\15\16\1\301\21\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\4\16\1\302\32\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\5\16"+
    "\1\303\31\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\22\16\1\304\14\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\1\305\36\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\15\16"+
    "\1\244\21\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\1\306\36\16\1\0\5\16\1\45\1\0"+
    "\1\114\22\0\1\115\1\114\37\0\1\307\1\310\2\0"+
    "\1\307\3\0\1\117\22\16\1\115\1\117\37\16\1\307"+
    "\1\311\2\16\1\312\1\16\1\45\16\0\1\313\56\0"+
    "\1\314\22\16\1\315\1\314\37\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\5\16\1\316\31\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\6\16\1\317\30\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\13\16\1\320\23\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\15\16\1\321"+
    "\21\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\15\16\1\322\21\16\1\0\5\16\1\45\1\0"+
    "\1\252\22\45\1\253\1\252\37\45\1\0\6\45\1\0"+
    "\1\50\22\16\1\51\1\50\20\16\1\323\16\16\1\0"+
    "\5\16\1\45\1\0\1\324\22\16\1\325\1\324\37\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\5\16\1\326\31\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\2\16\1\327\34\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\13\16\1\330"+
    "\23\16\1\0\5\16\1\45\1\0\1\331\22\16\1\332"+
    "\1\331\37\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\5\16\1\333\31\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\1\334\36\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\12\16"+
    "\1\335\24\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\11\16\1\336\25\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\4\16\1\337\32\16"+
    "\1\0\5\16\1\45\1\0\1\267\22\45\1\270\1\267"+
    "\37\45\1\0\6\45\1\0\1\50\22\16\1\51\1\50"+
    "\2\16\1\340\34\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\15\16\1\341\21\16\1\0\5\16"+
    "\1\45\1\0\1\273\22\45\1\274\1\273\37\45\1\0"+
    "\6\45\1\0\1\342\22\16\1\343\1\342\37\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\17\16"+
    "\1\344\17\16\1\0\5\16\1\45\1\0\1\345\22\16"+
    "\1\346\1\345\37\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\13\16\1\347\23\16\1\0\5\16"+
    "\1\45\1\0\1\350\22\16\1\351\1\350\37\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\2\16"+
    "\1\352\34\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\4\16\1\353\32\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\14\16\1\354\22\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\17\16\1\355\17\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\3\16\1\356\33\16\1\0\5\16"+
    "\1\45\1\0\1\114\22\0\1\115\1\114\37\0\1\307"+
    "\3\0\1\307\67\0\1\357\3\0\1\357\3\0\1\50"+
    "\22\16\1\51\1\50\37\16\1\357\3\16\1\360\1\16"+
    "\1\45\1\0\1\117\22\16\1\115\1\117\37\16\1\307"+
    "\3\16\1\312\1\16\1\45\17\0\1\361\55\0\1\314"+
    "\22\45\1\315\1\314\37\45\1\0\6\45\1\0\1\50"+
    "\22\16\1\51\1\50\6\16\1\362\30\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\21\16\1\363"+
    "\15\16\1\0\5\16\1\45\1\0\1\364\22\16\1\365"+
    "\1\364\37\16\1\0\5\16\1\45\1\0\1\366\22\16"+
    "\1\367\1\366\37\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\5\16\1\370\31\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\11\16\1\371"+
    "\25\16\1\0\5\16\1\45\1\0\1\324\22\45\1\325"+
    "\1\324\37\45\1\0\6\45\1\0\1\50\22\16\1\51"+
    "\1\50\4\16\1\372\32\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\17\16\1\373\17\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\15\16"+
    "\1\374\21\16\1\0\5\16\1\45\1\0\1\331\22\45"+
    "\1\332\1\331\37\45\1\0\6\45\1\0\1\50\22\16"+
    "\1\51\1\50\1\375\36\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\4\16\1\376\32\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\15\16"+
    "\1\377\21\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\17\16\1\u0100\17\16\1\0\5\16\1\45"+
    "\1\0\1\u0101\22\16\1\u0102\1\u0101\37\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\32\16\1\u0103"+
    "\4\16\1\0\5\16\1\45\1\0\1\u0104\22\16\1\u0105"+
    "\1\u0104\2\16\1\u0106\34\16\1\0\5\16\1\45\1\0"+
    "\1\342\22\45\1\343\1\342\37\45\1\0\6\45\1\0"+
    "\1\50\22\16\1\51\1\50\12\16\1\u0107\24\16\1\0"+
    "\5\16\1\45\1\0\1\345\22\45\1\346\1\345\37\45"+
    "\1\0\6\45\1\0\1\50\22\16\1\51\1\50\11\16"+
    "\1\u0108\25\16\1\0\5\16\1\45\1\0\1\350\22\45"+
    "\1\351\1\350\37\45\1\0\6\45\1\0\1\50\22\16"+
    "\1\51\1\50\12\16\1\u0109\24\16\1\0\5\16\1\45"+
    "\1\0\1\u010a\22\16\1\u010b\1\u010a\37\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\4\16\1\u010c"+
    "\32\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\4\16\1\u010d\32\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\1\u010e\36\16\1\0\5\16"+
    "\1\45\65\0\1\u010f\3\0\1\u010f\3\0\1\50\22\16"+
    "\1\51\1\50\37\16\1\u010f\3\16\1\u0110\1\16\1\45"+
    "\20\0\1\u0111\54\0\1\50\22\16\1\51\1\50\7\16"+
    "\1\u0112\27\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\4\16\1\u0113\32\16\1\0\5\16\1\45"+
    "\1\0\1\364\22\45\1\365\1\364\37\45\1\0\6\45"+
    "\1\0\1\366\22\45\1\367\1\366\37\45\1\0\6\45"+
    "\1\0\1\50\22\16\1\51\1\50\1\16\1\u0114\35\16"+
    "\1\0\5\16\1\45\1\0\1\u0115\22\16\1\u0116\1\u0115"+
    "\37\16\1\0\5\16\1\45\1\0\1\u0117\22\16\1\u0118"+
    "\1\u0117\37\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\5\16\1\u0119\31\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\16\16\1\u011a\20\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\1\16\1\u011b\35\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\2\16\1\u011c\34\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\31\16\1\u011d"+
    "\5\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\1\u011e\36\16\1\0\5\16\1\45\1\0\1\u0101"+
    "\22\45\1\u0102\1\u0101\37\45\1\0\6\45\1\0\1\50"+
    "\22\16\1\51\1\50\1\u011f\36\16\1\0\5\16\1\45"+
    "\1\0\1\u0104\22\45\1\u0105\1\u0104\37\45\1\0\6\45"+
    "\1\0\1\50\22\16\1\51\1\50\17\16\1\u0120\17\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\7\16\1\u0121\27\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\16\16\1\u0122\20\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\15\16\1\u0123"+
    "\21\16\1\0\5\16\1\45\1\0\1\u010a\22\45\1\u010b"+
    "\1\u010a\37\45\1\0\6\45\1\0\1\50\22\16\1\51"+
    "\1\50\31\16\1\u0124\5\16\1\0\5\16\1\45\1\0"+
    "\1\u0125\22\16\1\u0126\1\u0125\37\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\17\16\1\u0127\17\16"+
    "\1\0\5\16\1\45\66\0\1\u0128\6\0\1\50\22\16"+
    "\1\51\1\50\37\16\1\0\1\u0129\4\16\1\45\21\0"+
    "\1\u012a\53\0\1\50\22\16\1\51\1\50\10\16\1\u012b"+
    "\26\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\13\16\1\u012c\23\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\11\16\1\u012d\25\16\1\0"+
    "\5\16\1\45\1\0\1\u0115\22\45\1\u0116\1\u0115\37\45"+
    "\1\0\6\45\1\0\1\u0117\22\45\1\u0118\1\u0117\37\45"+
    "\1\0\6\45\1\0\1\50\22\16\1\51\1\50\15\16"+
    "\1\u012e\21\16\1\0\5\16\1\45\1\0\1\u012f\22\16"+
    "\1\u0130\1\u012f\37\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\4\16\1\u0131\32\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\17\16\1\u0132"+
    "\17\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\12\16\1\u0133\24\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\4\16\1\u0134\32\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\16\16"+
    "\1\u0135\20\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\11\16\1\u0136\25\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\5\16\1\u0137\31\16"+
    "\1\0\5\16\1\45\1\0\1\u0138\22\16\1\u0139\1\u0138"+
    "\37\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\31\16\1\u013a\5\16\1\0\5\16\1\45\1\0"+
    "\1\u013b\22\16\1\u013c\1\u013b\37\16\1\0\5\16\1\45"+
    "\1\0\1\u0125\22\45\1\u0126\1\u0125\37\45\1\0\6\45"+
    "\1\0\1\50\22\16\1\51\1\50\11\16\1\u013d\25\16"+
    "\1\0\5\16\1\45\65\0\1\u013e\3\0\1\u013e\3\0"+
    "\1\50\22\16\1\51\1\50\37\16\1\u013e\3\16\1\u013f"+
    "\1\16\1\45\22\0\1\u0140\52\0\1\50\22\16\1\51"+
    "\1\50\11\16\1\u0141\25\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\15\16\1\u0142\21\16\1\0"+
    "\5\16\1\45\1\0\1\u0143\22\16\1\u0144\1\u0143\37\16"+
    "\1\0\5\16\1\45\1\0\1\50\22\16\1\51\1\50"+
    "\11\16\1\u0145\25\16\1\0\5\16\1\45\1\0\1\u012f"+
    "\22\45\1\u0130\1\u012f\37\45\1\0\6\45\1\0\1\u0146"+
    "\22\16\1\u0147\1\u0146\37\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\5\16\1\u0148\31\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\4\16"+
    "\1\u0149\32\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\13\16\1\u014a\23\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\1\u014b\36\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\6\16"+
    "\1\u014c\30\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\11\16\1\u014d\25\16\1\0\5\16\1\45"+
    "\1\0\1\u0138\22\45\1\u0139\1\u0138\37\45\1\0\6\45"+
    "\1\0\1\50\22\16\1\51\1\50\12\16\1\u014e\24\16"+
    "\1\0\5\16\1\45\1\0\1\u013b\22\45\1\u013c\1\u013b"+
    "\37\45\1\0\6\45\1\0\1\50\22\16\1\51\1\50"+
    "\5\16\1\u014f\31\16\1\0\5\16\1\45\65\0\1\u0150"+
    "\3\0\1\u0150\3\0\1\50\22\16\1\51\1\50\37\16"+
    "\1\u0150\3\16\1\u0151\1\16\1\45\16\0\1\u0152\56\0"+
    "\1\50\22\16\1\51\1\50\5\16\1\u0153\31\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\13\16"+
    "\1\u0154\23\16\1\0\5\16\1\45\1\0\1\u0143\22\45"+
    "\1\u0144\1\u0143\37\45\1\0\6\45\1\0\1\50\22\16"+
    "\1\51\1\50\17\16\1\u0155\17\16\1\0\5\16\1\45"+
    "\1\0\1\u0146\22\45\1\u0147\1\u0146\37\45\1\0\6\45"+
    "\1\0\1\50\22\16\1\51\1\50\15\16\1\u0156\21\16"+
    "\1\0\5\16\1\45\1\0\1\u0157\22\16\1\u0158\1\u0157"+
    "\37\16\1\0\5\16\1\45\1\0\1\u0159\22\16\1\u015a"+
    "\1\u0159\37\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\14\16\1\u015b\22\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\21\16\1\u015c\15\16"+
    "\1\0\5\16\1\45\1\0\1\u015d\22\16\1\u015e\1\u015d"+
    "\37\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\4\16\1\u015f\32\16\1\0\5\16\1\45\1\0"+
    "\1\u0160\22\16\1\u0161\1\u0160\37\16\1\0\5\16\1\45"+
    "\1\0\1\u0150\22\0\1\u0162\1\u0150\47\0\1\u0163\22\16"+
    "\1\u0162\1\u0163\37\16\1\0\5\16\1\45\23\0\1\u0164"+
    "\51\0\1\50\22\16\1\51\1\50\1\u0165\36\16\1\0"+
    "\5\16\1\45\1\0\1\50\22\16\1\51\1\50\12\16"+
    "\1\u0166\24\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\1\u0167\36\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\11\16\1\u0168\25\16\1\0"+
    "\5\16\1\45\1\0\1\u0157\22\45\1\u0158\1\u0157\37\45"+
    "\1\0\6\45\1\0\1\u0159\22\45\1\u015a\1\u0159\37\45"+
    "\1\0\6\45\1\0\1\50\22\16\1\51\1\50\10\16"+
    "\1\u0169\26\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\4\16\1\u016a\32\16\1\0\5\16\1\45"+
    "\1\0\1\u015d\22\45\1\u015e\1\u015d\37\45\1\0\6\45"+
    "\1\0\1\u016b\22\16\1\u016c\1\u016b\37\16\1\0\5\16"+
    "\1\45\1\0\1\u0160\22\45\1\u0161\1\u0160\37\45\1\0"+
    "\6\45\1\0\1\u0163\22\45\1\u0162\1\u0163\37\45\1\0"+
    "\6\45\15\0\1\u016d\57\0\1\50\22\16\1\51\1\50"+
    "\4\16\1\u016e\32\16\1\0\5\16\1\45\1\0\1\50"+
    "\22\16\1\51\1\50\15\16\1\u016f\21\16\1\0\5\16"+
    "\1\45\1\0\1\50\22\16\1\51\1\50\4\16\1\u0170"+
    "\32\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\17\16\1\u0171\17\16\1\0\5\16\1\45\1\0"+
    "\1\50\22\16\1\51\1\50\15\16\1\u0172\21\16\1\0"+
    "\5\16\1\45\1\0\1\u0173\22\16\1\u0174\1\u0173\37\16"+
    "\1\0\5\16\1\45\1\0\1\u016b\22\45\1\u016c\1\u016b"+
    "\37\45\1\0\6\45\1\0\1\u0175\22\16\1\u0176\1\u0175"+
    "\37\16\1\0\5\16\1\45\1\0\1\u0177\22\16\1\u0178"+
    "\1\u0177\37\16\1\0\5\16\1\45\1\0\1\50\22\16"+
    "\1\51\1\50\13\16\1\u0179\23\16\1\0\5\16\1\45"+
    "\1\0\1\50\22\16\1\51\1\50\1\u017a\36\16\1\0"+
    "\5\16\1\45\1\0\1\u017b\22\16\1\u017c\1\u017b\37\16"+
    "\1\0\5\16\1\45\1\0\1\u0173\22\45\1\u0174\1\u0173"+
    "\37\45\1\0\6\45\1\0\1\u0175\22\45\1\u0176\1\u0175"+
    "\37\45\1\0\6\45\1\0\1\u0177\22\45\1\u0178\1\u0177"+
    "\37\45\1\0\6\45\1\0\1\u017d\22\16\1\u017e\1\u017d"+
    "\37\16\1\0\5\16\1\45\1\0\1\50\22\16\1\51"+
    "\1\50\4\16\1\u017f\32\16\1\0\5\16\1\45\1\0"+
    "\1\u017b\22\45\1\u017c\1\u017b\37\45\1\0\6\45\1\0"+
    "\1\u017d\22\45\1\u017e\1\u017d\37\45\1\0\6\45\1\0"+
    "\1\50\22\16\1\51\1\50\13\16\1\u0180\23\16\1\0"+
    "\5\16\1\45\1\0\1\u0181\22\16\1\u0182\1\u0181\37\16"+
    "\1\0\5\16\1\45\1\0\1\u0181\22\45\1\u0182\1\u0181"+
    "\37\45\1\0\6\45";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20220];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\11\2\1\33\0\1\11\1\0\1\11\43\0"+
    "\1\11\15\0\1\11\16\0\1\11\6\0\1\11\33\0"+
    "\1\11\35\0\1\11\14\0\1\11\3\0\1\11\20\0"+
    "\1\11\7\0\1\11\4\0\1\11\10\0\1\11\2\0"+
    "\1\11\2\0\1\11\13\0\1\11\1\0\1\11\12\0"+
    "\1\11\2\0\1\11\5\0\1\11\12\0\1\11\1\0"+
    "\1\11\15\0\1\11\11\0\1\11\10\0\1\11\2\0"+
    "\1\11\7\0\1\11\2\0\1\11\20\0\1\11\1\0"+
    "\1\11\3\0\1\11\2\0\2\11\11\0\2\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de los operadores invocados
    //ArrayList<Token> listadoOperadoresInvocados = new ArrayList();
    ArrayList<TokenError> listadoErroresLexicos = new ArrayList();
    int filaInicio;
    int columnaInicio;

    //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
    private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
        //creamos un  token auxiliar
        Token tokenAux = new Token(tipoToken, lexema, fila, columna);
        System.out.println("\nFila : "+fila + filaInicio +" Columna: "+columna+ columnaInicio +" Token de tipo: "+tipoToken+" Lexema: "+lexema);
        //Agregamos al listado
        //listadoOperadoresInvocados.add(tokenAux);
        //retornamos el token aux como simbolo
        return new Symbol(tipo, tokenAux);
    }

    //Agregamos un token al array list de errores lexicos
    
    private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
        //creamos un  token auxiliar
        TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila + filaInicio, columna + columnaInicio);
        //Agregamos al listado
        listadoErroresLexicos.add(tokenErrorAux);
    }

    //Obtenemos el arrLust de los errores lexicos
    public ArrayList<TokenError> obtenerListadoErroresLexicos(){
        return listadoErroresLexicos;
    }

    public void setFilaInicio(int fila){
        filaInicio = fila;
    }
    public void setColumna(int columna){
        columnaInicio = columna;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerImportacionDatos(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 410) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addErrorLexico ("LEXICO", yytext(), "Token no valido",yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 51: break;
          case 2: 
            { 
            } 
            // fall through
          case 52: break;
          case 3: 
            { return retornarSimbolo(LLAVES_INICIO, "LLAVES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 53: break;
          case 4: 
            { return retornarSimbolo(LLAVES_FIN, "LLAVES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 54: break;
          case 5: 
            { return retornarSimbolo(PARENTESIS_INICIO, "PARENTESIS_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 55: break;
          case 6: 
            { return retornarSimbolo(PARENTESIS_FIN, "PARENTESIS_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 56: break;
          case 7: 
            { return retornarSimbolo(DOS_PUNTOS, "DOS_PUNTOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 57: break;
          case 8: 
            { return retornarSimbolo(COMA, "COMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 58: break;
          case 9: 
            { if(yytext().replaceAll("\"", "").trim().endsWith("|") || yytext().replaceAll("\"", "").trim().startsWith("|") ){
                return retornarSimbolo(VALOR_TEXTO_VISIBLE_CON_ESPACIO, "VALOR_TEXTO_VISIBLE_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1); 
            }else if(yytext().trim().contains(" ")){//si tiene espacios
                return retornarSimbolo(VALOR_ITEMS_CON_ESPACIO, "VALOR_ITEMS_CON_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
            }else{
                return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
            }
            } 
            // fall through
          case 59: break;
          case 10: 
            { if(yytext().replaceAll("\"", "").trim().startsWith("|") || yytext().replaceAll("\"", "").trim().endsWith("|") ){
                return retornarSimbolo(VALOR_PASSWORD, "VALOR_PASSWORD", yytext(), yyline + 1, yycolumn + 1); 
            }else{
                return retornarSimbolo(VALOR_ITEMS_SIN_ESPACIO, "VALOR_ITEMS_SIN_ESPACIO", yytext(), yyline + 1, yycolumn + 1);
            }
            } 
            // fall through
          case 60: break;
          case 11: 
            { return retornarSimbolo(DIGITO, "DIGITO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 61: break;
          case 12: 
            { return retornarSimbolo(VALOR_ID, "VALOR_ID", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 62: break;
          case 13: 
            { return retornarSimbolo(NO, "NO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 63: break;
          case 14: 
            { return retornarSimbolo(SI, "SI", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 64: break;
          case 15: 
            { return retornarSimbolo(URL, "URL", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 65: break;
          case 16: 
            { return retornarSimbolo(DARK, "DARK", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 66: break;
          case 17: 
            { return retornarSimbolo(TEMA, "TEMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 67: break;
          case 18: 
            { return retornarSimbolo(BLUE, "BLUE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 68: break;
          case 19: 
            { return retornarSimbolo(WHITE, "WHITE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 69: break;
          case 20: 
            { return retornarSimbolo(FILAS, "FILAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 70: break;
          case 21: 
            { return retornarSimbolo(RADIO, "RADIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 71: break;
          case 22: 
            { return retornarSimbolo(BOTON, "BOTON", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 72: break;
          case 23: 
            { return retornarSimbolo(COMBO, "COMBO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 73: break;
          case 24: 
            { return retornarSimbolo(CLASE, "CLASE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 74: break;
          case 25: 
            { return retornarSimbolo(IMAGEN, "IMAGEN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 75: break;
          case 26: 
            { return retornarSimbolo(INDICE, "INDICE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 76: break;
          case 27: 
            { return retornarSimbolo(TITULO, "TITULO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 77: break;
          case 28: 
            { return retornarSimbolo(NOMBRE, "NOMBRE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 78: break;
          case 29: 
            { return retornarSimbolo(CENTRO, "CENTRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 79: break;
          case 30: 
            { return retornarSimbolo(DERECHA, "DERECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 80: break;
          case 31: 
            { return retornarSimbolo(FICHERO, "FICHERO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 81: break;
          case 32: 
            { return retornarSimbolo(PUBLICO, "PUBLICO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 82: break;
          case 33: 
            { return retornarSimbolo(OPCIONES, "OPCIONES", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 83: break;
          case 34: 
            { return retornarSimbolo(COLUMNAS, "COLUMNAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 84: break;
          case 35: 
            { return retornarSimbolo(CHECKBOX, "CHECKBOX", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 85: break;
          case 36: 
            { return retornarSimbolo(IZQUIERDA, "IZQUIERDA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 86: break;
          case 37: 
            { return retornarSimbolo(REQUERIDO, "REQUERIDO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 87: break;
          case 38: 
            { return retornarSimbolo(AREA_TEXTO, "AREA_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 88: break;
          case 39: 
            { return retornarSimbolo(ALINEACION, "ALINEACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 89: break;
          case 40: 
            { return retornarSimbolo(ESTRUCTURA, "ESTRUCTURA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 90: break;
          case 41: 
            { return retornarSimbolo(JUSTIFICAR, "JUSTIFICAR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 91: break;
          case 42: 
            { return retornarSimbolo(VALOR_FECHA, "VALOR_FECHA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 92: break;
          case 43: 
            { return retornarSimbolo(CAMPO_TEXTO, "CAMPO_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 93: break;
          case 44: 
            { return retornarSimbolo(NEWFORMULARIO, "NEWFORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 94: break;
          case 45: 
            { return retornarSimbolo(NOMBRE_CAMPO, "NOMBRE_CAMPO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 95: break;
          case 46: 
            { return retornarSimbolo(ID_FORMULARIO, "ID_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 96: break;
          case 47: 
            { return retornarSimbolo(ID_COMPONENTE, "ID_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 97: break;
          case 48: 
            { return retornarSimbolo(TEXTO_VISIBLE, "TEXTO_VISIBLE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 98: break;
          case 49: 
            { return retornarSimbolo(FECHA_CREACION, "FECHA_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 99: break;
          case 50: 
            { return retornarSimbolo(USUARIO_CREACION, "USUARIO_CREACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerImportacionDatos [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerImportacionDatos scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerImportacionDatos(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
