/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package gramatica_respuestas;
import java_cup.runtime.*;
import clasesDAO.Token;
import static gramatica_respuestas.ParserRespuestasSym.*;
/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>IndigoRespuesta.jflex</tt>
 */
public class LexerIndigoRespuestas implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\27\3\1\1\27\2\1\22\27\1\1\1\10\1\26\11\52\1\12"+
    "\15\52\1\11\1\52\1\6\1\52\1\7\2\52\1\33\1\51\1\30"+
    "\1\41\1\32\1\42\1\45\1\52\1\36\2\52\1\43\1\40\1\44"+
    "\1\37\1\47\1\52\1\31\1\35\1\50\1\34\1\46\4\52\1\4"+
    "\1\52\1\5\1\52\1\15\1\52\1\24\3\52\1\17\1\25\2\52"+
    "\1\13\4\52\1\14\1\52\1\21\1\52\1\16\1\20\1\23\1\22"+
    "\5\52\1\2\1\52\1\3\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\6\1\40\0\1\14\31\0"+
    "\1\15\67\0\1\16\1\17\22\0\1\20\31\0\1\21"+
    "\1\22\17\0\1\23\1\24\17\0\1\25\11\0\1\26"+
    "\20\0\1\27\1\0\1\30\14\0\1\31\5\0\1\32"+
    "\7\0\1\33\6\0\1\34\5\0\1\35\1\36\4\0"+
    "\1\37\1\40\1\41\2\0\1\42\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\53\0\53\0\53\0\53\0\53\0\53"+
    "\0\53\0\53\0\53\0\53\0\126\0\201\0\254\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\u0183\0\254\0\u01ae\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\53\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891"+
    "\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\53\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e"+
    "\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6"+
    "\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e"+
    "\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076"+
    "\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\53\0\53\0\u13fd\0\u1428"+
    "\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580"+
    "\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8"+
    "\0\53\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805"+
    "\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d"+
    "\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5"+
    "\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d"+
    "\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65"+
    "\0\u1d90\0\u1dbb\0\u1de6\0\53\0\53\0\u1e11\0\u1e3c\0\u1e67"+
    "\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf"+
    "\0\u1fea\0\u2015\0\u2040\0\u206b\0\53\0\u2096\0\u20c1\0\u20ec"+
    "\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee\0\53\0\u2219"+
    "\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u2371"+
    "\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473\0\u249e\0\53"+
    "\0\u24c9\0\53\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0\0\u25cb"+
    "\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\53\0\u26f8"+
    "\0\u2723\0\u274e\0\u2779\0\u27a4\0\53\0\u27cf\0\u27fa\0\u2825"+
    "\0\u2850\0\u287b\0\u28a6\0\u28d1\0\53\0\u28fc\0\u2927\0\u2952"+
    "\0\u297d\0\u29a8\0\u29d3\0\53\0\u29fe\0\u2a29\0\u2a54\0\u2a7f"+
    "\0\u2aaa\0\53\0\53\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56\0\53"+
    "\0\53\0\53\0\u2b81\0\u2bac\0\53\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\11\2\1\16\1\17\2\2"+
    "\1\20\14\2\1\21\1\22\3\2\67\0\1\23\51\0"+
    "\1\24\40\0\1\25\24\26\1\0\1\25\1\27\1\26"+
    "\1\30\1\31\4\26\1\32\2\26\1\33\1\34\2\26"+
    "\1\35\1\36\2\26\32\0\1\37\53\0\1\40\52\0"+
    "\1\41\32\0\1\42\53\0\1\43\37\0\25\44\1\0"+
    "\24\44\1\0\25\44\1\0\2\44\1\45\5\44\1\46"+
    "\13\44\1\0\25\44\1\0\14\44\1\47\7\44\1\0"+
    "\25\44\1\0\16\44\1\50\5\44\1\0\25\44\1\0"+
    "\10\44\1\51\13\44\1\0\25\44\1\0\10\44\1\52"+
    "\13\44\1\0\25\44\1\0\5\44\1\53\16\44\1\0"+
    "\25\44\1\0\4\44\1\54\17\44\1\0\25\44\1\0"+
    "\4\44\1\55\17\44\35\0\1\56\60\0\1\57\40\0"+
    "\1\60\36\0\1\61\52\0\1\62\36\0\25\44\1\63"+
    "\24\44\1\0\25\44\1\63\3\44\1\64\20\44\1\0"+
    "\25\44\1\63\15\44\1\65\6\44\1\0\25\44\1\63"+
    "\7\44\1\66\14\44\1\0\25\44\1\63\2\44\1\67"+
    "\21\44\1\0\25\44\1\63\12\44\1\70\11\44\1\0"+
    "\25\44\1\63\16\44\1\71\5\44\1\0\25\44\1\63"+
    "\3\44\1\72\20\44\1\0\25\44\1\63\2\44\1\73"+
    "\21\44\1\0\25\44\1\63\22\44\1\74\1\44\47\0"+
    "\1\75\42\0\1\76\46\0\1\77\35\0\1\100\52\0"+
    "\1\101\35\0\25\44\1\63\4\44\1\102\5\44\1\103"+
    "\11\44\1\0\25\44\1\63\6\44\1\104\15\44\1\0"+
    "\25\44\1\63\11\44\1\105\12\44\1\0\25\44\1\63"+
    "\3\44\1\106\20\44\1\0\25\44\1\63\7\44\1\107"+
    "\14\44\1\0\25\44\1\63\7\44\1\110\14\44\1\0"+
    "\25\44\1\63\17\44\1\111\4\44\1\0\25\44\1\63"+
    "\4\44\1\112\17\44\1\0\25\44\1\63\14\44\1\113"+
    "\7\44\34\0\1\114\47\0\1\115\61\0\1\116\31\0"+
    "\1\117\52\0\1\120\34\0\25\44\1\63\2\44\1\121"+
    "\21\44\1\0\25\44\1\63\3\44\1\122\20\44\1\0"+
    "\25\44\1\63\5\44\1\123\16\44\1\0\25\44\1\63"+
    "\7\44\1\124\14\44\1\0\25\44\1\63\16\44\1\125"+
    "\5\44\1\0\25\44\1\63\13\44\1\126\10\44\1\0"+
    "\25\44\1\63\15\44\1\127\6\44\1\0\25\44\1\63"+
    "\10\44\1\130\13\44\1\0\25\44\1\63\11\44\1\131"+
    "\12\44\1\0\25\44\1\63\4\44\1\132\17\44\32\0"+
    "\1\133\52\0\1\134\40\0\1\135\52\0\1\136\33\0"+
    "\14\44\1\137\10\44\1\63\24\44\1\0\25\44\1\63"+
    "\15\44\1\140\6\44\1\0\25\44\1\63\14\44\1\141"+
    "\7\44\1\0\25\44\1\63\15\44\1\142\6\44\1\0"+
    "\25\44\1\63\4\44\1\143\17\44\1\0\25\44\1\63"+
    "\7\44\1\144\14\44\1\0\14\44\1\145\10\44\1\63"+
    "\24\44\1\0\14\44\1\146\10\44\1\63\24\44\1\0"+
    "\25\44\1\63\3\44\1\147\20\44\1\0\14\44\1\150"+
    "\10\44\1\63\24\44\35\0\1\151\65\0\1\152\23\0"+
    "\1\153\52\0\1\154\32\0\25\44\1\63\5\44\1\155"+
    "\16\44\1\0\25\44\1\63\1\44\1\156\22\44\1\0"+
    "\25\44\1\63\21\44\1\157\2\44\1\0\25\44\1\63"+
    "\4\44\1\160\17\44\1\0\25\44\1\63\2\44\1\161"+
    "\21\44\1\0\25\44\1\63\1\44\1\162\22\44\1\0"+
    "\25\44\1\63\5\44\1\163\16\44\1\0\25\44\1\63"+
    "\13\44\1\164\10\44\1\0\25\44\1\63\21\44\1\165"+
    "\2\44\1\0\25\44\1\63\1\44\1\166\22\44\50\0"+
    "\1\167\33\0\1\170\43\0\1\171\52\0\1\172\31\0"+
    "\25\44\1\63\6\44\1\173\15\44\1\0\25\44\1\63"+
    "\7\44\1\174\14\44\1\0\25\44\1\63\4\44\1\175"+
    "\17\44\1\0\25\44\1\63\2\44\1\176\21\44\1\0"+
    "\14\44\1\177\10\44\1\63\24\44\1\0\25\44\1\63"+
    "\4\44\1\200\17\44\1\0\25\44\1\63\6\44\1\201"+
    "\15\44\1\0\25\44\1\63\10\44\1\202\13\44\1\0"+
    "\25\44\1\63\2\44\1\203\21\44\1\0\25\44\1\63"+
    "\10\44\1\204\13\44\33\0\1\205\56\0\1\206\32\0"+
    "\1\207\52\0\1\210\34\0\25\44\1\63\5\44\1\211"+
    "\16\44\1\0\25\44\1\63\4\44\1\212\17\44\1\0"+
    "\25\44\1\63\2\44\1\213\3\44\1\214\15\44\1\0"+
    "\14\44\1\215\10\44\1\63\24\44\1\0\25\44\1\63"+
    "\1\44\1\216\22\44\1\0\25\44\1\63\2\44\1\217"+
    "\21\44\1\0\25\44\1\63\5\44\1\220\16\44\1\0"+
    "\25\44\1\63\2\44\1\221\21\44\1\0\25\44\1\63"+
    "\10\44\1\222\13\44\1\0\25\44\1\63\15\44\1\223"+
    "\6\44\20\0\1\224\52\0\1\225\33\0\25\44\1\63"+
    "\4\44\1\226\17\44\1\0\25\44\1\63\14\44\1\227"+
    "\7\44\1\0\14\44\1\230\10\44\1\63\24\44\1\0"+
    "\1\214\24\44\1\231\1\214\23\44\1\0\25\44\1\63"+
    "\1\44\1\232\3\44\1\233\5\44\1\234\10\44\1\0"+
    "\25\44\1\63\10\44\1\235\13\44\1\0\14\44\1\236"+
    "\10\44\1\63\24\44\1\0\25\44\1\63\4\44\1\237"+
    "\17\44\1\0\25\44\1\63\11\44\1\240\12\44\1\0"+
    "\25\44\1\63\6\44\1\241\15\44\1\0\25\44\1\63"+
    "\6\44\1\242\15\44\23\0\1\243\52\0\1\244\30\0"+
    "\25\44\1\63\2\44\1\245\21\44\1\0\25\44\1\63"+
    "\3\44\1\246\20\44\1\0\25\44\1\63\12\44\1\247"+
    "\11\44\1\0\25\44\1\63\10\44\1\250\13\44\1\0"+
    "\25\44\1\63\6\44\1\251\15\44\1\0\25\44\1\63"+
    "\10\44\1\252\13\44\1\0\25\44\1\63\11\44\1\253"+
    "\12\44\1\0\25\44\1\63\1\44\1\254\3\44\1\255"+
    "\5\44\1\256\10\44\1\0\25\44\1\63\2\44\1\257"+
    "\21\44\1\0\25\44\1\63\5\44\1\260\16\44\1\0"+
    "\14\44\1\261\10\44\1\63\24\44\1\0\25\44\1\63"+
    "\5\44\1\262\16\44\24\0\1\263\52\0\1\264\27\0"+
    "\25\44\1\63\7\44\1\265\14\44\1\0\25\44\1\63"+
    "\6\44\1\266\15\44\1\0\25\44\1\63\4\44\1\267"+
    "\17\44\1\0\25\44\1\63\11\44\1\270\12\44\1\0"+
    "\25\44\1\63\5\44\1\271\16\44\1\0\25\44\1\63"+
    "\2\44\1\272\21\44\1\0\25\44\1\63\20\44\1\273"+
    "\3\44\1\0\25\44\1\63\10\44\1\274\13\44\1\0"+
    "\25\44\1\63\6\44\1\275\15\44\1\0\25\44\1\63"+
    "\10\44\1\276\13\44\1\0\25\44\1\63\7\44\1\277"+
    "\14\44\1\0\25\44\1\63\14\44\1\300\7\44\1\0"+
    "\25\44\1\63\1\44\1\301\11\44\1\302\10\44\1\0"+
    "\25\44\1\63\14\44\1\303\7\44\20\0\1\304\52\0"+
    "\1\305\33\0\25\44\1\63\10\44\1\306\13\44\1\0"+
    "\14\44\1\307\10\44\1\63\24\44\1\0\25\44\1\63"+
    "\21\44\1\310\2\44\1\0\25\44\1\63\20\44\1\311"+
    "\3\44\1\0\25\44\1\63\4\44\1\312\17\44\1\0"+
    "\25\44\1\63\11\44\1\313\12\44\1\0\25\44\1\63"+
    "\10\44\1\314\13\44\1\0\25\44\1\63\11\44\1\315"+
    "\12\44\1\0\25\44\1\63\5\44\1\316\16\44\1\0"+
    "\25\44\1\63\2\44\1\317\21\44\1\0\25\44\1\63"+
    "\10\44\1\320\13\44\1\0\25\44\1\63\4\44\1\321"+
    "\17\44\1\0\25\44\1\63\10\44\1\322\13\44\1\0"+
    "\25\44\1\63\10\44\1\323\13\44\1\0\25\44\1\63"+
    "\21\44\1\324\2\44\1\0\1\306\24\44\1\325\1\306"+
    "\23\44\1\0\25\44\1\63\5\44\1\326\16\44\1\0"+
    "\25\44\1\63\10\44\1\327\13\44\1\0\25\44\1\63"+
    "\10\44\1\330\13\44\1\0\25\44\1\63\2\44\1\331"+
    "\21\44\1\0\25\44\1\63\5\44\1\332\16\44\1\0"+
    "\25\44\1\63\15\44\1\333\6\44\1\0\25\44\1\63"+
    "\20\44\1\334\3\44\1\0\25\44\1\63\4\44\1\335"+
    "\17\44\1\0\25\44\1\63\11\44\1\336\12\44\1\0"+
    "\1\320\24\44\1\337\1\320\23\44\1\0\25\44\1\63"+
    "\2\44\1\340\21\44\1\0\25\44\1\63\11\44\1\341"+
    "\12\44\1\0\25\44\1\63\2\44\1\342\21\44\1\0"+
    "\25\44\1\63\4\44\1\343\17\44\1\0\25\44\1\63"+
    "\6\44\1\344\15\44\1\0\25\44\1\63\6\44\1\345"+
    "\15\44\1\0\25\44\1\63\15\44\1\346\6\44\1\0"+
    "\25\44\1\63\7\44\1\347\14\44\1\0\25\44\1\63"+
    "\14\44\1\350\7\44\1\0\25\44\1\63\3\44\1\351"+
    "\20\44\1\0\25\44\1\63\10\44\1\352\13\44\1\0"+
    "\25\44\1\63\2\44\1\353\21\44\1\0\25\44\1\63"+
    "\5\44\1\354\16\44\1\0\25\44\1\63\7\44\1\355"+
    "\14\44\1\0\25\44\1\63\20\44\1\356\3\44\1\0"+
    "\25\44\1\63\11\44\1\357\12\44\1\0\1\343\24\44"+
    "\1\360\1\343\23\44\1\0\25\44\1\63\5\44\1\361"+
    "\16\44\1\0\1\345\24\44\1\362\1\345\23\44\1\0"+
    "\25\44\1\63\3\44\1\363\20\44\1\0\25\44\1\63"+
    "\10\44\1\364\13\44\1\0\25\44\1\63\4\44\1\365"+
    "\17\44\1\0\25\44\1\63\15\44\1\366\6\44\1\0"+
    "\25\44\1\63\15\44\1\367\6\44\1\0\25\44\1\63"+
    "\7\44\1\370\14\44\1\0\25\44\1\63\14\44\1\371"+
    "\7\44\1\0\25\44\1\63\10\44\1\372\13\44\1\0"+
    "\25\44\1\63\10\44\1\373\13\44\1\0\25\44\1\63"+
    "\5\44\1\374\16\44\1\0\25\44\1\63\4\44\1\375"+
    "\17\44\1\0\25\44\1\63\15\44\1\376\6\44\1\0"+
    "\1\364\24\44\1\377\1\364\23\44\1\0\25\44\1\63"+
    "\2\44\1\u0100\21\44\1\0\25\44\1\63\21\44\1\u0101"+
    "\2\44\1\0\25\44\1\63\3\44\1\u0102\20\44\1\0"+
    "\25\44\1\63\10\44\1\u0103\13\44\1\0\25\44\1\63"+
    "\4\44\1\u0104\17\44\1\0\1\372\24\44\1\u0105\1\372"+
    "\23\44\1\0\25\44\1\63\15\44\1\u0106\6\44\1\0"+
    "\25\44\1\63\14\44\1\u0107\7\44\1\0\25\44\1\63"+
    "\2\44\1\u0108\21\44\1\0\25\44\1\63\21\44\1\u0109"+
    "\2\44\1\0\25\44\1\63\7\44\1\u010a\14\44\1\0"+
    "\25\44\1\63\3\44\1\u010b\20\44\1\0\25\44\1\63"+
    "\15\44\1\u010c\6\44\1\0\1\u0103\24\44\1\u010d\1\u0103"+
    "\23\44\1\0\25\44\1\63\2\44\1\u010e\21\44\1\0"+
    "\25\44\1\63\3\44\1\u010f\20\44\1\0\25\44\1\63"+
    "\4\44\1\u0110\17\44\1\0\25\44\1\63\7\44\1\u0111"+
    "\14\44\1\0\25\44\1\63\3\44\1\u0112\20\44\1\0"+
    "\25\44\1\63\10\44\1\u0113\13\44\1\0\1\u010b\24\44"+
    "\1\u0114\1\u010b\23\44\1\0\25\44\1\63\21\44\1\u0115"+
    "\2\44\1\0\25\44\1\63\7\44\1\u0116\14\44\1\0"+
    "\25\44\1\63\15\44\1\u0117\6\44\1\0\25\44\1\63"+
    "\2\44\1\u0118\21\44\1\0\25\44\1\63\10\44\1\u0119"+
    "\13\44\1\0\1\u0112\24\44\1\u011a\1\u0112\23\44\1\0"+
    "\1\u0113\24\44\1\u011b\1\u0113\23\44\1\0\25\44\1\63"+
    "\3\44\1\u011c\20\44\1\0\25\44\1\63\10\44\1\u011d"+
    "\13\44\1\0\25\44\1\63\21\44\1\u011e\2\44\1\0"+
    "\25\44\1\63\7\44\1\u011f\14\44\1\0\1\u0119\24\44"+
    "\1\u0120\1\u0119\23\44\1\0\1\u011c\24\44\1\u0121\1\u011c"+
    "\23\44\1\0\1\u011d\24\44\1\u0122\1\u011d\23\44\1\0"+
    "\25\44\1\63\3\44\1\u0123\20\44\1\0\25\44\1\63"+
    "\10\44\1\u0124\13\44\1\0\1\u0123\24\44\1\u0125\1\u0123"+
    "\23\44\1\0\1\u0124\24\44\1\u0126\1\u0124\23\44";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11223];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\13\11\6\1\40\0\1\11\31\0\1\11\67\0"+
    "\2\11\22\0\1\11\31\0\2\1\17\0\2\11\17\0"+
    "\1\11\11\0\1\11\20\0\1\11\1\0\1\11\14\0"+
    "\1\11\5\0\1\11\7\0\1\11\6\0\1\11\5\0"+
    "\2\11\4\0\3\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de los operadores invocados
    //ArrayList<Token> listadoOperadoresInvocados = new ArrayList();
    //ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

     //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
     private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
          //creamos un  token auxiliar
          Token tokenAux = new Token(tipoToken, lexema, fila, columna);
          System.out.println("\nFila : "+fila+" Columna: "+columna+" Token de tipo: "+tipoToken+" Lexema: "+lexema);
          //Agregamos al listado
          //listadoOperadoresInvocados.add(tokenAux);
          //retornamos el token aux como simbolo
          return new Symbol(tipo, tokenAux);
     }

     //Agregamos un token al array list de errores lexicos
     /*
     private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
          //creamos un  token auxiliar
          TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
          //Agregamos al listado
          listadoErroresLexicos.add(tokenErrorAux);
     }

     //Obtenemos el arrLust de los errores lexicos
     public ArrayList<TokenError> obtenerListadoErroresLexicos(){
          return listadoErroresLexicos;
     }

     //Obtenemos el lstado de los tokens
     public ArrayList<Token> obtenerListadoTokens(){
          return listadoOperadoresInvocados;
     }*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigoRespuestas(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext());
            } 
            // fall through
          case 36: break;
          case 2: 
            { 
            } 
            // fall through
          case 37: break;
          case 3: 
            { return retornarSimbolo(LLAVES_INICIO, "LLAVES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 38: break;
          case 4: 
            { return retornarSimbolo(LLAVES_FIN, "LLAVES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 39: break;
          case 5: 
            { return retornarSimbolo(CORCHETES_INICIO, "CORCHETES_INICIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 40: break;
          case 6: 
            { return retornarSimbolo(CORCHETES_FIN, "CORCHETES_FIN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 41: break;
          case 7: 
            { return retornarSimbolo(MENOR, "MENOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 42: break;
          case 8: 
            { return retornarSimbolo(MAYOR, "MAYOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 43: break;
          case 9: 
            { return retornarSimbolo(EXCLAMACION, "EXCLAMACION", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 44: break;
          case 10: 
            { return retornarSimbolo(DOS_PUNTOS, "DOS_PUNTOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 45: break;
          case 11: 
            { return retornarSimbolo(COMA, "COMA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 46: break;
          case 12: 
            { return retornarSimbolo(VALOR_TEXTO, "VALOR_TEXTO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 47: break;
          case 13: 
            { return retornarSimbolo(VALOR, "VALOR", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 48: break;
          case 14: 
            { return retornarSimbolo(RESPUESTA, "RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 49: break;
          case 15: 
            { return retornarSimbolo(PARAMETRO, "PARAMETRO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 50: break;
          case 16: 
            { return retornarSimbolo(CONSULTAS, "CONSULTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 51: break;
          case 17: 
            { return retornarSimbolo(INICIO_RESPUESTA, "INICIO_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 52: break;
          case 18: 
            { return retornarSimbolo(FIN_RESPUESTA, "FIN_RESPUESTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 53: break;
          case 19: 
            { return retornarSimbolo(INICIO_RESPUESTAS, "INICIO_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 54: break;
          case 20: 
            { return retornarSimbolo(FIN_RESPUESTAS, "FIN_RESPUESTAS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 55: break;
          case 21: 
            { return retornarSimbolo(CREAR_USUARIO, "CREAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 56: break;
          case 22: 
            { return retornarSimbolo(LOGIN_USUARIO, "LOGIN_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 57: break;
          case 23: 
            { return retornarSimbolo(TABLA_CONSULTA, "TABLA_CONSULTA", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 58: break;
          case 24: 
            { return retornarSimbolo(CONSULTAR_DATOS, "CONSULTAR_DATOS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 59: break;
          case 25: 
            { return retornarSimbolo(ELIMINAR_USUARIO, "ELIMINAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 60: break;
          case 26: 
            { return retornarSimbolo(NUEVO_FORMULARIO, "NUEVO_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 61: break;
          case 27: 
            { return retornarSimbolo(MODIFICAR_USUARIO, "MODIFICAR_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 62: break;
          case 28: 
            { return retornarSimbolo(AGREGAR_COMPONENTE, "AGREGAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 63: break;
          case 29: 
            { return retornarSimbolo(ELIMINAR_COMPONENTE, "ELIMINAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 64: break;
          case 30: 
            { return retornarSimbolo(ELIMINAR_FORMULARIO, "ELIMINAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 65: break;
          case 31: 
            { return retornarSimbolo(CREDENCIALES_USUARIO, "CREDENCIALES_USUARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 66: break;
          case 32: 
            { return retornarSimbolo(MODIFICAR_COMPONENTE, "MODIFICAR_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 67: break;
          case 33: 
            { return retornarSimbolo(MODIFICAR_FORMULARIO, "MODIFICAR_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 68: break;
          case 34: 
            { return retornarSimbolo(PARAMETROS_COMPONENTE, "PARAMETROS_COMPONENTE", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 69: break;
          case 35: 
            { return retornarSimbolo(PARAMETROS_FORMULARIO, "PARAMETROS_FORMULARIO", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerIndigoRespuestas [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerIndigoRespuestas scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerIndigoRespuestas(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
